// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [2]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				switch r.Method {
				case "GET":
					s.handleGetStatusRequest([0]string{}, elemIsEscaped, w, r)
				default:
					s.notAllowed(w, r, "GET")
				}

				return
			}
			switch elem[0] {
			case 'a': // Prefix: "agents"

				if l := len("agents"); len(elem) >= l && elem[0:l] == "agents" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetAgentsRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "agentSymbol"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetAgentRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				}

			case 'f': // Prefix: "factions"

				if l := len("factions"); len(elem) >= l && elem[0:l] == "factions" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetFactionsRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "factionSymbol"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetFactionRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				}

			case 'm': // Prefix: "m"

				if l := len("m"); len(elem) >= l && elem[0:l] == "m" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "arket/supply-chain"

					if l := len("arket/supply-chain"); len(elem) >= l && elem[0:l] == "arket/supply-chain" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetSupplyChainRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

				case 'y': // Prefix: "y/"

					if l := len("y/"); len(elem) >= l && elem[0:l] == "y/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "agent"

						if l := len("agent"); len(elem) >= l && elem[0:l] == "agent" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetMyAgentRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					case 'c': // Prefix: "contracts"

						if l := len("contracts"); len(elem) >= l && elem[0:l] == "contracts" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetContractsRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "contractId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetContractRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "accept"

									if l := len("accept"); len(elem) >= l && elem[0:l] == "accept" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleAcceptContractRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								case 'd': // Prefix: "deliver"

									if l := len("deliver"); len(elem) >= l && elem[0:l] == "deliver" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleDeliverContractRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								case 'f': // Prefix: "fulfill"

									if l := len("fulfill"); len(elem) >= l && elem[0:l] == "fulfill" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleFulfillContractRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								}

							}

						}

					case 's': // Prefix: "ships"

						if l := len("ships"); len(elem) >= l && elem[0:l] == "ships" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetMyShipsRequest([0]string{}, elemIsEscaped, w, r)
							case "POST":
								s.handlePurchaseShipRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "shipSymbol"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetMyShipRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "c"

									if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "argo"

										if l := len("argo"); len(elem) >= l && elem[0:l] == "argo" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetMyShipCargoRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

									case 'h': // Prefix: "hart"

										if l := len("hart"); len(elem) >= l && elem[0:l] == "hart" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleCreateChartRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									case 'o': // Prefix: "ooldown"

										if l := len("ooldown"); len(elem) >= l && elem[0:l] == "ooldown" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetShipCooldownRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}

									}

								case 'd': // Prefix: "dock"

									if l := len("dock"); len(elem) >= l && elem[0:l] == "dock" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleDockShipRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								case 'e': // Prefix: "extract"

									if l := len("extract"); len(elem) >= l && elem[0:l] == "extract" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "POST":
											s.handleExtractResourcesRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/survey"

										if l := len("/survey"); len(elem) >= l && elem[0:l] == "/survey" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleExtractResourcesWithSurveyRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									}

								case 'j': // Prefix: "j"

									if l := len("j"); len(elem) >= l && elem[0:l] == "j" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'e': // Prefix: "ettison"

										if l := len("ettison"); len(elem) >= l && elem[0:l] == "ettison" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleJettisonRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									case 'u': // Prefix: "ump"

										if l := len("ump"); len(elem) >= l && elem[0:l] == "ump" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleJumpShipRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									}

								case 'm': // Prefix: "mo"

									if l := len("mo"); len(elem) >= l && elem[0:l] == "mo" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'd': // Prefix: "dules"

										if l := len("dules"); len(elem) >= l && elem[0:l] == "dules" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleGetShipModulesRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"

											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'i': // Prefix: "install"

												if l := len("install"); len(elem) >= l && elem[0:l] == "install" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleInstallShipModuleRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											case 'r': // Prefix: "remove"

												if l := len("remove"); len(elem) >= l && elem[0:l] == "remove" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleRemoveShipModuleRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										}

									case 'u': // Prefix: "unts"

										if l := len("unts"); len(elem) >= l && elem[0:l] == "unts" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleGetMountsRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET")
											}

											return
										}
										switch elem[0] {
										case '/': // Prefix: "/"

											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'i': // Prefix: "install"

												if l := len("install"); len(elem) >= l && elem[0:l] == "install" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleInstallMountRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											case 'r': // Prefix: "remove"

												if l := len("remove"); len(elem) >= l && elem[0:l] == "remove" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleRemoveMountRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										}

									}

								case 'n': // Prefix: "n"

									if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "av"

										if l := len("av"); len(elem) >= l && elem[0:l] == "av" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch r.Method {
											case "GET":
												s.handleGetShipNavRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											case "PATCH":
												s.handlePatchShipNavRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET,PATCH")
											}

											return
										}
										switch elem[0] {
										case 'i': // Prefix: "igate"

											if l := len("igate"); len(elem) >= l && elem[0:l] == "igate" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleNavigateShipRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									case 'e': // Prefix: "egotiate/contract"

										if l := len("egotiate/contract"); len(elem) >= l && elem[0:l] == "egotiate/contract" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleNegotiateContractRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									}

								case 'o': // Prefix: "orbit"

									if l := len("orbit"); len(elem) >= l && elem[0:l] == "orbit" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleOrbitShipRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								case 'p': // Prefix: "purchase"

									if l := len("purchase"); len(elem) >= l && elem[0:l] == "purchase" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handlePurchaseCargoRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								case 'r': // Prefix: "re"

									if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'f': // Prefix: "f"

										if l := len("f"); len(elem) >= l && elem[0:l] == "f" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'i': // Prefix: "ine"

											if l := len("ine"); len(elem) >= l && elem[0:l] == "ine" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleShipRefineRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										case 'u': // Prefix: "uel"

											if l := len("uel"); len(elem) >= l && elem[0:l] == "uel" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "POST":
													s.handleRefuelShipRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "POST")
												}

												return
											}

										}

									case 'p': // Prefix: "pair"

										if l := len("pair"); len(elem) >= l && elem[0:l] == "pair" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "GET":
												s.handleGetRepairShipRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											case "POST":
												s.handleRepairShipRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "GET,POST")
											}

											return
										}

									}

								case 's': // Prefix: "s"

									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'c': // Prefix: "c"

										if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "an/"

											if l := len("an/"); len(elem) >= l && elem[0:l] == "an/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 's': // Prefix: "s"

												if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'h': // Prefix: "hips"

													if l := len("hips"); len(elem) >= l && elem[0:l] == "hips" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleCreateShipShipScanRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												case 'y': // Prefix: "ystems"

													if l := len("ystems"); len(elem) >= l && elem[0:l] == "ystems" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch r.Method {
														case "POST":
															s.handleCreateShipSystemScanRequest([1]string{
																args[0],
															}, elemIsEscaped, w, r)
														default:
															s.notAllowed(w, r, "POST")
														}

														return
													}

												}

											case 'w': // Prefix: "waypoints"

												if l := len("waypoints"); len(elem) >= l && elem[0:l] == "waypoints" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch r.Method {
													case "POST":
														s.handleCreateShipWaypointScanRequest([1]string{
															args[0],
														}, elemIsEscaped, w, r)
													default:
														s.notAllowed(w, r, "POST")
													}

													return
												}

											}

										case 'r': // Prefix: "rap"

											if l := len("rap"); len(elem) >= l && elem[0:l] == "rap" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch r.Method {
												case "GET":
													s.handleGetScrapShipRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												case "POST":
													s.handleScrapShipRequest([1]string{
														args[0],
													}, elemIsEscaped, w, r)
												default:
													s.notAllowed(w, r, "GET,POST")
												}

												return
											}

										}

									case 'e': // Prefix: "ell"

										if l := len("ell"); len(elem) >= l && elem[0:l] == "ell" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleSellCargoRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									case 'i': // Prefix: "iphon"

										if l := len("iphon"); len(elem) >= l && elem[0:l] == "iphon" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleSiphonResourcesRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									case 'u': // Prefix: "urvey"

										if l := len("urvey"); len(elem) >= l && elem[0:l] == "urvey" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleCreateSurveyRequest([1]string{
													args[0],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									}

								case 't': // Prefix: "transfer"

									if l := len("transfer"); len(elem) >= l && elem[0:l] == "transfer" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleTransferCargoRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								case 'w': // Prefix: "warp"

									if l := len("warp"); len(elem) >= l && elem[0:l] == "warp" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "POST":
											s.handleWarpShipRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "POST")
										}

										return
									}

								}

							}

						}

					}

				}

			case 'r': // Prefix: "register"

				if l := len("register"); len(elem) >= l && elem[0:l] == "register" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleRegisterRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}

			case 's': // Prefix: "systems"

				if l := len("systems"); len(elem) >= l && elem[0:l] == "systems" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetSystemsRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "systemSymbol"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetSystemRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/waypoints"

						if l := len("/waypoints"); len(elem) >= l && elem[0:l] == "/waypoints" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleGetSystemWaypointsRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "waypointSymbol"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "GET":
									s.handleGetWaypointRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "construction"

									if l := len("construction"); len(elem) >= l && elem[0:l] == "construction" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch r.Method {
										case "GET":
											s.handleGetConstructionRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
									switch elem[0] {
									case '/': // Prefix: "/supply"

										if l := len("/supply"); len(elem) >= l && elem[0:l] == "/supply" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch r.Method {
											case "POST":
												s.handleSupplyConstructionRequest([2]string{
													args[0],
													args[1],
												}, elemIsEscaped, w, r)
											default:
												s.notAllowed(w, r, "POST")
											}

											return
										}

									}

								case 'j': // Prefix: "jump-gate"

									if l := len("jump-gate"); len(elem) >= l && elem[0:l] == "jump-gate" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetJumpGateRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

								case 'm': // Prefix: "market"

									if l := len("market"); len(elem) >= l && elem[0:l] == "market" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetMarketRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

								case 's': // Prefix: "shipyard"

									if l := len("shipyard"); len(elem) >= l && elem[0:l] == "shipyard" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetShipyardRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

								}

							}

						}

					}

				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [2]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"

			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				switch method {
				case "GET":
					r.name = GetStatusOperation
					r.summary = "Get Status"
					r.operationID = "get-status"
					r.pathPattern = "/"
					r.args = args
					r.count = 0
					return r, true
				default:
					return
				}
			}
			switch elem[0] {
			case 'a': // Prefix: "agents"

				if l := len("agents"); len(elem) >= l && elem[0:l] == "agents" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetAgentsOperation
						r.summary = "List Agents"
						r.operationID = "get-agents"
						r.pathPattern = "/agents"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "agentSymbol"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = GetAgentOperation
							r.summary = "Get Public Agent"
							r.operationID = "get-agent"
							r.pathPattern = "/agents/{agentSymbol}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				}

			case 'f': // Prefix: "factions"

				if l := len("factions"); len(elem) >= l && elem[0:l] == "factions" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetFactionsOperation
						r.summary = "List Factions"
						r.operationID = "get-factions"
						r.pathPattern = "/factions"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "factionSymbol"
					// Leaf parameter, slashes are prohibited
					idx := strings.IndexByte(elem, '/')
					if idx >= 0 {
						break
					}
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = GetFactionOperation
							r.summary = "Get Faction"
							r.operationID = "get-faction"
							r.pathPattern = "/factions/{factionSymbol}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

				}

			case 'm': // Prefix: "m"

				if l := len("m"); len(elem) >= l && elem[0:l] == "m" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "arket/supply-chain"

					if l := len("arket/supply-chain"); len(elem) >= l && elem[0:l] == "arket/supply-chain" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = GetSupplyChainOperation
							r.summary = "Get Supply Chain"
							r.operationID = "get-supply-chain"
							r.pathPattern = "/market/supply-chain"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

				case 'y': // Prefix: "y/"

					if l := len("y/"); len(elem) >= l && elem[0:l] == "y/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "agent"

						if l := len("agent"); len(elem) >= l && elem[0:l] == "agent" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetMyAgentOperation
								r.summary = "Get Agent"
								r.operationID = "get-my-agent"
								r.pathPattern = "/my/agent"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}

					case 'c': // Prefix: "contracts"

						if l := len("contracts"); len(elem) >= l && elem[0:l] == "contracts" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = GetContractsOperation
								r.summary = "List Contracts"
								r.operationID = "get-contracts"
								r.pathPattern = "/my/contracts"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "contractId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = GetContractOperation
									r.summary = "Get Contract"
									r.operationID = "get-contract"
									r.pathPattern = "/my/contracts/{contractId}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'a': // Prefix: "accept"

									if l := len("accept"); len(elem) >= l && elem[0:l] == "accept" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = AcceptContractOperation
											r.summary = "Accept Contract"
											r.operationID = "accept-contract"
											r.pathPattern = "/my/contracts/{contractId}/accept"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								case 'd': // Prefix: "deliver"

									if l := len("deliver"); len(elem) >= l && elem[0:l] == "deliver" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = DeliverContractOperation
											r.summary = "Deliver Cargo to Contract"
											r.operationID = "deliver-contract"
											r.pathPattern = "/my/contracts/{contractId}/deliver"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								case 'f': // Prefix: "fulfill"

									if l := len("fulfill"); len(elem) >= l && elem[0:l] == "fulfill" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = FulfillContractOperation
											r.summary = "Fulfill Contract"
											r.operationID = "fulfill-contract"
											r.pathPattern = "/my/contracts/{contractId}/fulfill"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								}

							}

						}

					case 's': // Prefix: "ships"

						if l := len("ships"); len(elem) >= l && elem[0:l] == "ships" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = GetMyShipsOperation
								r.summary = "List Ships"
								r.operationID = "get-my-ships"
								r.pathPattern = "/my/ships"
								r.args = args
								r.count = 0
								return r, true
							case "POST":
								r.name = PurchaseShipOperation
								r.summary = "Purchase Ship"
								r.operationID = "purchase-ship"
								r.pathPattern = "/my/ships"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "shipSymbol"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = GetMyShipOperation
									r.summary = "Get Ship"
									r.operationID = "get-my-ship"
									r.pathPattern = "/my/ships/{shipSymbol}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "c"

									if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "argo"

										if l := len("argo"); len(elem) >= l && elem[0:l] == "argo" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = GetMyShipCargoOperation
												r.summary = "Get Ship Cargo"
												r.operationID = "get-my-ship-cargo"
												r.pathPattern = "/my/ships/{shipSymbol}/cargo"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

									case 'h': // Prefix: "hart"

										if l := len("hart"); len(elem) >= l && elem[0:l] == "hart" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = CreateChartOperation
												r.summary = "Create Chart"
												r.operationID = "create-chart"
												r.pathPattern = "/my/ships/{shipSymbol}/chart"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

									case 'o': // Prefix: "ooldown"

										if l := len("ooldown"); len(elem) >= l && elem[0:l] == "ooldown" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = GetShipCooldownOperation
												r.summary = "Get Ship Cooldown"
												r.operationID = "get-ship-cooldown"
												r.pathPattern = "/my/ships/{shipSymbol}/cooldown"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

									}

								case 'd': // Prefix: "dock"

									if l := len("dock"); len(elem) >= l && elem[0:l] == "dock" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = DockShipOperation
											r.summary = "Dock Ship"
											r.operationID = "dock-ship"
											r.pathPattern = "/my/ships/{shipSymbol}/dock"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								case 'e': // Prefix: "extract"

									if l := len("extract"); len(elem) >= l && elem[0:l] == "extract" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "POST":
											r.name = ExtractResourcesOperation
											r.summary = "Extract Resources"
											r.operationID = "extract-resources"
											r.pathPattern = "/my/ships/{shipSymbol}/extract"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/survey"

										if l := len("/survey"); len(elem) >= l && elem[0:l] == "/survey" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = ExtractResourcesWithSurveyOperation
												r.summary = "Extract Resources with Survey"
												r.operationID = "extract-resources-with-survey"
												r.pathPattern = "/my/ships/{shipSymbol}/extract/survey"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

									}

								case 'j': // Prefix: "j"

									if l := len("j"); len(elem) >= l && elem[0:l] == "j" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'e': // Prefix: "ettison"

										if l := len("ettison"); len(elem) >= l && elem[0:l] == "ettison" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = JettisonOperation
												r.summary = "Jettison Cargo"
												r.operationID = "jettison"
												r.pathPattern = "/my/ships/{shipSymbol}/jettison"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

									case 'u': // Prefix: "ump"

										if l := len("ump"); len(elem) >= l && elem[0:l] == "ump" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = JumpShipOperation
												r.summary = "Jump Ship"
												r.operationID = "jump-ship"
												r.pathPattern = "/my/ships/{shipSymbol}/jump"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

									}

								case 'm': // Prefix: "mo"

									if l := len("mo"); len(elem) >= l && elem[0:l] == "mo" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'd': // Prefix: "dules"

										if l := len("dules"); len(elem) >= l && elem[0:l] == "dules" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = GetShipModulesOperation
												r.summary = "Get Ship Modules"
												r.operationID = "get-ship-modules"
												r.pathPattern = "/my/ships/{shipSymbol}/modules"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"

											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'i': // Prefix: "install"

												if l := len("install"); len(elem) >= l && elem[0:l] == "install" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = InstallShipModuleOperation
														r.summary = "Install Ship Module"
														r.operationID = "install-ship-module"
														r.pathPattern = "/my/ships/{shipSymbol}/modules/install"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}

											case 'r': // Prefix: "remove"

												if l := len("remove"); len(elem) >= l && elem[0:l] == "remove" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = RemoveShipModuleOperation
														r.summary = "Remove Ship Module"
														r.operationID = "remove-ship-module"
														r.pathPattern = "/my/ships/{shipSymbol}/modules/remove"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}

											}

										}

									case 'u': // Prefix: "unts"

										if l := len("unts"); len(elem) >= l && elem[0:l] == "unts" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = GetMountsOperation
												r.summary = "Get Mounts"
												r.operationID = "get-mounts"
												r.pathPattern = "/my/ships/{shipSymbol}/mounts"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case '/': // Prefix: "/"

											if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 'i': // Prefix: "install"

												if l := len("install"); len(elem) >= l && elem[0:l] == "install" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = InstallMountOperation
														r.summary = "Install Mount"
														r.operationID = "install-mount"
														r.pathPattern = "/my/ships/{shipSymbol}/mounts/install"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}

											case 'r': // Prefix: "remove"

												if l := len("remove"); len(elem) >= l && elem[0:l] == "remove" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = RemoveMountOperation
														r.summary = "Remove Mount"
														r.operationID = "remove-mount"
														r.pathPattern = "/my/ships/{shipSymbol}/mounts/remove"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}

											}

										}

									}

								case 'n': // Prefix: "n"

									if l := len("n"); len(elem) >= l && elem[0:l] == "n" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'a': // Prefix: "av"

										if l := len("av"); len(elem) >= l && elem[0:l] == "av" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											switch method {
											case "GET":
												r.name = GetShipNavOperation
												r.summary = "Get Ship Nav"
												r.operationID = "get-ship-nav"
												r.pathPattern = "/my/ships/{shipSymbol}/nav"
												r.args = args
												r.count = 1
												return r, true
											case "PATCH":
												r.name = PatchShipNavOperation
												r.summary = "Patch Ship Nav"
												r.operationID = "patch-ship-nav"
												r.pathPattern = "/my/ships/{shipSymbol}/nav"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}
										switch elem[0] {
										case 'i': // Prefix: "igate"

											if l := len("igate"); len(elem) >= l && elem[0:l] == "igate" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = NavigateShipOperation
													r.summary = "Navigate Ship"
													r.operationID = "navigate-ship"
													r.pathPattern = "/my/ships/{shipSymbol}/navigate"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}

										}

									case 'e': // Prefix: "egotiate/contract"

										if l := len("egotiate/contract"); len(elem) >= l && elem[0:l] == "egotiate/contract" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = NegotiateContractOperation
												r.summary = "Negotiate Contract"
												r.operationID = "negotiateContract"
												r.pathPattern = "/my/ships/{shipSymbol}/negotiate/contract"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

									}

								case 'o': // Prefix: "orbit"

									if l := len("orbit"); len(elem) >= l && elem[0:l] == "orbit" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = OrbitShipOperation
											r.summary = "Orbit Ship"
											r.operationID = "orbit-ship"
											r.pathPattern = "/my/ships/{shipSymbol}/orbit"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								case 'p': // Prefix: "purchase"

									if l := len("purchase"); len(elem) >= l && elem[0:l] == "purchase" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = PurchaseCargoOperation
											r.summary = "Purchase Cargo"
											r.operationID = "purchase-cargo"
											r.pathPattern = "/my/ships/{shipSymbol}/purchase"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								case 'r': // Prefix: "re"

									if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'f': // Prefix: "f"

										if l := len("f"); len(elem) >= l && elem[0:l] == "f" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'i': // Prefix: "ine"

											if l := len("ine"); len(elem) >= l && elem[0:l] == "ine" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = ShipRefineOperation
													r.summary = "Ship Refine"
													r.operationID = "ship-refine"
													r.pathPattern = "/my/ships/{shipSymbol}/refine"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}

										case 'u': // Prefix: "uel"

											if l := len("uel"); len(elem) >= l && elem[0:l] == "uel" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "POST":
													r.name = RefuelShipOperation
													r.summary = "Refuel Ship"
													r.operationID = "refuel-ship"
													r.pathPattern = "/my/ships/{shipSymbol}/refuel"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}

										}

									case 'p': // Prefix: "pair"

										if l := len("pair"); len(elem) >= l && elem[0:l] == "pair" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "GET":
												r.name = GetRepairShipOperation
												r.summary = "Get Repair Ship"
												r.operationID = "get-repair-ship"
												r.pathPattern = "/my/ships/{shipSymbol}/repair"
												r.args = args
												r.count = 1
												return r, true
											case "POST":
												r.name = RepairShipOperation
												r.summary = "Repair Ship"
												r.operationID = "repair-ship"
												r.pathPattern = "/my/ships/{shipSymbol}/repair"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

									}

								case 's': // Prefix: "s"

									if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										break
									}
									switch elem[0] {
									case 'c': // Prefix: "c"

										if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											break
										}
										switch elem[0] {
										case 'a': // Prefix: "an/"

											if l := len("an/"); len(elem) >= l && elem[0:l] == "an/" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												break
											}
											switch elem[0] {
											case 's': // Prefix: "s"

												if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													break
												}
												switch elem[0] {
												case 'h': // Prefix: "hips"

													if l := len("hips"); len(elem) >= l && elem[0:l] == "hips" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = CreateShipShipScanOperation
															r.summary = "Scan Ships"
															r.operationID = "create-ship-ship-scan"
															r.pathPattern = "/my/ships/{shipSymbol}/scan/ships"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}

												case 'y': // Prefix: "ystems"

													if l := len("ystems"); len(elem) >= l && elem[0:l] == "ystems" {
														elem = elem[l:]
													} else {
														break
													}

													if len(elem) == 0 {
														// Leaf node.
														switch method {
														case "POST":
															r.name = CreateShipSystemScanOperation
															r.summary = "Scan Systems"
															r.operationID = "create-ship-system-scan"
															r.pathPattern = "/my/ships/{shipSymbol}/scan/systems"
															r.args = args
															r.count = 1
															return r, true
														default:
															return
														}
													}

												}

											case 'w': // Prefix: "waypoints"

												if l := len("waypoints"); len(elem) >= l && elem[0:l] == "waypoints" {
													elem = elem[l:]
												} else {
													break
												}

												if len(elem) == 0 {
													// Leaf node.
													switch method {
													case "POST":
														r.name = CreateShipWaypointScanOperation
														r.summary = "Scan Waypoints"
														r.operationID = "create-ship-waypoint-scan"
														r.pathPattern = "/my/ships/{shipSymbol}/scan/waypoints"
														r.args = args
														r.count = 1
														return r, true
													default:
														return
													}
												}

											}

										case 'r': // Prefix: "rap"

											if l := len("rap"); len(elem) >= l && elem[0:l] == "rap" {
												elem = elem[l:]
											} else {
												break
											}

											if len(elem) == 0 {
												// Leaf node.
												switch method {
												case "GET":
													r.name = GetScrapShipOperation
													r.summary = "Get Scrap Ship"
													r.operationID = "get-scrap-ship"
													r.pathPattern = "/my/ships/{shipSymbol}/scrap"
													r.args = args
													r.count = 1
													return r, true
												case "POST":
													r.name = ScrapShipOperation
													r.summary = "Scrap Ship"
													r.operationID = "scrap-ship"
													r.pathPattern = "/my/ships/{shipSymbol}/scrap"
													r.args = args
													r.count = 1
													return r, true
												default:
													return
												}
											}

										}

									case 'e': // Prefix: "ell"

										if l := len("ell"); len(elem) >= l && elem[0:l] == "ell" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = SellCargoOperation
												r.summary = "Sell Cargo"
												r.operationID = "sell-cargo"
												r.pathPattern = "/my/ships/{shipSymbol}/sell"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

									case 'i': // Prefix: "iphon"

										if l := len("iphon"); len(elem) >= l && elem[0:l] == "iphon" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = SiphonResourcesOperation
												r.summary = "Siphon Resources"
												r.operationID = "siphon-resources"
												r.pathPattern = "/my/ships/{shipSymbol}/siphon"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

									case 'u': // Prefix: "urvey"

										if l := len("urvey"); len(elem) >= l && elem[0:l] == "urvey" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = CreateSurveyOperation
												r.summary = "Create Survey"
												r.operationID = "create-survey"
												r.pathPattern = "/my/ships/{shipSymbol}/survey"
												r.args = args
												r.count = 1
												return r, true
											default:
												return
											}
										}

									}

								case 't': // Prefix: "transfer"

									if l := len("transfer"); len(elem) >= l && elem[0:l] == "transfer" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = TransferCargoOperation
											r.summary = "Transfer Cargo"
											r.operationID = "transfer-cargo"
											r.pathPattern = "/my/ships/{shipSymbol}/transfer"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								case 'w': // Prefix: "warp"

									if l := len("warp"); len(elem) >= l && elem[0:l] == "warp" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "POST":
											r.name = WarpShipOperation
											r.summary = "Warp Ship"
											r.operationID = "warp-ship"
											r.pathPattern = "/my/ships/{shipSymbol}/warp"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

								}

							}

						}

					}

				}

			case 'r': // Prefix: "register"

				if l := len("register"); len(elem) >= l && elem[0:l] == "register" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "POST":
						r.name = RegisterOperation
						r.summary = "Register New Agent"
						r.operationID = "register"
						r.pathPattern = "/register"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

			case 's': // Prefix: "systems"

				if l := len("systems"); len(elem) >= l && elem[0:l] == "systems" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetSystemsOperation
						r.summary = "List Systems"
						r.operationID = "get-systems"
						r.pathPattern = "/systems"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "systemSymbol"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = GetSystemOperation
							r.summary = "Get System"
							r.operationID = "get-system"
							r.pathPattern = "/systems/{systemSymbol}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/waypoints"

						if l := len("/waypoints"); len(elem) >= l && elem[0:l] == "/waypoints" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = GetSystemWaypointsOperation
								r.summary = "List Waypoints in System"
								r.operationID = "get-system-waypoints"
								r.pathPattern = "/systems/{systemSymbol}/waypoints"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"

							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "waypointSymbol"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "GET":
									r.name = GetWaypointOperation
									r.summary = "Get Waypoint"
									r.operationID = "get-waypoint"
									r.pathPattern = "/systems/{systemSymbol}/waypoints/{waypointSymbol}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/"

								if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'c': // Prefix: "construction"

									if l := len("construction"); len(elem) >= l && elem[0:l] == "construction" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											r.name = GetConstructionOperation
											r.summary = "Get Construction Site"
											r.operationID = "get-construction"
											r.pathPattern = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/construction"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}
									switch elem[0] {
									case '/': // Prefix: "/supply"

										if l := len("/supply"); len(elem) >= l && elem[0:l] == "/supply" {
											elem = elem[l:]
										} else {
											break
										}

										if len(elem) == 0 {
											// Leaf node.
											switch method {
											case "POST":
												r.name = SupplyConstructionOperation
												r.summary = "Supply Construction Site"
												r.operationID = "supply-construction"
												r.pathPattern = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/construction/supply"
												r.args = args
												r.count = 2
												return r, true
											default:
												return
											}
										}

									}

								case 'j': // Prefix: "jump-gate"

									if l := len("jump-gate"); len(elem) >= l && elem[0:l] == "jump-gate" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GetJumpGateOperation
											r.summary = "Get Jump Gate"
											r.operationID = "get-jump-gate"
											r.pathPattern = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

								case 'm': // Prefix: "market"

									if l := len("market"); len(elem) >= l && elem[0:l] == "market" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GetMarketOperation
											r.summary = "Get Market"
											r.operationID = "get-market"
											r.pathPattern = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/market"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

								case 's': // Prefix: "shipyard"

									if l := len("shipyard"); len(elem) >= l && elem[0:l] == "shipyard" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GetShipyardOperation
											r.summary = "Get Shipyard"
											r.operationID = "get-shipyard"
											r.pathPattern = "/systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

								}

							}

						}

					}

				}

			}

		}
	}
	return r, false
}
