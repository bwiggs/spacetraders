// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// AcceptContractParams is parameters of accept-contract operation.
type AcceptContractParams struct {
	// The contract ID to accept.
	ContractId string
}

func unpackAcceptContractParams(packed middleware.Parameters) (params AcceptContractParams) {
	{
		key := middleware.ParameterKey{
			Name: "contractId",
			In:   "path",
		}
		params.ContractId = packed[key].(string)
	}
	return params
}

func decodeAcceptContractParams(args [1]string, argsEscaped bool, r *http.Request) (params AcceptContractParams, _ error) {
	// Decode path: contractId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contractId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContractId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contractId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateChartParams is parameters of create-chart operation.
type CreateChartParams struct {
	// The symbol of the ship.
	ShipSymbol string
}

func unpackCreateChartParams(packed middleware.Parameters) (params CreateChartParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeCreateChartParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateChartParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateShipShipScanParams is parameters of create-ship-ship-scan operation.
type CreateShipShipScanParams struct {
	// The ship symbol.
	ShipSymbol string
}

func unpackCreateShipShipScanParams(packed middleware.Parameters) (params CreateShipShipScanParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeCreateShipShipScanParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateShipShipScanParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateShipSystemScanParams is parameters of create-ship-system-scan operation.
type CreateShipSystemScanParams struct {
	// The ship symbol.
	ShipSymbol string
}

func unpackCreateShipSystemScanParams(packed middleware.Parameters) (params CreateShipSystemScanParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeCreateShipSystemScanParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateShipSystemScanParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateShipWaypointScanParams is parameters of create-ship-waypoint-scan operation.
type CreateShipWaypointScanParams struct {
	// The ship symbol.
	ShipSymbol string
}

func unpackCreateShipWaypointScanParams(packed middleware.Parameters) (params CreateShipWaypointScanParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeCreateShipWaypointScanParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateShipWaypointScanParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateSurveyParams is parameters of create-survey operation.
type CreateSurveyParams struct {
	// The symbol of the ship.
	ShipSymbol string
}

func unpackCreateSurveyParams(packed middleware.Parameters) (params CreateSurveyParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeCreateSurveyParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateSurveyParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeliverContractParams is parameters of deliver-contract operation.
type DeliverContractParams struct {
	// The ID of the contract.
	ContractId string
}

func unpackDeliverContractParams(packed middleware.Parameters) (params DeliverContractParams) {
	{
		key := middleware.ParameterKey{
			Name: "contractId",
			In:   "path",
		}
		params.ContractId = packed[key].(string)
	}
	return params
}

func decodeDeliverContractParams(args [1]string, argsEscaped bool, r *http.Request) (params DeliverContractParams, _ error) {
	// Decode path: contractId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contractId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContractId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contractId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DockShipParams is parameters of dock-ship operation.
type DockShipParams struct {
	// The symbol of the ship.
	ShipSymbol string
}

func unpackDockShipParams(packed middleware.Parameters) (params DockShipParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeDockShipParams(args [1]string, argsEscaped bool, r *http.Request) (params DockShipParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ExtractResourcesParams is parameters of extract-resources operation.
type ExtractResourcesParams struct {
	// The ship symbol.
	ShipSymbol string
}

func unpackExtractResourcesParams(packed middleware.Parameters) (params ExtractResourcesParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeExtractResourcesParams(args [1]string, argsEscaped bool, r *http.Request) (params ExtractResourcesParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ExtractResourcesWithSurveyParams is parameters of extract-resources-with-survey operation.
type ExtractResourcesWithSurveyParams struct {
	// The ship symbol.
	ShipSymbol string
}

func unpackExtractResourcesWithSurveyParams(packed middleware.Parameters) (params ExtractResourcesWithSurveyParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeExtractResourcesWithSurveyParams(args [1]string, argsEscaped bool, r *http.Request) (params ExtractResourcesWithSurveyParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// FulfillContractParams is parameters of fulfill-contract operation.
type FulfillContractParams struct {
	// The ID of the contract to fulfill.
	ContractId string
}

func unpackFulfillContractParams(packed middleware.Parameters) (params FulfillContractParams) {
	{
		key := middleware.ParameterKey{
			Name: "contractId",
			In:   "path",
		}
		params.ContractId = packed[key].(string)
	}
	return params
}

func decodeFulfillContractParams(args [1]string, argsEscaped bool, r *http.Request) (params FulfillContractParams, _ error) {
	// Decode path: contractId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contractId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContractId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contractId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetAgentParams is parameters of get-agent operation.
type GetAgentParams struct {
	// The agent symbol.
	AgentSymbol string
}

func unpackGetAgentParams(packed middleware.Parameters) (params GetAgentParams) {
	{
		key := middleware.ParameterKey{
			Name: "agentSymbol",
			In:   "path",
		}
		params.AgentSymbol = packed[key].(string)
	}
	return params
}

func decodeGetAgentParams(args [1]string, argsEscaped bool, r *http.Request) (params GetAgentParams, _ error) {
	// Set default value for path: agentSymbol.
	{
		val := string("FEBA66")
		params.AgentSymbol = val
	}
	// Decode path: agentSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "agentSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.AgentSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "agentSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetAgentsParams is parameters of get-agents operation.
type GetAgentsParams struct {
	// What entry offset to request.
	Page OptInt
	// How many entries to return per page.
	Limit OptInt
}

func unpackGetAgentsParams(packed middleware.Parameters) (params GetAgentsParams) {
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	return params
}

func decodeGetAgentsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetAgentsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Page.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := int(10)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           20,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetConstructionParams is parameters of get-construction operation.
type GetConstructionParams struct {
	// The system symbol.
	SystemSymbol string
	// The waypoint symbol.
	WaypointSymbol string
}

func unpackGetConstructionParams(packed middleware.Parameters) (params GetConstructionParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemSymbol",
			In:   "path",
		}
		params.SystemSymbol = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "waypointSymbol",
			In:   "path",
		}
		params.WaypointSymbol = packed[key].(string)
	}
	return params
}

func decodeGetConstructionParams(args [2]string, argsEscaped bool, r *http.Request) (params GetConstructionParams, _ error) {
	// Decode path: systemSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "systemSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SystemSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemSymbol",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: waypointSymbol.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "waypointSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.WaypointSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "waypointSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetContractParams is parameters of get-contract operation.
type GetContractParams struct {
	// The contract ID.
	ContractId string
}

func unpackGetContractParams(packed middleware.Parameters) (params GetContractParams) {
	{
		key := middleware.ParameterKey{
			Name: "contractId",
			In:   "path",
		}
		params.ContractId = packed[key].(string)
	}
	return params
}

func decodeGetContractParams(args [1]string, argsEscaped bool, r *http.Request) (params GetContractParams, _ error) {
	// Decode path: contractId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contractId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContractId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contractId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetContractsParams is parameters of get-contracts operation.
type GetContractsParams struct {
	// What entry offset to request.
	Page OptInt
	// How many entries to return per page.
	Limit OptInt
}

func unpackGetContractsParams(packed middleware.Parameters) (params GetContractsParams) {
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	return params
}

func decodeGetContractsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetContractsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Page.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := int(10)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           20,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetFactionParams is parameters of get-faction operation.
type GetFactionParams struct {
	// The faction symbol.
	FactionSymbol string
}

func unpackGetFactionParams(packed middleware.Parameters) (params GetFactionParams) {
	{
		key := middleware.ParameterKey{
			Name: "factionSymbol",
			In:   "path",
		}
		params.FactionSymbol = packed[key].(string)
	}
	return params
}

func decodeGetFactionParams(args [1]string, argsEscaped bool, r *http.Request) (params GetFactionParams, _ error) {
	// Decode path: factionSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "factionSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.FactionSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "factionSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetFactionsParams is parameters of get-factions operation.
type GetFactionsParams struct {
	// What entry offset to request.
	Page OptInt
	// How many entries to return per page.
	Limit OptInt
}

func unpackGetFactionsParams(packed middleware.Parameters) (params GetFactionsParams) {
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	return params
}

func decodeGetFactionsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetFactionsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Page.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := int(10)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           20,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetJumpGateParams is parameters of get-jump-gate operation.
type GetJumpGateParams struct {
	// The system symbol.
	SystemSymbol string
	// The waypoint symbol.
	WaypointSymbol string
}

func unpackGetJumpGateParams(packed middleware.Parameters) (params GetJumpGateParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemSymbol",
			In:   "path",
		}
		params.SystemSymbol = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "waypointSymbol",
			In:   "path",
		}
		params.WaypointSymbol = packed[key].(string)
	}
	return params
}

func decodeGetJumpGateParams(args [2]string, argsEscaped bool, r *http.Request) (params GetJumpGateParams, _ error) {
	// Decode path: systemSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "systemSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SystemSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemSymbol",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: waypointSymbol.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "waypointSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.WaypointSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "waypointSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetMarketParams is parameters of get-market operation.
type GetMarketParams struct {
	// The system symbol.
	SystemSymbol string
	// The waypoint symbol.
	WaypointSymbol string
}

func unpackGetMarketParams(packed middleware.Parameters) (params GetMarketParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemSymbol",
			In:   "path",
		}
		params.SystemSymbol = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "waypointSymbol",
			In:   "path",
		}
		params.WaypointSymbol = packed[key].(string)
	}
	return params
}

func decodeGetMarketParams(args [2]string, argsEscaped bool, r *http.Request) (params GetMarketParams, _ error) {
	// Decode path: systemSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "systemSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SystemSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemSymbol",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: waypointSymbol.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "waypointSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.WaypointSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "waypointSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetMountsParams is parameters of get-mounts operation.
type GetMountsParams struct {
	// The ship's symbol.
	ShipSymbol string
}

func unpackGetMountsParams(packed middleware.Parameters) (params GetMountsParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeGetMountsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetMountsParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetMyShipParams is parameters of get-my-ship operation.
type GetMyShipParams struct {
	// The symbol of the ship.
	ShipSymbol string
}

func unpackGetMyShipParams(packed middleware.Parameters) (params GetMyShipParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeGetMyShipParams(args [1]string, argsEscaped bool, r *http.Request) (params GetMyShipParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetMyShipCargoParams is parameters of get-my-ship-cargo operation.
type GetMyShipCargoParams struct {
	// The symbol of the ship.
	ShipSymbol string
}

func unpackGetMyShipCargoParams(packed middleware.Parameters) (params GetMyShipCargoParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeGetMyShipCargoParams(args [1]string, argsEscaped bool, r *http.Request) (params GetMyShipCargoParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetMyShipsParams is parameters of get-my-ships operation.
type GetMyShipsParams struct {
	// What entry offset to request.
	Page OptInt
	// How many entries to return per page.
	Limit OptInt
}

func unpackGetMyShipsParams(packed middleware.Parameters) (params GetMyShipsParams) {
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	return params
}

func decodeGetMyShipsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetMyShipsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Page.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := int(10)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           20,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetRepairShipParams is parameters of get-repair-ship operation.
type GetRepairShipParams struct {
	// The ship symbol.
	ShipSymbol string
}

func unpackGetRepairShipParams(packed middleware.Parameters) (params GetRepairShipParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeGetRepairShipParams(args [1]string, argsEscaped bool, r *http.Request) (params GetRepairShipParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetScrapShipParams is parameters of get-scrap-ship operation.
type GetScrapShipParams struct {
	// The ship symbol.
	ShipSymbol string
}

func unpackGetScrapShipParams(packed middleware.Parameters) (params GetScrapShipParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeGetScrapShipParams(args [1]string, argsEscaped bool, r *http.Request) (params GetScrapShipParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetShipCooldownParams is parameters of get-ship-cooldown operation.
type GetShipCooldownParams struct {
	// The symbol of the ship.
	ShipSymbol string
}

func unpackGetShipCooldownParams(packed middleware.Parameters) (params GetShipCooldownParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeGetShipCooldownParams(args [1]string, argsEscaped bool, r *http.Request) (params GetShipCooldownParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetShipModulesParams is parameters of get-ship-modules operation.
type GetShipModulesParams struct {
	// The symbol of the ship.
	ShipSymbol string
}

func unpackGetShipModulesParams(packed middleware.Parameters) (params GetShipModulesParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeGetShipModulesParams(args [1]string, argsEscaped bool, r *http.Request) (params GetShipModulesParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetShipNavParams is parameters of get-ship-nav operation.
type GetShipNavParams struct {
	// The ship symbol.
	ShipSymbol string
}

func unpackGetShipNavParams(packed middleware.Parameters) (params GetShipNavParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeGetShipNavParams(args [1]string, argsEscaped bool, r *http.Request) (params GetShipNavParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetShipyardParams is parameters of get-shipyard operation.
type GetShipyardParams struct {
	// The system symbol.
	SystemSymbol string
	// The waypoint symbol.
	WaypointSymbol string
}

func unpackGetShipyardParams(packed middleware.Parameters) (params GetShipyardParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemSymbol",
			In:   "path",
		}
		params.SystemSymbol = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "waypointSymbol",
			In:   "path",
		}
		params.WaypointSymbol = packed[key].(string)
	}
	return params
}

func decodeGetShipyardParams(args [2]string, argsEscaped bool, r *http.Request) (params GetShipyardParams, _ error) {
	// Decode path: systemSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "systemSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SystemSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemSymbol",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: waypointSymbol.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "waypointSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.WaypointSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "waypointSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetSystemParams is parameters of get-system operation.
type GetSystemParams struct {
	// The system symbol.
	SystemSymbol string
}

func unpackGetSystemParams(packed middleware.Parameters) (params GetSystemParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemSymbol",
			In:   "path",
		}
		params.SystemSymbol = packed[key].(string)
	}
	return params
}

func decodeGetSystemParams(args [1]string, argsEscaped bool, r *http.Request) (params GetSystemParams, _ error) {
	// Set default value for path: systemSymbol.
	{
		val := string("X1-OE")
		params.SystemSymbol = val
	}
	// Decode path: systemSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "systemSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SystemSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetSystemWaypointsParams is parameters of get-system-waypoints operation.
type GetSystemWaypointsParams struct {
	// What entry offset to request.
	Page OptInt
	// How many entries to return per page.
	Limit OptInt
	// Filter waypoints by type.
	Type OptWaypointType
	// The system symbol.
	SystemSymbol string
}

func unpackGetSystemWaypointsParams(packed middleware.Parameters) (params GetSystemWaypointsParams) {
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "type",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Type = v.(OptWaypointType)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "systemSymbol",
			In:   "path",
		}
		params.SystemSymbol = packed[key].(string)
	}
	return params
}

func decodeGetSystemWaypointsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetSystemWaypointsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Page.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := int(10)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           20,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: type.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "type",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTypeVal WaypointType
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotTypeVal = WaypointType(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Type.SetTo(paramsDotTypeVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Type.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "type",
			In:   "query",
			Err:  err,
		}
	}
	// Decode path: systemSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "systemSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SystemSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetSystemsParams is parameters of get-systems operation.
type GetSystemsParams struct {
	// What entry offset to request.
	Page OptInt
	// How many entries to return per page.
	Limit OptInt
}

func unpackGetSystemsParams(packed middleware.Parameters) (params GetSystemsParams) {
	{
		key := middleware.ParameterKey{
			Name: "page",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Page = v.(OptInt)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "limit",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Limit = v.(OptInt)
		}
	}
	return params
}

func decodeGetSystemsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetSystemsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: page.
	{
		val := int(1)
		params.Page.SetTo(val)
	}
	// Decode query: page.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "page",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPageVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotPageVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Page.SetTo(paramsDotPageVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Page.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        false,
							Max:           0,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "page",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: limit.
	{
		val := int(10)
		params.Limit.SetTo(val)
	}
	// Decode query: limit.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "limit",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Limit.SetTo(paramsDotLimitVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Limit.Get(); ok {
					if err := func() error {
						if err := (validate.Int{
							MinSet:        true,
							Min:           1,
							MaxSet:        true,
							Max:           20,
							MinExclusive:  false,
							MaxExclusive:  false,
							MultipleOfSet: false,
							MultipleOf:    0,
						}).Validate(int64(value)); err != nil {
							return errors.Wrap(err, "int")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "limit",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetWaypointParams is parameters of get-waypoint operation.
type GetWaypointParams struct {
	// The system symbol.
	SystemSymbol string
	// The waypoint symbol.
	WaypointSymbol string
}

func unpackGetWaypointParams(packed middleware.Parameters) (params GetWaypointParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemSymbol",
			In:   "path",
		}
		params.SystemSymbol = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "waypointSymbol",
			In:   "path",
		}
		params.WaypointSymbol = packed[key].(string)
	}
	return params
}

func decodeGetWaypointParams(args [2]string, argsEscaped bool, r *http.Request) (params GetWaypointParams, _ error) {
	// Decode path: systemSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "systemSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SystemSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemSymbol",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: waypointSymbol.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "waypointSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.WaypointSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "waypointSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// InstallMountParams is parameters of install-mount operation.
type InstallMountParams struct {
	// The ship's symbol.
	ShipSymbol string
}

func unpackInstallMountParams(packed middleware.Parameters) (params InstallMountParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeInstallMountParams(args [1]string, argsEscaped bool, r *http.Request) (params InstallMountParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// InstallShipModuleParams is parameters of install-ship-module operation.
type InstallShipModuleParams struct {
	// The symbol of the ship.
	ShipSymbol string
}

func unpackInstallShipModuleParams(packed middleware.Parameters) (params InstallShipModuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeInstallShipModuleParams(args [1]string, argsEscaped bool, r *http.Request) (params InstallShipModuleParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// JettisonParams is parameters of jettison operation.
type JettisonParams struct {
	// The ship symbol.
	ShipSymbol string
}

func unpackJettisonParams(packed middleware.Parameters) (params JettisonParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeJettisonParams(args [1]string, argsEscaped bool, r *http.Request) (params JettisonParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// JumpShipParams is parameters of jump-ship operation.
type JumpShipParams struct {
	// The ship symbol.
	ShipSymbol string
}

func unpackJumpShipParams(packed middleware.Parameters) (params JumpShipParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeJumpShipParams(args [1]string, argsEscaped bool, r *http.Request) (params JumpShipParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// NavigateShipParams is parameters of navigate-ship operation.
type NavigateShipParams struct {
	// The ship symbol.
	ShipSymbol string
}

func unpackNavigateShipParams(packed middleware.Parameters) (params NavigateShipParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeNavigateShipParams(args [1]string, argsEscaped bool, r *http.Request) (params NavigateShipParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// NegotiateContractParams is parameters of negotiateContract operation.
type NegotiateContractParams struct {
	// The ship's symbol.
	ShipSymbol string
}

func unpackNegotiateContractParams(packed middleware.Parameters) (params NegotiateContractParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeNegotiateContractParams(args [1]string, argsEscaped bool, r *http.Request) (params NegotiateContractParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// OrbitShipParams is parameters of orbit-ship operation.
type OrbitShipParams struct {
	// The symbol of the ship.
	ShipSymbol string
}

func unpackOrbitShipParams(packed middleware.Parameters) (params OrbitShipParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeOrbitShipParams(args [1]string, argsEscaped bool, r *http.Request) (params OrbitShipParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PatchShipNavParams is parameters of patch-ship-nav operation.
type PatchShipNavParams struct {
	// The ship symbol.
	ShipSymbol string
}

func unpackPatchShipNavParams(packed middleware.Parameters) (params PatchShipNavParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodePatchShipNavParams(args [1]string, argsEscaped bool, r *http.Request) (params PatchShipNavParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PurchaseCargoParams is parameters of purchase-cargo operation.
type PurchaseCargoParams struct {
	// The ship's symbol.
	ShipSymbol string
}

func unpackPurchaseCargoParams(packed middleware.Parameters) (params PurchaseCargoParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodePurchaseCargoParams(args [1]string, argsEscaped bool, r *http.Request) (params PurchaseCargoParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RefuelShipParams is parameters of refuel-ship operation.
type RefuelShipParams struct {
	// The ship symbol.
	ShipSymbol string
}

func unpackRefuelShipParams(packed middleware.Parameters) (params RefuelShipParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeRefuelShipParams(args [1]string, argsEscaped bool, r *http.Request) (params RefuelShipParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RemoveMountParams is parameters of remove-mount operation.
type RemoveMountParams struct {
	// The ship's symbol.
	ShipSymbol string
}

func unpackRemoveMountParams(packed middleware.Parameters) (params RemoveMountParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeRemoveMountParams(args [1]string, argsEscaped bool, r *http.Request) (params RemoveMountParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RemoveShipModuleParams is parameters of remove-ship-module operation.
type RemoveShipModuleParams struct {
	// The symbol of the ship.
	ShipSymbol string
}

func unpackRemoveShipModuleParams(packed middleware.Parameters) (params RemoveShipModuleParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeRemoveShipModuleParams(args [1]string, argsEscaped bool, r *http.Request) (params RemoveShipModuleParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// RepairShipParams is parameters of repair-ship operation.
type RepairShipParams struct {
	// The ship symbol.
	ShipSymbol string
}

func unpackRepairShipParams(packed middleware.Parameters) (params RepairShipParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeRepairShipParams(args [1]string, argsEscaped bool, r *http.Request) (params RepairShipParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ScrapShipParams is parameters of scrap-ship operation.
type ScrapShipParams struct {
	// The ship symbol.
	ShipSymbol string
}

func unpackScrapShipParams(packed middleware.Parameters) (params ScrapShipParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeScrapShipParams(args [1]string, argsEscaped bool, r *http.Request) (params ScrapShipParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SellCargoParams is parameters of sell-cargo operation.
type SellCargoParams struct {
	// Symbol of a ship.
	ShipSymbol string
}

func unpackSellCargoParams(packed middleware.Parameters) (params SellCargoParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeSellCargoParams(args [1]string, argsEscaped bool, r *http.Request) (params SellCargoParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ShipRefineParams is parameters of ship-refine operation.
type ShipRefineParams struct {
	// The symbol of the ship.
	ShipSymbol string
}

func unpackShipRefineParams(packed middleware.Parameters) (params ShipRefineParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeShipRefineParams(args [1]string, argsEscaped bool, r *http.Request) (params ShipRefineParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SiphonResourcesParams is parameters of siphon-resources operation.
type SiphonResourcesParams struct {
	// The ship symbol.
	ShipSymbol string
}

func unpackSiphonResourcesParams(packed middleware.Parameters) (params SiphonResourcesParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeSiphonResourcesParams(args [1]string, argsEscaped bool, r *http.Request) (params SiphonResourcesParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// SupplyConstructionParams is parameters of supply-construction operation.
type SupplyConstructionParams struct {
	// The system symbol.
	SystemSymbol string
	// The waypoint symbol.
	WaypointSymbol string
}

func unpackSupplyConstructionParams(packed middleware.Parameters) (params SupplyConstructionParams) {
	{
		key := middleware.ParameterKey{
			Name: "systemSymbol",
			In:   "path",
		}
		params.SystemSymbol = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "waypointSymbol",
			In:   "path",
		}
		params.WaypointSymbol = packed[key].(string)
	}
	return params
}

func decodeSupplyConstructionParams(args [2]string, argsEscaped bool, r *http.Request) (params SupplyConstructionParams, _ error) {
	// Decode path: systemSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "systemSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SystemSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "systemSymbol",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: waypointSymbol.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "waypointSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.WaypointSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "waypointSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// TransferCargoParams is parameters of transfer-cargo operation.
type TransferCargoParams struct {
	// The transferring ship's symbol.
	ShipSymbol string
}

func unpackTransferCargoParams(packed middleware.Parameters) (params TransferCargoParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeTransferCargoParams(args [1]string, argsEscaped bool, r *http.Request) (params TransferCargoParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// WarpShipParams is parameters of warp-ship operation.
type WarpShipParams struct {
	// The ship symbol.
	ShipSymbol string
}

func unpackWarpShipParams(packed middleware.Parameters) (params WarpShipParams) {
	{
		key := middleware.ParameterKey{
			Name: "shipSymbol",
			In:   "path",
		}
		params.ShipSymbol = packed[key].(string)
	}
	return params
}

func decodeWarpShipParams(args [1]string, argsEscaped bool, r *http.Request) (params WarpShipParams, _ error) {
	// Decode path: shipSymbol.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "shipSymbol",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ShipSymbol = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "shipSymbol",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
