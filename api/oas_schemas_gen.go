// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"

	"github.com/go-faster/errors"
)

type AcceptContractOK struct {
	Data AcceptContractOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *AcceptContractOK) GetData() AcceptContractOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *AcceptContractOK) SetData(val AcceptContractOKData) {
	s.Data = val
}

type AcceptContractOKData struct {
	Agent    Agent    `json:"agent"`
	Contract Contract `json:"contract"`
}

// GetAgent returns the value of Agent.
func (s *AcceptContractOKData) GetAgent() Agent {
	return s.Agent
}

// GetContract returns the value of Contract.
func (s *AcceptContractOKData) GetContract() Contract {
	return s.Contract
}

// SetAgent sets the value of Agent.
func (s *AcceptContractOKData) SetAgent(val Agent) {
	s.Agent = val
}

// SetContract sets the value of Contract.
func (s *AcceptContractOKData) SetContract(val Contract) {
	s.Contract = val
}

// The activity level of a trade good. If the good is an import, this represents how strong
// consumption is. If the good is an export, this represents how strong the production is for the
// good. When activity is strong, consumption or production is near maximum capacity. When activity
// is weak, consumption or production is near minimum capacity.
// Ref: #/components/schemas/ActivityLevel
type ActivityLevel string

const (
	ActivityLevelWEAK       ActivityLevel = "WEAK"
	ActivityLevelGROWING    ActivityLevel = "GROWING"
	ActivityLevelSTRONG     ActivityLevel = "STRONG"
	ActivityLevelRESTRICTED ActivityLevel = "RESTRICTED"
)

// AllValues returns all ActivityLevel values.
func (ActivityLevel) AllValues() []ActivityLevel {
	return []ActivityLevel{
		ActivityLevelWEAK,
		ActivityLevelGROWING,
		ActivityLevelSTRONG,
		ActivityLevelRESTRICTED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ActivityLevel) MarshalText() ([]byte, error) {
	switch s {
	case ActivityLevelWEAK:
		return []byte(s), nil
	case ActivityLevelGROWING:
		return []byte(s), nil
	case ActivityLevelSTRONG:
		return []byte(s), nil
	case ActivityLevelRESTRICTED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ActivityLevel) UnmarshalText(data []byte) error {
	switch ActivityLevel(data) {
	case ActivityLevelWEAK:
		*s = ActivityLevelWEAK
		return nil
	case ActivityLevelGROWING:
		*s = ActivityLevelGROWING
		return nil
	case ActivityLevelSTRONG:
		*s = ActivityLevelSTRONG
		return nil
	case ActivityLevelRESTRICTED:
		*s = ActivityLevelRESTRICTED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Agent details.
// Ref: #/components/schemas/Agent
type Agent struct {
	// Account ID that is tied to this agent. Only included on your own agent.
	AccountId OptString `json:"accountId"`
	// Symbol of the agent.
	Symbol string `json:"symbol"`
	// The headquarters of the agent.
	Headquarters string `json:"headquarters"`
	// The number of credits the agent has available. Credits can be negative if funds have been
	// overdrawn.
	Credits int64 `json:"credits"`
	// The faction the agent started with.
	StartingFaction string `json:"startingFaction"`
	// How many ships are owned by the agent.
	ShipCount int `json:"shipCount"`
}

// GetAccountId returns the value of AccountId.
func (s *Agent) GetAccountId() OptString {
	return s.AccountId
}

// GetSymbol returns the value of Symbol.
func (s *Agent) GetSymbol() string {
	return s.Symbol
}

// GetHeadquarters returns the value of Headquarters.
func (s *Agent) GetHeadquarters() string {
	return s.Headquarters
}

// GetCredits returns the value of Credits.
func (s *Agent) GetCredits() int64 {
	return s.Credits
}

// GetStartingFaction returns the value of StartingFaction.
func (s *Agent) GetStartingFaction() string {
	return s.StartingFaction
}

// GetShipCount returns the value of ShipCount.
func (s *Agent) GetShipCount() int {
	return s.ShipCount
}

// SetAccountId sets the value of AccountId.
func (s *Agent) SetAccountId(val OptString) {
	s.AccountId = val
}

// SetSymbol sets the value of Symbol.
func (s *Agent) SetSymbol(val string) {
	s.Symbol = val
}

// SetHeadquarters sets the value of Headquarters.
func (s *Agent) SetHeadquarters(val string) {
	s.Headquarters = val
}

// SetCredits sets the value of Credits.
func (s *Agent) SetCredits(val int64) {
	s.Credits = val
}

// SetStartingFaction sets the value of StartingFaction.
func (s *Agent) SetStartingFaction(val string) {
	s.StartingFaction = val
}

// SetShipCount sets the value of ShipCount.
func (s *Agent) SetShipCount(val int) {
	s.ShipCount = val
}

type AgentToken struct {
	Token string
}

// GetToken returns the value of Token.
func (s *AgentToken) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *AgentToken) SetToken(val string) {
	s.Token = val
}

// The chart of a system or waypoint, which makes the location visible to other agents.
// Ref: #/components/schemas/Chart
type Chart struct {
	WaypointSymbol OptWaypointSymbol `json:"waypointSymbol"`
	// The agent that submitted the chart for this waypoint.
	SubmittedBy OptString `json:"submittedBy"`
	// The time the chart for this waypoint was submitted.
	SubmittedOn OptDateTime `json:"submittedOn"`
}

// GetWaypointSymbol returns the value of WaypointSymbol.
func (s *Chart) GetWaypointSymbol() OptWaypointSymbol {
	return s.WaypointSymbol
}

// GetSubmittedBy returns the value of SubmittedBy.
func (s *Chart) GetSubmittedBy() OptString {
	return s.SubmittedBy
}

// GetSubmittedOn returns the value of SubmittedOn.
func (s *Chart) GetSubmittedOn() OptDateTime {
	return s.SubmittedOn
}

// SetWaypointSymbol sets the value of WaypointSymbol.
func (s *Chart) SetWaypointSymbol(val OptWaypointSymbol) {
	s.WaypointSymbol = val
}

// SetSubmittedBy sets the value of SubmittedBy.
func (s *Chart) SetSubmittedBy(val OptString) {
	s.SubmittedBy = val
}

// SetSubmittedOn sets the value of SubmittedOn.
func (s *Chart) SetSubmittedOn(val OptDateTime) {
	s.SubmittedOn = val
}

// The construction details of a waypoint.
// Ref: #/components/schemas/Construction
type Construction struct {
	// The symbol of the waypoint.
	Symbol string `json:"symbol"`
	// The materials required to construct the waypoint.
	Materials []ConstructionMaterial `json:"materials"`
	// Whether the waypoint has been constructed.
	IsComplete bool `json:"isComplete"`
}

// GetSymbol returns the value of Symbol.
func (s *Construction) GetSymbol() string {
	return s.Symbol
}

// GetMaterials returns the value of Materials.
func (s *Construction) GetMaterials() []ConstructionMaterial {
	return s.Materials
}

// GetIsComplete returns the value of IsComplete.
func (s *Construction) GetIsComplete() bool {
	return s.IsComplete
}

// SetSymbol sets the value of Symbol.
func (s *Construction) SetSymbol(val string) {
	s.Symbol = val
}

// SetMaterials sets the value of Materials.
func (s *Construction) SetMaterials(val []ConstructionMaterial) {
	s.Materials = val
}

// SetIsComplete sets the value of IsComplete.
func (s *Construction) SetIsComplete(val bool) {
	s.IsComplete = val
}

// The details of the required construction materials for a given waypoint under construction.
// Ref: #/components/schemas/ConstructionMaterial
type ConstructionMaterial struct {
	TradeSymbol TradeSymbol `json:"tradeSymbol"`
	// The number of units required.
	Required int `json:"required"`
	// The number of units fulfilled toward the required amount.
	Fulfilled int `json:"fulfilled"`
}

// GetTradeSymbol returns the value of TradeSymbol.
func (s *ConstructionMaterial) GetTradeSymbol() TradeSymbol {
	return s.TradeSymbol
}

// GetRequired returns the value of Required.
func (s *ConstructionMaterial) GetRequired() int {
	return s.Required
}

// GetFulfilled returns the value of Fulfilled.
func (s *ConstructionMaterial) GetFulfilled() int {
	return s.Fulfilled
}

// SetTradeSymbol sets the value of TradeSymbol.
func (s *ConstructionMaterial) SetTradeSymbol(val TradeSymbol) {
	s.TradeSymbol = val
}

// SetRequired sets the value of Required.
func (s *ConstructionMaterial) SetRequired(val int) {
	s.Required = val
}

// SetFulfilled sets the value of Fulfilled.
func (s *ConstructionMaterial) SetFulfilled(val int) {
	s.Fulfilled = val
}

// Contract details.
// Ref: #/components/schemas/Contract
type Contract struct {
	// ID of the contract.
	ID string `json:"id"`
	// The symbol of the faction that this contract is for.
	FactionSymbol string `json:"factionSymbol"`
	// Type of contract.
	Type  ContractType  `json:"type"`
	Terms ContractTerms `json:"terms"`
	// Whether the contract has been accepted by the agent.
	Accepted bool `json:"accepted"`
	// Whether the contract has been fulfilled.
	Fulfilled bool `json:"fulfilled"`
	// Deprecated in favor of deadlineToAccept.
	//
	// Deprecated: schema marks this property as deprecated.
	Expiration time.Time `json:"expiration"`
	// The time at which the contract is no longer available to be accepted.
	DeadlineToAccept OptDateTime `json:"deadlineToAccept"`
}

// GetID returns the value of ID.
func (s *Contract) GetID() string {
	return s.ID
}

// GetFactionSymbol returns the value of FactionSymbol.
func (s *Contract) GetFactionSymbol() string {
	return s.FactionSymbol
}

// GetType returns the value of Type.
func (s *Contract) GetType() ContractType {
	return s.Type
}

// GetTerms returns the value of Terms.
func (s *Contract) GetTerms() ContractTerms {
	return s.Terms
}

// GetAccepted returns the value of Accepted.
func (s *Contract) GetAccepted() bool {
	return s.Accepted
}

// GetFulfilled returns the value of Fulfilled.
func (s *Contract) GetFulfilled() bool {
	return s.Fulfilled
}

// GetExpiration returns the value of Expiration.
func (s *Contract) GetExpiration() time.Time {
	return s.Expiration
}

// GetDeadlineToAccept returns the value of DeadlineToAccept.
func (s *Contract) GetDeadlineToAccept() OptDateTime {
	return s.DeadlineToAccept
}

// SetID sets the value of ID.
func (s *Contract) SetID(val string) {
	s.ID = val
}

// SetFactionSymbol sets the value of FactionSymbol.
func (s *Contract) SetFactionSymbol(val string) {
	s.FactionSymbol = val
}

// SetType sets the value of Type.
func (s *Contract) SetType(val ContractType) {
	s.Type = val
}

// SetTerms sets the value of Terms.
func (s *Contract) SetTerms(val ContractTerms) {
	s.Terms = val
}

// SetAccepted sets the value of Accepted.
func (s *Contract) SetAccepted(val bool) {
	s.Accepted = val
}

// SetFulfilled sets the value of Fulfilled.
func (s *Contract) SetFulfilled(val bool) {
	s.Fulfilled = val
}

// SetExpiration sets the value of Expiration.
func (s *Contract) SetExpiration(val time.Time) {
	s.Expiration = val
}

// SetDeadlineToAccept sets the value of DeadlineToAccept.
func (s *Contract) SetDeadlineToAccept(val OptDateTime) {
	s.DeadlineToAccept = val
}

// The details of a delivery contract. Includes the type of good, units needed, and the destination.
// Ref: #/components/schemas/ContractDeliverGood
type ContractDeliverGood struct {
	// The symbol of the trade good to deliver.
	TradeSymbol string `json:"tradeSymbol"`
	// The destination where goods need to be delivered.
	DestinationSymbol string `json:"destinationSymbol"`
	// The number of units that need to be delivered on this contract.
	UnitsRequired int `json:"unitsRequired"`
	// The number of units fulfilled on this contract.
	UnitsFulfilled int `json:"unitsFulfilled"`
}

// GetTradeSymbol returns the value of TradeSymbol.
func (s *ContractDeliverGood) GetTradeSymbol() string {
	return s.TradeSymbol
}

// GetDestinationSymbol returns the value of DestinationSymbol.
func (s *ContractDeliverGood) GetDestinationSymbol() string {
	return s.DestinationSymbol
}

// GetUnitsRequired returns the value of UnitsRequired.
func (s *ContractDeliverGood) GetUnitsRequired() int {
	return s.UnitsRequired
}

// GetUnitsFulfilled returns the value of UnitsFulfilled.
func (s *ContractDeliverGood) GetUnitsFulfilled() int {
	return s.UnitsFulfilled
}

// SetTradeSymbol sets the value of TradeSymbol.
func (s *ContractDeliverGood) SetTradeSymbol(val string) {
	s.TradeSymbol = val
}

// SetDestinationSymbol sets the value of DestinationSymbol.
func (s *ContractDeliverGood) SetDestinationSymbol(val string) {
	s.DestinationSymbol = val
}

// SetUnitsRequired sets the value of UnitsRequired.
func (s *ContractDeliverGood) SetUnitsRequired(val int) {
	s.UnitsRequired = val
}

// SetUnitsFulfilled sets the value of UnitsFulfilled.
func (s *ContractDeliverGood) SetUnitsFulfilled(val int) {
	s.UnitsFulfilled = val
}

// Payments for the contract.
// Ref: #/components/schemas/ContractPayment
type ContractPayment struct {
	// The amount of credits received up front for accepting the contract.
	OnAccepted int `json:"onAccepted"`
	// The amount of credits received when the contract is fulfilled.
	OnFulfilled int `json:"onFulfilled"`
}

// GetOnAccepted returns the value of OnAccepted.
func (s *ContractPayment) GetOnAccepted() int {
	return s.OnAccepted
}

// GetOnFulfilled returns the value of OnFulfilled.
func (s *ContractPayment) GetOnFulfilled() int {
	return s.OnFulfilled
}

// SetOnAccepted sets the value of OnAccepted.
func (s *ContractPayment) SetOnAccepted(val int) {
	s.OnAccepted = val
}

// SetOnFulfilled sets the value of OnFulfilled.
func (s *ContractPayment) SetOnFulfilled(val int) {
	s.OnFulfilled = val
}

// The terms to fulfill the contract.
// Ref: #/components/schemas/ContractTerms
type ContractTerms struct {
	// The deadline for the contract.
	Deadline time.Time       `json:"deadline"`
	Payment  ContractPayment `json:"payment"`
	// The cargo that needs to be delivered to fulfill the contract.
	Deliver []ContractDeliverGood `json:"deliver"`
}

// GetDeadline returns the value of Deadline.
func (s *ContractTerms) GetDeadline() time.Time {
	return s.Deadline
}

// GetPayment returns the value of Payment.
func (s *ContractTerms) GetPayment() ContractPayment {
	return s.Payment
}

// GetDeliver returns the value of Deliver.
func (s *ContractTerms) GetDeliver() []ContractDeliverGood {
	return s.Deliver
}

// SetDeadline sets the value of Deadline.
func (s *ContractTerms) SetDeadline(val time.Time) {
	s.Deadline = val
}

// SetPayment sets the value of Payment.
func (s *ContractTerms) SetPayment(val ContractPayment) {
	s.Payment = val
}

// SetDeliver sets the value of Deliver.
func (s *ContractTerms) SetDeliver(val []ContractDeliverGood) {
	s.Deliver = val
}

// Type of contract.
type ContractType string

const (
	ContractTypePROCUREMENT ContractType = "PROCUREMENT"
	ContractTypeTRANSPORT   ContractType = "TRANSPORT"
	ContractTypeSHUTTLE     ContractType = "SHUTTLE"
)

// AllValues returns all ContractType values.
func (ContractType) AllValues() []ContractType {
	return []ContractType{
		ContractTypePROCUREMENT,
		ContractTypeTRANSPORT,
		ContractTypeSHUTTLE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ContractType) MarshalText() ([]byte, error) {
	switch s {
	case ContractTypePROCUREMENT:
		return []byte(s), nil
	case ContractTypeTRANSPORT:
		return []byte(s), nil
	case ContractTypeSHUTTLE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ContractType) UnmarshalText(data []byte) error {
	switch ContractType(data) {
	case ContractTypePROCUREMENT:
		*s = ContractTypePROCUREMENT
		return nil
	case ContractTypeTRANSPORT:
		*s = ContractTypeTRANSPORT
		return nil
	case ContractTypeSHUTTLE:
		*s = ContractTypeSHUTTLE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A cooldown is a period of time in which a ship cannot perform certain actions.
// Ref: #/components/schemas/Cooldown
type Cooldown struct {
	// The symbol of the ship that is on cooldown.
	ShipSymbol string `json:"shipSymbol"`
	// The total duration of the cooldown in seconds.
	TotalSeconds int `json:"totalSeconds"`
	// The remaining duration of the cooldown in seconds.
	RemainingSeconds int `json:"remainingSeconds"`
	// The date and time when the cooldown expires in ISO 8601 format.
	Expiration OptDateTime `json:"expiration"`
}

// GetShipSymbol returns the value of ShipSymbol.
func (s *Cooldown) GetShipSymbol() string {
	return s.ShipSymbol
}

// GetTotalSeconds returns the value of TotalSeconds.
func (s *Cooldown) GetTotalSeconds() int {
	return s.TotalSeconds
}

// GetRemainingSeconds returns the value of RemainingSeconds.
func (s *Cooldown) GetRemainingSeconds() int {
	return s.RemainingSeconds
}

// GetExpiration returns the value of Expiration.
func (s *Cooldown) GetExpiration() OptDateTime {
	return s.Expiration
}

// SetShipSymbol sets the value of ShipSymbol.
func (s *Cooldown) SetShipSymbol(val string) {
	s.ShipSymbol = val
}

// SetTotalSeconds sets the value of TotalSeconds.
func (s *Cooldown) SetTotalSeconds(val int) {
	s.TotalSeconds = val
}

// SetRemainingSeconds sets the value of RemainingSeconds.
func (s *Cooldown) SetRemainingSeconds(val int) {
	s.RemainingSeconds = val
}

// SetExpiration sets the value of Expiration.
func (s *Cooldown) SetExpiration(val OptDateTime) {
	s.Expiration = val
}

type CreateChartCreated struct {
	Data CreateChartCreatedData `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateChartCreated) GetData() CreateChartCreatedData {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateChartCreated) SetData(val CreateChartCreatedData) {
	s.Data = val
}

type CreateChartCreatedData struct {
	Chart    Chart    `json:"chart"`
	Waypoint Waypoint `json:"waypoint"`
}

// GetChart returns the value of Chart.
func (s *CreateChartCreatedData) GetChart() Chart {
	return s.Chart
}

// GetWaypoint returns the value of Waypoint.
func (s *CreateChartCreatedData) GetWaypoint() Waypoint {
	return s.Waypoint
}

// SetChart sets the value of Chart.
func (s *CreateChartCreatedData) SetChart(val Chart) {
	s.Chart = val
}

// SetWaypoint sets the value of Waypoint.
func (s *CreateChartCreatedData) SetWaypoint(val Waypoint) {
	s.Waypoint = val
}

type CreateShipShipScanCreated struct {
	Data CreateShipShipScanCreatedData `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateShipShipScanCreated) GetData() CreateShipShipScanCreatedData {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateShipShipScanCreated) SetData(val CreateShipShipScanCreatedData) {
	s.Data = val
}

type CreateShipShipScanCreatedData struct {
	Cooldown Cooldown `json:"cooldown"`
	// List of scanned ships.
	Ships []ScannedShip `json:"ships"`
}

// GetCooldown returns the value of Cooldown.
func (s *CreateShipShipScanCreatedData) GetCooldown() Cooldown {
	return s.Cooldown
}

// GetShips returns the value of Ships.
func (s *CreateShipShipScanCreatedData) GetShips() []ScannedShip {
	return s.Ships
}

// SetCooldown sets the value of Cooldown.
func (s *CreateShipShipScanCreatedData) SetCooldown(val Cooldown) {
	s.Cooldown = val
}

// SetShips sets the value of Ships.
func (s *CreateShipShipScanCreatedData) SetShips(val []ScannedShip) {
	s.Ships = val
}

type CreateShipSystemScanCreated struct {
	Data CreateShipSystemScanCreatedData `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateShipSystemScanCreated) GetData() CreateShipSystemScanCreatedData {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateShipSystemScanCreated) SetData(val CreateShipSystemScanCreatedData) {
	s.Data = val
}

type CreateShipSystemScanCreatedData struct {
	Cooldown Cooldown `json:"cooldown"`
	// List of scanned systems.
	Systems []ScannedSystem `json:"systems"`
}

// GetCooldown returns the value of Cooldown.
func (s *CreateShipSystemScanCreatedData) GetCooldown() Cooldown {
	return s.Cooldown
}

// GetSystems returns the value of Systems.
func (s *CreateShipSystemScanCreatedData) GetSystems() []ScannedSystem {
	return s.Systems
}

// SetCooldown sets the value of Cooldown.
func (s *CreateShipSystemScanCreatedData) SetCooldown(val Cooldown) {
	s.Cooldown = val
}

// SetSystems sets the value of Systems.
func (s *CreateShipSystemScanCreatedData) SetSystems(val []ScannedSystem) {
	s.Systems = val
}

type CreateShipWaypointScanCreated struct {
	Data CreateShipWaypointScanCreatedData `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateShipWaypointScanCreated) GetData() CreateShipWaypointScanCreatedData {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateShipWaypointScanCreated) SetData(val CreateShipWaypointScanCreatedData) {
	s.Data = val
}

type CreateShipWaypointScanCreatedData struct {
	Cooldown Cooldown `json:"cooldown"`
	// List of scanned waypoints.
	Waypoints []ScannedWaypoint `json:"waypoints"`
}

// GetCooldown returns the value of Cooldown.
func (s *CreateShipWaypointScanCreatedData) GetCooldown() Cooldown {
	return s.Cooldown
}

// GetWaypoints returns the value of Waypoints.
func (s *CreateShipWaypointScanCreatedData) GetWaypoints() []ScannedWaypoint {
	return s.Waypoints
}

// SetCooldown sets the value of Cooldown.
func (s *CreateShipWaypointScanCreatedData) SetCooldown(val Cooldown) {
	s.Cooldown = val
}

// SetWaypoints sets the value of Waypoints.
func (s *CreateShipWaypointScanCreatedData) SetWaypoints(val []ScannedWaypoint) {
	s.Waypoints = val
}

type CreateSurveyCreated struct {
	Data CreateSurveyCreatedData `json:"data"`
}

// GetData returns the value of Data.
func (s *CreateSurveyCreated) GetData() CreateSurveyCreatedData {
	return s.Data
}

// SetData sets the value of Data.
func (s *CreateSurveyCreated) SetData(val CreateSurveyCreatedData) {
	s.Data = val
}

type CreateSurveyCreatedData struct {
	Cooldown Cooldown `json:"cooldown"`
	// Surveys created by this action.
	Surveys []Survey `json:"surveys"`
}

// GetCooldown returns the value of Cooldown.
func (s *CreateSurveyCreatedData) GetCooldown() Cooldown {
	return s.Cooldown
}

// GetSurveys returns the value of Surveys.
func (s *CreateSurveyCreatedData) GetSurveys() []Survey {
	return s.Surveys
}

// SetCooldown sets the value of Cooldown.
func (s *CreateSurveyCreatedData) SetCooldown(val Cooldown) {
	s.Cooldown = val
}

// SetSurveys sets the value of Surveys.
func (s *CreateSurveyCreatedData) SetSurveys(val []Survey) {
	s.Surveys = val
}

type DeliverContractOK struct {
	Data DeliverContractOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *DeliverContractOK) GetData() DeliverContractOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *DeliverContractOK) SetData(val DeliverContractOKData) {
	s.Data = val
}

type DeliverContractOKData struct {
	Contract Contract  `json:"contract"`
	Cargo    ShipCargo `json:"cargo"`
}

// GetContract returns the value of Contract.
func (s *DeliverContractOKData) GetContract() Contract {
	return s.Contract
}

// GetCargo returns the value of Cargo.
func (s *DeliverContractOKData) GetCargo() ShipCargo {
	return s.Cargo
}

// SetContract sets the value of Contract.
func (s *DeliverContractOKData) SetContract(val Contract) {
	s.Contract = val
}

// SetCargo sets the value of Cargo.
func (s *DeliverContractOKData) SetCargo(val ShipCargo) {
	s.Cargo = val
}

type DeliverContractReq struct {
	// Symbol of a ship located in the destination to deliver a contract and that has a good to deliver
	// in its cargo.
	ShipSymbol string `json:"shipSymbol"`
	// The symbol of the good to deliver.
	TradeSymbol string `json:"tradeSymbol"`
	// Amount of units to deliver.
	Units int `json:"units"`
}

// GetShipSymbol returns the value of ShipSymbol.
func (s *DeliverContractReq) GetShipSymbol() string {
	return s.ShipSymbol
}

// GetTradeSymbol returns the value of TradeSymbol.
func (s *DeliverContractReq) GetTradeSymbol() string {
	return s.TradeSymbol
}

// GetUnits returns the value of Units.
func (s *DeliverContractReq) GetUnits() int {
	return s.Units
}

// SetShipSymbol sets the value of ShipSymbol.
func (s *DeliverContractReq) SetShipSymbol(val string) {
	s.ShipSymbol = val
}

// SetTradeSymbol sets the value of TradeSymbol.
func (s *DeliverContractReq) SetTradeSymbol(val string) {
	s.TradeSymbol = val
}

// SetUnits sets the value of Units.
func (s *DeliverContractReq) SetUnits(val int) {
	s.Units = val
}

type DockShipOK struct {
	Data DockShipOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *DockShipOK) GetData() DockShipOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *DockShipOK) SetData(val DockShipOKData) {
	s.Data = val
}

type DockShipOKData struct {
	Nav ShipNav `json:"nav"`
}

// GetNav returns the value of Nav.
func (s *DockShipOKData) GetNav() ShipNav {
	return s.Nav
}

// SetNav sets the value of Nav.
func (s *DockShipOKData) SetNav(val ShipNav) {
	s.Nav = val
}

type ExtractResourcesCreated struct {
	Data ExtractResourcesCreatedData `json:"data"`
}

// GetData returns the value of Data.
func (s *ExtractResourcesCreated) GetData() ExtractResourcesCreatedData {
	return s.Data
}

// SetData sets the value of Data.
func (s *ExtractResourcesCreated) SetData(val ExtractResourcesCreatedData) {
	s.Data = val
}

type ExtractResourcesCreatedData struct {
	Cooldown   Cooldown                                `json:"cooldown"`
	Extraction Extraction                              `json:"extraction"`
	Cargo      ShipCargo                               `json:"cargo"`
	Events     []ExtractResourcesCreatedDataEventsItem `json:"events"`
}

// GetCooldown returns the value of Cooldown.
func (s *ExtractResourcesCreatedData) GetCooldown() Cooldown {
	return s.Cooldown
}

// GetExtraction returns the value of Extraction.
func (s *ExtractResourcesCreatedData) GetExtraction() Extraction {
	return s.Extraction
}

// GetCargo returns the value of Cargo.
func (s *ExtractResourcesCreatedData) GetCargo() ShipCargo {
	return s.Cargo
}

// GetEvents returns the value of Events.
func (s *ExtractResourcesCreatedData) GetEvents() []ExtractResourcesCreatedDataEventsItem {
	return s.Events
}

// SetCooldown sets the value of Cooldown.
func (s *ExtractResourcesCreatedData) SetCooldown(val Cooldown) {
	s.Cooldown = val
}

// SetExtraction sets the value of Extraction.
func (s *ExtractResourcesCreatedData) SetExtraction(val Extraction) {
	s.Extraction = val
}

// SetCargo sets the value of Cargo.
func (s *ExtractResourcesCreatedData) SetCargo(val ShipCargo) {
	s.Cargo = val
}

// SetEvents sets the value of Events.
func (s *ExtractResourcesCreatedData) SetEvents(val []ExtractResourcesCreatedDataEventsItem) {
	s.Events = val
}

// ExtractResourcesCreatedDataEventsItem represents sum type.
type ExtractResourcesCreatedDataEventsItem struct {
	Type               ExtractResourcesCreatedDataEventsItemType // switch on this field
	ShipConditionEvent ShipConditionEvent
}

// ExtractResourcesCreatedDataEventsItemType is oneOf type of ExtractResourcesCreatedDataEventsItem.
type ExtractResourcesCreatedDataEventsItemType string

// Possible values for ExtractResourcesCreatedDataEventsItemType.
const (
	ShipConditionEventExtractResourcesCreatedDataEventsItem ExtractResourcesCreatedDataEventsItemType = "ShipConditionEvent"
)

// IsShipConditionEvent reports whether ExtractResourcesCreatedDataEventsItem is ShipConditionEvent.
func (s ExtractResourcesCreatedDataEventsItem) IsShipConditionEvent() bool {
	return s.Type == ShipConditionEventExtractResourcesCreatedDataEventsItem
}

// SetShipConditionEvent sets ExtractResourcesCreatedDataEventsItem to ShipConditionEvent.
func (s *ExtractResourcesCreatedDataEventsItem) SetShipConditionEvent(v ShipConditionEvent) {
	s.Type = ShipConditionEventExtractResourcesCreatedDataEventsItem
	s.ShipConditionEvent = v
}

// GetShipConditionEvent returns ShipConditionEvent and true boolean if ExtractResourcesCreatedDataEventsItem is ShipConditionEvent.
func (s ExtractResourcesCreatedDataEventsItem) GetShipConditionEvent() (v ShipConditionEvent, ok bool) {
	if !s.IsShipConditionEvent() {
		return v, false
	}
	return s.ShipConditionEvent, true
}

// NewShipConditionEventExtractResourcesCreatedDataEventsItem returns new ExtractResourcesCreatedDataEventsItem from ShipConditionEvent.
func NewShipConditionEventExtractResourcesCreatedDataEventsItem(v ShipConditionEvent) ExtractResourcesCreatedDataEventsItem {
	var s ExtractResourcesCreatedDataEventsItem
	s.SetShipConditionEvent(v)
	return s
}

type ExtractResourcesReq struct {
	Survey OptSurvey `json:"survey"`
}

// GetSurvey returns the value of Survey.
func (s *ExtractResourcesReq) GetSurvey() OptSurvey {
	return s.Survey
}

// SetSurvey sets the value of Survey.
func (s *ExtractResourcesReq) SetSurvey(val OptSurvey) {
	s.Survey = val
}

type ExtractResourcesWithSurveyCreated struct {
	Data ExtractResourcesWithSurveyCreatedData `json:"data"`
}

// GetData returns the value of Data.
func (s *ExtractResourcesWithSurveyCreated) GetData() ExtractResourcesWithSurveyCreatedData {
	return s.Data
}

// SetData sets the value of Data.
func (s *ExtractResourcesWithSurveyCreated) SetData(val ExtractResourcesWithSurveyCreatedData) {
	s.Data = val
}

type ExtractResourcesWithSurveyCreatedData struct {
	Cooldown   Cooldown                                          `json:"cooldown"`
	Extraction Extraction                                        `json:"extraction"`
	Cargo      ShipCargo                                         `json:"cargo"`
	Events     []ExtractResourcesWithSurveyCreatedDataEventsItem `json:"events"`
}

// GetCooldown returns the value of Cooldown.
func (s *ExtractResourcesWithSurveyCreatedData) GetCooldown() Cooldown {
	return s.Cooldown
}

// GetExtraction returns the value of Extraction.
func (s *ExtractResourcesWithSurveyCreatedData) GetExtraction() Extraction {
	return s.Extraction
}

// GetCargo returns the value of Cargo.
func (s *ExtractResourcesWithSurveyCreatedData) GetCargo() ShipCargo {
	return s.Cargo
}

// GetEvents returns the value of Events.
func (s *ExtractResourcesWithSurveyCreatedData) GetEvents() []ExtractResourcesWithSurveyCreatedDataEventsItem {
	return s.Events
}

// SetCooldown sets the value of Cooldown.
func (s *ExtractResourcesWithSurveyCreatedData) SetCooldown(val Cooldown) {
	s.Cooldown = val
}

// SetExtraction sets the value of Extraction.
func (s *ExtractResourcesWithSurveyCreatedData) SetExtraction(val Extraction) {
	s.Extraction = val
}

// SetCargo sets the value of Cargo.
func (s *ExtractResourcesWithSurveyCreatedData) SetCargo(val ShipCargo) {
	s.Cargo = val
}

// SetEvents sets the value of Events.
func (s *ExtractResourcesWithSurveyCreatedData) SetEvents(val []ExtractResourcesWithSurveyCreatedDataEventsItem) {
	s.Events = val
}

// ExtractResourcesWithSurveyCreatedDataEventsItem represents sum type.
type ExtractResourcesWithSurveyCreatedDataEventsItem struct {
	Type               ExtractResourcesWithSurveyCreatedDataEventsItemType // switch on this field
	ShipConditionEvent ShipConditionEvent
}

// ExtractResourcesWithSurveyCreatedDataEventsItemType is oneOf type of ExtractResourcesWithSurveyCreatedDataEventsItem.
type ExtractResourcesWithSurveyCreatedDataEventsItemType string

// Possible values for ExtractResourcesWithSurveyCreatedDataEventsItemType.
const (
	ShipConditionEventExtractResourcesWithSurveyCreatedDataEventsItem ExtractResourcesWithSurveyCreatedDataEventsItemType = "ShipConditionEvent"
)

// IsShipConditionEvent reports whether ExtractResourcesWithSurveyCreatedDataEventsItem is ShipConditionEvent.
func (s ExtractResourcesWithSurveyCreatedDataEventsItem) IsShipConditionEvent() bool {
	return s.Type == ShipConditionEventExtractResourcesWithSurveyCreatedDataEventsItem
}

// SetShipConditionEvent sets ExtractResourcesWithSurveyCreatedDataEventsItem to ShipConditionEvent.
func (s *ExtractResourcesWithSurveyCreatedDataEventsItem) SetShipConditionEvent(v ShipConditionEvent) {
	s.Type = ShipConditionEventExtractResourcesWithSurveyCreatedDataEventsItem
	s.ShipConditionEvent = v
}

// GetShipConditionEvent returns ShipConditionEvent and true boolean if ExtractResourcesWithSurveyCreatedDataEventsItem is ShipConditionEvent.
func (s ExtractResourcesWithSurveyCreatedDataEventsItem) GetShipConditionEvent() (v ShipConditionEvent, ok bool) {
	if !s.IsShipConditionEvent() {
		return v, false
	}
	return s.ShipConditionEvent, true
}

// NewShipConditionEventExtractResourcesWithSurveyCreatedDataEventsItem returns new ExtractResourcesWithSurveyCreatedDataEventsItem from ShipConditionEvent.
func NewShipConditionEventExtractResourcesWithSurveyCreatedDataEventsItem(v ShipConditionEvent) ExtractResourcesWithSurveyCreatedDataEventsItem {
	var s ExtractResourcesWithSurveyCreatedDataEventsItem
	s.SetShipConditionEvent(v)
	return s
}

// Extraction details.
// Ref: #/components/schemas/Extraction
type Extraction struct {
	// Symbol of the ship that executed the extraction.
	ShipSymbol string          `json:"shipSymbol"`
	Yield      ExtractionYield `json:"yield"`
}

// GetShipSymbol returns the value of ShipSymbol.
func (s *Extraction) GetShipSymbol() string {
	return s.ShipSymbol
}

// GetYield returns the value of Yield.
func (s *Extraction) GetYield() ExtractionYield {
	return s.Yield
}

// SetShipSymbol sets the value of ShipSymbol.
func (s *Extraction) SetShipSymbol(val string) {
	s.ShipSymbol = val
}

// SetYield sets the value of Yield.
func (s *Extraction) SetYield(val ExtractionYield) {
	s.Yield = val
}

// A yield from the extraction operation.
// Ref: #/components/schemas/ExtractionYield
type ExtractionYield struct {
	Symbol TradeSymbol `json:"symbol"`
	// The number of units extracted that were placed into the ship's cargo hold.
	Units int `json:"units"`
}

// GetSymbol returns the value of Symbol.
func (s *ExtractionYield) GetSymbol() TradeSymbol {
	return s.Symbol
}

// GetUnits returns the value of Units.
func (s *ExtractionYield) GetUnits() int {
	return s.Units
}

// SetSymbol sets the value of Symbol.
func (s *ExtractionYield) SetSymbol(val TradeSymbol) {
	s.Symbol = val
}

// SetUnits sets the value of Units.
func (s *ExtractionYield) SetUnits(val int) {
	s.Units = val
}

// Faction details.
// Ref: #/components/schemas/Faction
type Faction struct {
	Symbol FactionSymbol `json:"symbol"`
	// Name of the faction.
	Name string `json:"name"`
	// Description of the faction.
	Description string `json:"description"`
	// The waypoint in which the faction's HQ is located in.
	Headquarters string `json:"headquarters"`
	// List of traits that define this faction.
	Traits []FactionTrait `json:"traits"`
	// Whether or not the faction is currently recruiting new agents.
	IsRecruiting bool `json:"isRecruiting"`
}

// GetSymbol returns the value of Symbol.
func (s *Faction) GetSymbol() FactionSymbol {
	return s.Symbol
}

// GetName returns the value of Name.
func (s *Faction) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Faction) GetDescription() string {
	return s.Description
}

// GetHeadquarters returns the value of Headquarters.
func (s *Faction) GetHeadquarters() string {
	return s.Headquarters
}

// GetTraits returns the value of Traits.
func (s *Faction) GetTraits() []FactionTrait {
	return s.Traits
}

// GetIsRecruiting returns the value of IsRecruiting.
func (s *Faction) GetIsRecruiting() bool {
	return s.IsRecruiting
}

// SetSymbol sets the value of Symbol.
func (s *Faction) SetSymbol(val FactionSymbol) {
	s.Symbol = val
}

// SetName sets the value of Name.
func (s *Faction) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Faction) SetDescription(val string) {
	s.Description = val
}

// SetHeadquarters sets the value of Headquarters.
func (s *Faction) SetHeadquarters(val string) {
	s.Headquarters = val
}

// SetTraits sets the value of Traits.
func (s *Faction) SetTraits(val []FactionTrait) {
	s.Traits = val
}

// SetIsRecruiting sets the value of IsRecruiting.
func (s *Faction) SetIsRecruiting(val bool) {
	s.IsRecruiting = val
}

// The symbol of the faction.
// Ref: #/components/schemas/FactionSymbol
type FactionSymbol string

const (
	FactionSymbolCOSMIC   FactionSymbol = "COSMIC"
	FactionSymbolVOID     FactionSymbol = "VOID"
	FactionSymbolGALACTIC FactionSymbol = "GALACTIC"
	FactionSymbolQUANTUM  FactionSymbol = "QUANTUM"
	FactionSymbolDOMINION FactionSymbol = "DOMINION"
	FactionSymbolASTRO    FactionSymbol = "ASTRO"
	FactionSymbolCORSAIRS FactionSymbol = "CORSAIRS"
	FactionSymbolOBSIDIAN FactionSymbol = "OBSIDIAN"
	FactionSymbolAEGIS    FactionSymbol = "AEGIS"
	FactionSymbolUNITED   FactionSymbol = "UNITED"
	FactionSymbolSOLITARY FactionSymbol = "SOLITARY"
	FactionSymbolCOBALT   FactionSymbol = "COBALT"
	FactionSymbolOMEGA    FactionSymbol = "OMEGA"
	FactionSymbolECHO     FactionSymbol = "ECHO"
	FactionSymbolLORDS    FactionSymbol = "LORDS"
	FactionSymbolCULT     FactionSymbol = "CULT"
	FactionSymbolANCIENTS FactionSymbol = "ANCIENTS"
	FactionSymbolSHADOW   FactionSymbol = "SHADOW"
	FactionSymbolETHEREAL FactionSymbol = "ETHEREAL"
)

// AllValues returns all FactionSymbol values.
func (FactionSymbol) AllValues() []FactionSymbol {
	return []FactionSymbol{
		FactionSymbolCOSMIC,
		FactionSymbolVOID,
		FactionSymbolGALACTIC,
		FactionSymbolQUANTUM,
		FactionSymbolDOMINION,
		FactionSymbolASTRO,
		FactionSymbolCORSAIRS,
		FactionSymbolOBSIDIAN,
		FactionSymbolAEGIS,
		FactionSymbolUNITED,
		FactionSymbolSOLITARY,
		FactionSymbolCOBALT,
		FactionSymbolOMEGA,
		FactionSymbolECHO,
		FactionSymbolLORDS,
		FactionSymbolCULT,
		FactionSymbolANCIENTS,
		FactionSymbolSHADOW,
		FactionSymbolETHEREAL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FactionSymbol) MarshalText() ([]byte, error) {
	switch s {
	case FactionSymbolCOSMIC:
		return []byte(s), nil
	case FactionSymbolVOID:
		return []byte(s), nil
	case FactionSymbolGALACTIC:
		return []byte(s), nil
	case FactionSymbolQUANTUM:
		return []byte(s), nil
	case FactionSymbolDOMINION:
		return []byte(s), nil
	case FactionSymbolASTRO:
		return []byte(s), nil
	case FactionSymbolCORSAIRS:
		return []byte(s), nil
	case FactionSymbolOBSIDIAN:
		return []byte(s), nil
	case FactionSymbolAEGIS:
		return []byte(s), nil
	case FactionSymbolUNITED:
		return []byte(s), nil
	case FactionSymbolSOLITARY:
		return []byte(s), nil
	case FactionSymbolCOBALT:
		return []byte(s), nil
	case FactionSymbolOMEGA:
		return []byte(s), nil
	case FactionSymbolECHO:
		return []byte(s), nil
	case FactionSymbolLORDS:
		return []byte(s), nil
	case FactionSymbolCULT:
		return []byte(s), nil
	case FactionSymbolANCIENTS:
		return []byte(s), nil
	case FactionSymbolSHADOW:
		return []byte(s), nil
	case FactionSymbolETHEREAL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FactionSymbol) UnmarshalText(data []byte) error {
	switch FactionSymbol(data) {
	case FactionSymbolCOSMIC:
		*s = FactionSymbolCOSMIC
		return nil
	case FactionSymbolVOID:
		*s = FactionSymbolVOID
		return nil
	case FactionSymbolGALACTIC:
		*s = FactionSymbolGALACTIC
		return nil
	case FactionSymbolQUANTUM:
		*s = FactionSymbolQUANTUM
		return nil
	case FactionSymbolDOMINION:
		*s = FactionSymbolDOMINION
		return nil
	case FactionSymbolASTRO:
		*s = FactionSymbolASTRO
		return nil
	case FactionSymbolCORSAIRS:
		*s = FactionSymbolCORSAIRS
		return nil
	case FactionSymbolOBSIDIAN:
		*s = FactionSymbolOBSIDIAN
		return nil
	case FactionSymbolAEGIS:
		*s = FactionSymbolAEGIS
		return nil
	case FactionSymbolUNITED:
		*s = FactionSymbolUNITED
		return nil
	case FactionSymbolSOLITARY:
		*s = FactionSymbolSOLITARY
		return nil
	case FactionSymbolCOBALT:
		*s = FactionSymbolCOBALT
		return nil
	case FactionSymbolOMEGA:
		*s = FactionSymbolOMEGA
		return nil
	case FactionSymbolECHO:
		*s = FactionSymbolECHO
		return nil
	case FactionSymbolLORDS:
		*s = FactionSymbolLORDS
		return nil
	case FactionSymbolCULT:
		*s = FactionSymbolCULT
		return nil
	case FactionSymbolANCIENTS:
		*s = FactionSymbolANCIENTS
		return nil
	case FactionSymbolSHADOW:
		*s = FactionSymbolSHADOW
		return nil
	case FactionSymbolETHEREAL:
		*s = FactionSymbolETHEREAL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/FactionTrait
type FactionTrait struct {
	Symbol FactionTraitSymbol `json:"symbol"`
	// The name of the trait.
	Name string `json:"name"`
	// A description of the trait.
	Description string `json:"description"`
}

// GetSymbol returns the value of Symbol.
func (s *FactionTrait) GetSymbol() FactionTraitSymbol {
	return s.Symbol
}

// GetName returns the value of Name.
func (s *FactionTrait) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *FactionTrait) GetDescription() string {
	return s.Description
}

// SetSymbol sets the value of Symbol.
func (s *FactionTrait) SetSymbol(val FactionTraitSymbol) {
	s.Symbol = val
}

// SetName sets the value of Name.
func (s *FactionTrait) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *FactionTrait) SetDescription(val string) {
	s.Description = val
}

// The unique identifier of the trait.
// Ref: #/components/schemas/FactionTraitSymbol
type FactionTraitSymbol string

const (
	FactionTraitSymbolBUREAUCRATIC            FactionTraitSymbol = "BUREAUCRATIC"
	FactionTraitSymbolSECRETIVE               FactionTraitSymbol = "SECRETIVE"
	FactionTraitSymbolCAPITALISTIC            FactionTraitSymbol = "CAPITALISTIC"
	FactionTraitSymbolINDUSTRIOUS             FactionTraitSymbol = "INDUSTRIOUS"
	FactionTraitSymbolPEACEFUL                FactionTraitSymbol = "PEACEFUL"
	FactionTraitSymbolDISTRUSTFUL             FactionTraitSymbol = "DISTRUSTFUL"
	FactionTraitSymbolWELCOMING               FactionTraitSymbol = "WELCOMING"
	FactionTraitSymbolSMUGGLERS               FactionTraitSymbol = "SMUGGLERS"
	FactionTraitSymbolSCAVENGERS              FactionTraitSymbol = "SCAVENGERS"
	FactionTraitSymbolREBELLIOUS              FactionTraitSymbol = "REBELLIOUS"
	FactionTraitSymbolEXILES                  FactionTraitSymbol = "EXILES"
	FactionTraitSymbolPIRATES                 FactionTraitSymbol = "PIRATES"
	FactionTraitSymbolRAIDERS                 FactionTraitSymbol = "RAIDERS"
	FactionTraitSymbolCLAN                    FactionTraitSymbol = "CLAN"
	FactionTraitSymbolGUILD                   FactionTraitSymbol = "GUILD"
	FactionTraitSymbolDOMINION                FactionTraitSymbol = "DOMINION"
	FactionTraitSymbolFRINGE                  FactionTraitSymbol = "FRINGE"
	FactionTraitSymbolFORSAKEN                FactionTraitSymbol = "FORSAKEN"
	FactionTraitSymbolISOLATED                FactionTraitSymbol = "ISOLATED"
	FactionTraitSymbolLOCALIZED               FactionTraitSymbol = "LOCALIZED"
	FactionTraitSymbolESTABLISHED             FactionTraitSymbol = "ESTABLISHED"
	FactionTraitSymbolNOTABLE                 FactionTraitSymbol = "NOTABLE"
	FactionTraitSymbolDOMINANT                FactionTraitSymbol = "DOMINANT"
	FactionTraitSymbolINESCAPABLE             FactionTraitSymbol = "INESCAPABLE"
	FactionTraitSymbolINNOVATIVE              FactionTraitSymbol = "INNOVATIVE"
	FactionTraitSymbolBOLD                    FactionTraitSymbol = "BOLD"
	FactionTraitSymbolVISIONARY               FactionTraitSymbol = "VISIONARY"
	FactionTraitSymbolCURIOUS                 FactionTraitSymbol = "CURIOUS"
	FactionTraitSymbolDARING                  FactionTraitSymbol = "DARING"
	FactionTraitSymbolEXPLORATORY             FactionTraitSymbol = "EXPLORATORY"
	FactionTraitSymbolRESOURCEFUL             FactionTraitSymbol = "RESOURCEFUL"
	FactionTraitSymbolFLEXIBLE                FactionTraitSymbol = "FLEXIBLE"
	FactionTraitSymbolCOOPERATIVE             FactionTraitSymbol = "COOPERATIVE"
	FactionTraitSymbolUNITED                  FactionTraitSymbol = "UNITED"
	FactionTraitSymbolSTRATEGIC               FactionTraitSymbol = "STRATEGIC"
	FactionTraitSymbolINTELLIGENT             FactionTraitSymbol = "INTELLIGENT"
	FactionTraitSymbolRESEARCHFOCUSED         FactionTraitSymbol = "RESEARCH_FOCUSED"
	FactionTraitSymbolCOLLABORATIVE           FactionTraitSymbol = "COLLABORATIVE"
	FactionTraitSymbolPROGRESSIVE             FactionTraitSymbol = "PROGRESSIVE"
	FactionTraitSymbolMILITARISTIC            FactionTraitSymbol = "MILITARISTIC"
	FactionTraitSymbolTECHNOLOGICALLYADVANCED FactionTraitSymbol = "TECHNOLOGICALLY_ADVANCED"
	FactionTraitSymbolAGGRESSIVE              FactionTraitSymbol = "AGGRESSIVE"
	FactionTraitSymbolIMPERIALISTIC           FactionTraitSymbol = "IMPERIALISTIC"
	FactionTraitSymbolTREASUREHUNTERS         FactionTraitSymbol = "TREASURE_HUNTERS"
	FactionTraitSymbolDEXTEROUS               FactionTraitSymbol = "DEXTEROUS"
	FactionTraitSymbolUNPREDICTABLE           FactionTraitSymbol = "UNPREDICTABLE"
	FactionTraitSymbolBRUTAL                  FactionTraitSymbol = "BRUTAL"
	FactionTraitSymbolFLEETING                FactionTraitSymbol = "FLEETING"
	FactionTraitSymbolADAPTABLE               FactionTraitSymbol = "ADAPTABLE"
	FactionTraitSymbolSELFSUFFICIENT          FactionTraitSymbol = "SELF_SUFFICIENT"
	FactionTraitSymbolDEFENSIVE               FactionTraitSymbol = "DEFENSIVE"
	FactionTraitSymbolPROUD                   FactionTraitSymbol = "PROUD"
	FactionTraitSymbolDIVERSE                 FactionTraitSymbol = "DIVERSE"
	FactionTraitSymbolINDEPENDENT             FactionTraitSymbol = "INDEPENDENT"
	FactionTraitSymbolSELFINTERESTED          FactionTraitSymbol = "SELF_INTERESTED"
	FactionTraitSymbolFRAGMENTED              FactionTraitSymbol = "FRAGMENTED"
	FactionTraitSymbolCOMMERCIAL              FactionTraitSymbol = "COMMERCIAL"
	FactionTraitSymbolFREEMARKETS             FactionTraitSymbol = "FREE_MARKETS"
	FactionTraitSymbolENTREPRENEURIAL         FactionTraitSymbol = "ENTREPRENEURIAL"
)

// AllValues returns all FactionTraitSymbol values.
func (FactionTraitSymbol) AllValues() []FactionTraitSymbol {
	return []FactionTraitSymbol{
		FactionTraitSymbolBUREAUCRATIC,
		FactionTraitSymbolSECRETIVE,
		FactionTraitSymbolCAPITALISTIC,
		FactionTraitSymbolINDUSTRIOUS,
		FactionTraitSymbolPEACEFUL,
		FactionTraitSymbolDISTRUSTFUL,
		FactionTraitSymbolWELCOMING,
		FactionTraitSymbolSMUGGLERS,
		FactionTraitSymbolSCAVENGERS,
		FactionTraitSymbolREBELLIOUS,
		FactionTraitSymbolEXILES,
		FactionTraitSymbolPIRATES,
		FactionTraitSymbolRAIDERS,
		FactionTraitSymbolCLAN,
		FactionTraitSymbolGUILD,
		FactionTraitSymbolDOMINION,
		FactionTraitSymbolFRINGE,
		FactionTraitSymbolFORSAKEN,
		FactionTraitSymbolISOLATED,
		FactionTraitSymbolLOCALIZED,
		FactionTraitSymbolESTABLISHED,
		FactionTraitSymbolNOTABLE,
		FactionTraitSymbolDOMINANT,
		FactionTraitSymbolINESCAPABLE,
		FactionTraitSymbolINNOVATIVE,
		FactionTraitSymbolBOLD,
		FactionTraitSymbolVISIONARY,
		FactionTraitSymbolCURIOUS,
		FactionTraitSymbolDARING,
		FactionTraitSymbolEXPLORATORY,
		FactionTraitSymbolRESOURCEFUL,
		FactionTraitSymbolFLEXIBLE,
		FactionTraitSymbolCOOPERATIVE,
		FactionTraitSymbolUNITED,
		FactionTraitSymbolSTRATEGIC,
		FactionTraitSymbolINTELLIGENT,
		FactionTraitSymbolRESEARCHFOCUSED,
		FactionTraitSymbolCOLLABORATIVE,
		FactionTraitSymbolPROGRESSIVE,
		FactionTraitSymbolMILITARISTIC,
		FactionTraitSymbolTECHNOLOGICALLYADVANCED,
		FactionTraitSymbolAGGRESSIVE,
		FactionTraitSymbolIMPERIALISTIC,
		FactionTraitSymbolTREASUREHUNTERS,
		FactionTraitSymbolDEXTEROUS,
		FactionTraitSymbolUNPREDICTABLE,
		FactionTraitSymbolBRUTAL,
		FactionTraitSymbolFLEETING,
		FactionTraitSymbolADAPTABLE,
		FactionTraitSymbolSELFSUFFICIENT,
		FactionTraitSymbolDEFENSIVE,
		FactionTraitSymbolPROUD,
		FactionTraitSymbolDIVERSE,
		FactionTraitSymbolINDEPENDENT,
		FactionTraitSymbolSELFINTERESTED,
		FactionTraitSymbolFRAGMENTED,
		FactionTraitSymbolCOMMERCIAL,
		FactionTraitSymbolFREEMARKETS,
		FactionTraitSymbolENTREPRENEURIAL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FactionTraitSymbol) MarshalText() ([]byte, error) {
	switch s {
	case FactionTraitSymbolBUREAUCRATIC:
		return []byte(s), nil
	case FactionTraitSymbolSECRETIVE:
		return []byte(s), nil
	case FactionTraitSymbolCAPITALISTIC:
		return []byte(s), nil
	case FactionTraitSymbolINDUSTRIOUS:
		return []byte(s), nil
	case FactionTraitSymbolPEACEFUL:
		return []byte(s), nil
	case FactionTraitSymbolDISTRUSTFUL:
		return []byte(s), nil
	case FactionTraitSymbolWELCOMING:
		return []byte(s), nil
	case FactionTraitSymbolSMUGGLERS:
		return []byte(s), nil
	case FactionTraitSymbolSCAVENGERS:
		return []byte(s), nil
	case FactionTraitSymbolREBELLIOUS:
		return []byte(s), nil
	case FactionTraitSymbolEXILES:
		return []byte(s), nil
	case FactionTraitSymbolPIRATES:
		return []byte(s), nil
	case FactionTraitSymbolRAIDERS:
		return []byte(s), nil
	case FactionTraitSymbolCLAN:
		return []byte(s), nil
	case FactionTraitSymbolGUILD:
		return []byte(s), nil
	case FactionTraitSymbolDOMINION:
		return []byte(s), nil
	case FactionTraitSymbolFRINGE:
		return []byte(s), nil
	case FactionTraitSymbolFORSAKEN:
		return []byte(s), nil
	case FactionTraitSymbolISOLATED:
		return []byte(s), nil
	case FactionTraitSymbolLOCALIZED:
		return []byte(s), nil
	case FactionTraitSymbolESTABLISHED:
		return []byte(s), nil
	case FactionTraitSymbolNOTABLE:
		return []byte(s), nil
	case FactionTraitSymbolDOMINANT:
		return []byte(s), nil
	case FactionTraitSymbolINESCAPABLE:
		return []byte(s), nil
	case FactionTraitSymbolINNOVATIVE:
		return []byte(s), nil
	case FactionTraitSymbolBOLD:
		return []byte(s), nil
	case FactionTraitSymbolVISIONARY:
		return []byte(s), nil
	case FactionTraitSymbolCURIOUS:
		return []byte(s), nil
	case FactionTraitSymbolDARING:
		return []byte(s), nil
	case FactionTraitSymbolEXPLORATORY:
		return []byte(s), nil
	case FactionTraitSymbolRESOURCEFUL:
		return []byte(s), nil
	case FactionTraitSymbolFLEXIBLE:
		return []byte(s), nil
	case FactionTraitSymbolCOOPERATIVE:
		return []byte(s), nil
	case FactionTraitSymbolUNITED:
		return []byte(s), nil
	case FactionTraitSymbolSTRATEGIC:
		return []byte(s), nil
	case FactionTraitSymbolINTELLIGENT:
		return []byte(s), nil
	case FactionTraitSymbolRESEARCHFOCUSED:
		return []byte(s), nil
	case FactionTraitSymbolCOLLABORATIVE:
		return []byte(s), nil
	case FactionTraitSymbolPROGRESSIVE:
		return []byte(s), nil
	case FactionTraitSymbolMILITARISTIC:
		return []byte(s), nil
	case FactionTraitSymbolTECHNOLOGICALLYADVANCED:
		return []byte(s), nil
	case FactionTraitSymbolAGGRESSIVE:
		return []byte(s), nil
	case FactionTraitSymbolIMPERIALISTIC:
		return []byte(s), nil
	case FactionTraitSymbolTREASUREHUNTERS:
		return []byte(s), nil
	case FactionTraitSymbolDEXTEROUS:
		return []byte(s), nil
	case FactionTraitSymbolUNPREDICTABLE:
		return []byte(s), nil
	case FactionTraitSymbolBRUTAL:
		return []byte(s), nil
	case FactionTraitSymbolFLEETING:
		return []byte(s), nil
	case FactionTraitSymbolADAPTABLE:
		return []byte(s), nil
	case FactionTraitSymbolSELFSUFFICIENT:
		return []byte(s), nil
	case FactionTraitSymbolDEFENSIVE:
		return []byte(s), nil
	case FactionTraitSymbolPROUD:
		return []byte(s), nil
	case FactionTraitSymbolDIVERSE:
		return []byte(s), nil
	case FactionTraitSymbolINDEPENDENT:
		return []byte(s), nil
	case FactionTraitSymbolSELFINTERESTED:
		return []byte(s), nil
	case FactionTraitSymbolFRAGMENTED:
		return []byte(s), nil
	case FactionTraitSymbolCOMMERCIAL:
		return []byte(s), nil
	case FactionTraitSymbolFREEMARKETS:
		return []byte(s), nil
	case FactionTraitSymbolENTREPRENEURIAL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FactionTraitSymbol) UnmarshalText(data []byte) error {
	switch FactionTraitSymbol(data) {
	case FactionTraitSymbolBUREAUCRATIC:
		*s = FactionTraitSymbolBUREAUCRATIC
		return nil
	case FactionTraitSymbolSECRETIVE:
		*s = FactionTraitSymbolSECRETIVE
		return nil
	case FactionTraitSymbolCAPITALISTIC:
		*s = FactionTraitSymbolCAPITALISTIC
		return nil
	case FactionTraitSymbolINDUSTRIOUS:
		*s = FactionTraitSymbolINDUSTRIOUS
		return nil
	case FactionTraitSymbolPEACEFUL:
		*s = FactionTraitSymbolPEACEFUL
		return nil
	case FactionTraitSymbolDISTRUSTFUL:
		*s = FactionTraitSymbolDISTRUSTFUL
		return nil
	case FactionTraitSymbolWELCOMING:
		*s = FactionTraitSymbolWELCOMING
		return nil
	case FactionTraitSymbolSMUGGLERS:
		*s = FactionTraitSymbolSMUGGLERS
		return nil
	case FactionTraitSymbolSCAVENGERS:
		*s = FactionTraitSymbolSCAVENGERS
		return nil
	case FactionTraitSymbolREBELLIOUS:
		*s = FactionTraitSymbolREBELLIOUS
		return nil
	case FactionTraitSymbolEXILES:
		*s = FactionTraitSymbolEXILES
		return nil
	case FactionTraitSymbolPIRATES:
		*s = FactionTraitSymbolPIRATES
		return nil
	case FactionTraitSymbolRAIDERS:
		*s = FactionTraitSymbolRAIDERS
		return nil
	case FactionTraitSymbolCLAN:
		*s = FactionTraitSymbolCLAN
		return nil
	case FactionTraitSymbolGUILD:
		*s = FactionTraitSymbolGUILD
		return nil
	case FactionTraitSymbolDOMINION:
		*s = FactionTraitSymbolDOMINION
		return nil
	case FactionTraitSymbolFRINGE:
		*s = FactionTraitSymbolFRINGE
		return nil
	case FactionTraitSymbolFORSAKEN:
		*s = FactionTraitSymbolFORSAKEN
		return nil
	case FactionTraitSymbolISOLATED:
		*s = FactionTraitSymbolISOLATED
		return nil
	case FactionTraitSymbolLOCALIZED:
		*s = FactionTraitSymbolLOCALIZED
		return nil
	case FactionTraitSymbolESTABLISHED:
		*s = FactionTraitSymbolESTABLISHED
		return nil
	case FactionTraitSymbolNOTABLE:
		*s = FactionTraitSymbolNOTABLE
		return nil
	case FactionTraitSymbolDOMINANT:
		*s = FactionTraitSymbolDOMINANT
		return nil
	case FactionTraitSymbolINESCAPABLE:
		*s = FactionTraitSymbolINESCAPABLE
		return nil
	case FactionTraitSymbolINNOVATIVE:
		*s = FactionTraitSymbolINNOVATIVE
		return nil
	case FactionTraitSymbolBOLD:
		*s = FactionTraitSymbolBOLD
		return nil
	case FactionTraitSymbolVISIONARY:
		*s = FactionTraitSymbolVISIONARY
		return nil
	case FactionTraitSymbolCURIOUS:
		*s = FactionTraitSymbolCURIOUS
		return nil
	case FactionTraitSymbolDARING:
		*s = FactionTraitSymbolDARING
		return nil
	case FactionTraitSymbolEXPLORATORY:
		*s = FactionTraitSymbolEXPLORATORY
		return nil
	case FactionTraitSymbolRESOURCEFUL:
		*s = FactionTraitSymbolRESOURCEFUL
		return nil
	case FactionTraitSymbolFLEXIBLE:
		*s = FactionTraitSymbolFLEXIBLE
		return nil
	case FactionTraitSymbolCOOPERATIVE:
		*s = FactionTraitSymbolCOOPERATIVE
		return nil
	case FactionTraitSymbolUNITED:
		*s = FactionTraitSymbolUNITED
		return nil
	case FactionTraitSymbolSTRATEGIC:
		*s = FactionTraitSymbolSTRATEGIC
		return nil
	case FactionTraitSymbolINTELLIGENT:
		*s = FactionTraitSymbolINTELLIGENT
		return nil
	case FactionTraitSymbolRESEARCHFOCUSED:
		*s = FactionTraitSymbolRESEARCHFOCUSED
		return nil
	case FactionTraitSymbolCOLLABORATIVE:
		*s = FactionTraitSymbolCOLLABORATIVE
		return nil
	case FactionTraitSymbolPROGRESSIVE:
		*s = FactionTraitSymbolPROGRESSIVE
		return nil
	case FactionTraitSymbolMILITARISTIC:
		*s = FactionTraitSymbolMILITARISTIC
		return nil
	case FactionTraitSymbolTECHNOLOGICALLYADVANCED:
		*s = FactionTraitSymbolTECHNOLOGICALLYADVANCED
		return nil
	case FactionTraitSymbolAGGRESSIVE:
		*s = FactionTraitSymbolAGGRESSIVE
		return nil
	case FactionTraitSymbolIMPERIALISTIC:
		*s = FactionTraitSymbolIMPERIALISTIC
		return nil
	case FactionTraitSymbolTREASUREHUNTERS:
		*s = FactionTraitSymbolTREASUREHUNTERS
		return nil
	case FactionTraitSymbolDEXTEROUS:
		*s = FactionTraitSymbolDEXTEROUS
		return nil
	case FactionTraitSymbolUNPREDICTABLE:
		*s = FactionTraitSymbolUNPREDICTABLE
		return nil
	case FactionTraitSymbolBRUTAL:
		*s = FactionTraitSymbolBRUTAL
		return nil
	case FactionTraitSymbolFLEETING:
		*s = FactionTraitSymbolFLEETING
		return nil
	case FactionTraitSymbolADAPTABLE:
		*s = FactionTraitSymbolADAPTABLE
		return nil
	case FactionTraitSymbolSELFSUFFICIENT:
		*s = FactionTraitSymbolSELFSUFFICIENT
		return nil
	case FactionTraitSymbolDEFENSIVE:
		*s = FactionTraitSymbolDEFENSIVE
		return nil
	case FactionTraitSymbolPROUD:
		*s = FactionTraitSymbolPROUD
		return nil
	case FactionTraitSymbolDIVERSE:
		*s = FactionTraitSymbolDIVERSE
		return nil
	case FactionTraitSymbolINDEPENDENT:
		*s = FactionTraitSymbolINDEPENDENT
		return nil
	case FactionTraitSymbolSELFINTERESTED:
		*s = FactionTraitSymbolSELFINTERESTED
		return nil
	case FactionTraitSymbolFRAGMENTED:
		*s = FactionTraitSymbolFRAGMENTED
		return nil
	case FactionTraitSymbolCOMMERCIAL:
		*s = FactionTraitSymbolCOMMERCIAL
		return nil
	case FactionTraitSymbolFREEMARKETS:
		*s = FactionTraitSymbolFREEMARKETS
		return nil
	case FactionTraitSymbolENTREPRENEURIAL:
		*s = FactionTraitSymbolENTREPRENEURIAL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type FulfillContractOK struct {
	Data FulfillContractOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *FulfillContractOK) GetData() FulfillContractOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *FulfillContractOK) SetData(val FulfillContractOKData) {
	s.Data = val
}

type FulfillContractOKData struct {
	Agent    Agent    `json:"agent"`
	Contract Contract `json:"contract"`
}

// GetAgent returns the value of Agent.
func (s *FulfillContractOKData) GetAgent() Agent {
	return s.Agent
}

// GetContract returns the value of Contract.
func (s *FulfillContractOKData) GetContract() Contract {
	return s.Contract
}

// SetAgent sets the value of Agent.
func (s *FulfillContractOKData) SetAgent(val Agent) {
	s.Agent = val
}

// SetContract sets the value of Contract.
func (s *FulfillContractOKData) SetContract(val Contract) {
	s.Contract = val
}

type GetAgentOK struct {
	Data Agent `json:"data"`
}

// GetData returns the value of Data.
func (s *GetAgentOK) GetData() Agent {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetAgentOK) SetData(val Agent) {
	s.Data = val
}

type GetAgentsOK struct {
	Data []Agent `json:"data"`
	Meta Meta    `json:"meta"`
}

// GetData returns the value of Data.
func (s *GetAgentsOK) GetData() []Agent {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *GetAgentsOK) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *GetAgentsOK) SetData(val []Agent) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *GetAgentsOK) SetMeta(val Meta) {
	s.Meta = val
}

type GetConstructionOK struct {
	Data Construction `json:"data"`
}

// GetData returns the value of Data.
func (s *GetConstructionOK) GetData() Construction {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetConstructionOK) SetData(val Construction) {
	s.Data = val
}

type GetContractOK struct {
	Data Contract `json:"data"`
}

// GetData returns the value of Data.
func (s *GetContractOK) GetData() Contract {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetContractOK) SetData(val Contract) {
	s.Data = val
}

type GetContractsOK struct {
	Data []Contract `json:"data"`
	Meta Meta       `json:"meta"`
}

// GetData returns the value of Data.
func (s *GetContractsOK) GetData() []Contract {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *GetContractsOK) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *GetContractsOK) SetData(val []Contract) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *GetContractsOK) SetMeta(val Meta) {
	s.Meta = val
}

type GetFactionOK struct {
	Data Faction `json:"data"`
}

// GetData returns the value of Data.
func (s *GetFactionOK) GetData() Faction {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetFactionOK) SetData(val Faction) {
	s.Data = val
}

type GetFactionsOK struct {
	Data []Faction `json:"data"`
	Meta Meta      `json:"meta"`
}

// GetData returns the value of Data.
func (s *GetFactionsOK) GetData() []Faction {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *GetFactionsOK) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *GetFactionsOK) SetData(val []Faction) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *GetFactionsOK) SetMeta(val Meta) {
	s.Meta = val
}

type GetJumpGateOK struct {
	Data JumpGate `json:"data"`
}

// GetData returns the value of Data.
func (s *GetJumpGateOK) GetData() JumpGate {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetJumpGateOK) SetData(val JumpGate) {
	s.Data = val
}

type GetMarketOK struct {
	Data Market `json:"data"`
}

// GetData returns the value of Data.
func (s *GetMarketOK) GetData() Market {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetMarketOK) SetData(val Market) {
	s.Data = val
}

type GetMountsOK struct {
	Data []ShipMount `json:"data"`
}

// GetData returns the value of Data.
func (s *GetMountsOK) GetData() []ShipMount {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetMountsOK) SetData(val []ShipMount) {
	s.Data = val
}

type GetMyAgentOK struct {
	Data Agent `json:"data"`
}

// GetData returns the value of Data.
func (s *GetMyAgentOK) GetData() Agent {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetMyAgentOK) SetData(val Agent) {
	s.Data = val
}

type GetMyShipCargoOK struct {
	Data ShipCargo `json:"data"`
}

// GetData returns the value of Data.
func (s *GetMyShipCargoOK) GetData() ShipCargo {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetMyShipCargoOK) SetData(val ShipCargo) {
	s.Data = val
}

type GetMyShipOK struct {
	Data Ship `json:"data"`
}

// GetData returns the value of Data.
func (s *GetMyShipOK) GetData() Ship {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetMyShipOK) SetData(val Ship) {
	s.Data = val
}

type GetMyShipsOK struct {
	Data []Ship `json:"data"`
	Meta Meta   `json:"meta"`
}

// GetData returns the value of Data.
func (s *GetMyShipsOK) GetData() []Ship {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *GetMyShipsOK) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *GetMyShipsOK) SetData(val []Ship) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *GetMyShipsOK) SetMeta(val Meta) {
	s.Meta = val
}

type GetRepairShipOK struct {
	Data GetRepairShipOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetRepairShipOK) GetData() GetRepairShipOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetRepairShipOK) SetData(val GetRepairShipOKData) {
	s.Data = val
}

type GetRepairShipOKData struct {
	Transaction RepairTransaction `json:"transaction"`
}

// GetTransaction returns the value of Transaction.
func (s *GetRepairShipOKData) GetTransaction() RepairTransaction {
	return s.Transaction
}

// SetTransaction sets the value of Transaction.
func (s *GetRepairShipOKData) SetTransaction(val RepairTransaction) {
	s.Transaction = val
}

type GetScrapShipOK struct {
	Data GetScrapShipOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *GetScrapShipOK) GetData() GetScrapShipOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetScrapShipOK) SetData(val GetScrapShipOKData) {
	s.Data = val
}

type GetScrapShipOKData struct {
	Transaction ScrapTransaction `json:"transaction"`
}

// GetTransaction returns the value of Transaction.
func (s *GetScrapShipOKData) GetTransaction() ScrapTransaction {
	return s.Transaction
}

// SetTransaction sets the value of Transaction.
func (s *GetScrapShipOKData) SetTransaction(val ScrapTransaction) {
	s.Transaction = val
}

// GetShipCooldownNoContent is response for GetShipCooldown operation.
type GetShipCooldownNoContent struct{}

func (*GetShipCooldownNoContent) getShipCooldownRes() {}

type GetShipCooldownOK struct {
	Data Cooldown `json:"data"`
}

// GetData returns the value of Data.
func (s *GetShipCooldownOK) GetData() Cooldown {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetShipCooldownOK) SetData(val Cooldown) {
	s.Data = val
}

func (*GetShipCooldownOK) getShipCooldownRes() {}

type GetShipNavOK struct {
	Data ShipNav `json:"data"`
}

// GetData returns the value of Data.
func (s *GetShipNavOK) GetData() ShipNav {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetShipNavOK) SetData(val ShipNav) {
	s.Data = val
}

type GetShipyardOK struct {
	Data Shipyard `json:"data"`
}

// GetData returns the value of Data.
func (s *GetShipyardOK) GetData() Shipyard {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetShipyardOK) SetData(val Shipyard) {
	s.Data = val
}

type GetStatusOK struct {
	// The current status of the game server.
	Status string `json:"status"`
	// The current version of the API.
	Version string `json:"version"`
	// The date when the game server was last reset.
	ResetDate     string                         `json:"resetDate"`
	Description   string                         `json:"description"`
	Stats         GetStatusOKStats               `json:"stats"`
	Leaderboards  GetStatusOKLeaderboards        `json:"leaderboards"`
	ServerResets  GetStatusOKServerResets        `json:"serverResets"`
	Announcements []GetStatusOKAnnouncementsItem `json:"announcements"`
	Links         []GetStatusOKLinksItem         `json:"links"`
}

// GetStatus returns the value of Status.
func (s *GetStatusOK) GetStatus() string {
	return s.Status
}

// GetVersion returns the value of Version.
func (s *GetStatusOK) GetVersion() string {
	return s.Version
}

// GetResetDate returns the value of ResetDate.
func (s *GetStatusOK) GetResetDate() string {
	return s.ResetDate
}

// GetDescription returns the value of Description.
func (s *GetStatusOK) GetDescription() string {
	return s.Description
}

// GetStats returns the value of Stats.
func (s *GetStatusOK) GetStats() GetStatusOKStats {
	return s.Stats
}

// GetLeaderboards returns the value of Leaderboards.
func (s *GetStatusOK) GetLeaderboards() GetStatusOKLeaderboards {
	return s.Leaderboards
}

// GetServerResets returns the value of ServerResets.
func (s *GetStatusOK) GetServerResets() GetStatusOKServerResets {
	return s.ServerResets
}

// GetAnnouncements returns the value of Announcements.
func (s *GetStatusOK) GetAnnouncements() []GetStatusOKAnnouncementsItem {
	return s.Announcements
}

// GetLinks returns the value of Links.
func (s *GetStatusOK) GetLinks() []GetStatusOKLinksItem {
	return s.Links
}

// SetStatus sets the value of Status.
func (s *GetStatusOK) SetStatus(val string) {
	s.Status = val
}

// SetVersion sets the value of Version.
func (s *GetStatusOK) SetVersion(val string) {
	s.Version = val
}

// SetResetDate sets the value of ResetDate.
func (s *GetStatusOK) SetResetDate(val string) {
	s.ResetDate = val
}

// SetDescription sets the value of Description.
func (s *GetStatusOK) SetDescription(val string) {
	s.Description = val
}

// SetStats sets the value of Stats.
func (s *GetStatusOK) SetStats(val GetStatusOKStats) {
	s.Stats = val
}

// SetLeaderboards sets the value of Leaderboards.
func (s *GetStatusOK) SetLeaderboards(val GetStatusOKLeaderboards) {
	s.Leaderboards = val
}

// SetServerResets sets the value of ServerResets.
func (s *GetStatusOK) SetServerResets(val GetStatusOKServerResets) {
	s.ServerResets = val
}

// SetAnnouncements sets the value of Announcements.
func (s *GetStatusOK) SetAnnouncements(val []GetStatusOKAnnouncementsItem) {
	s.Announcements = val
}

// SetLinks sets the value of Links.
func (s *GetStatusOK) SetLinks(val []GetStatusOKLinksItem) {
	s.Links = val
}

type GetStatusOKAnnouncementsItem struct {
	Title string `json:"title"`
	Body  string `json:"body"`
}

// GetTitle returns the value of Title.
func (s *GetStatusOKAnnouncementsItem) GetTitle() string {
	return s.Title
}

// GetBody returns the value of Body.
func (s *GetStatusOKAnnouncementsItem) GetBody() string {
	return s.Body
}

// SetTitle sets the value of Title.
func (s *GetStatusOKAnnouncementsItem) SetTitle(val string) {
	s.Title = val
}

// SetBody sets the value of Body.
func (s *GetStatusOKAnnouncementsItem) SetBody(val string) {
	s.Body = val
}

type GetStatusOKLeaderboards struct {
	// Top agents with the most credits.
	MostCredits []GetStatusOKLeaderboardsMostCreditsItem `json:"mostCredits"`
	// Top agents with the most charted submitted.
	MostSubmittedCharts []GetStatusOKLeaderboardsMostSubmittedChartsItem `json:"mostSubmittedCharts"`
}

// GetMostCredits returns the value of MostCredits.
func (s *GetStatusOKLeaderboards) GetMostCredits() []GetStatusOKLeaderboardsMostCreditsItem {
	return s.MostCredits
}

// GetMostSubmittedCharts returns the value of MostSubmittedCharts.
func (s *GetStatusOKLeaderboards) GetMostSubmittedCharts() []GetStatusOKLeaderboardsMostSubmittedChartsItem {
	return s.MostSubmittedCharts
}

// SetMostCredits sets the value of MostCredits.
func (s *GetStatusOKLeaderboards) SetMostCredits(val []GetStatusOKLeaderboardsMostCreditsItem) {
	s.MostCredits = val
}

// SetMostSubmittedCharts sets the value of MostSubmittedCharts.
func (s *GetStatusOKLeaderboards) SetMostSubmittedCharts(val []GetStatusOKLeaderboardsMostSubmittedChartsItem) {
	s.MostSubmittedCharts = val
}

type GetStatusOKLeaderboardsMostCreditsItem struct {
	// Symbol of the agent.
	AgentSymbol string `json:"agentSymbol"`
	// Amount of credits.
	Credits int64 `json:"credits"`
}

// GetAgentSymbol returns the value of AgentSymbol.
func (s *GetStatusOKLeaderboardsMostCreditsItem) GetAgentSymbol() string {
	return s.AgentSymbol
}

// GetCredits returns the value of Credits.
func (s *GetStatusOKLeaderboardsMostCreditsItem) GetCredits() int64 {
	return s.Credits
}

// SetAgentSymbol sets the value of AgentSymbol.
func (s *GetStatusOKLeaderboardsMostCreditsItem) SetAgentSymbol(val string) {
	s.AgentSymbol = val
}

// SetCredits sets the value of Credits.
func (s *GetStatusOKLeaderboardsMostCreditsItem) SetCredits(val int64) {
	s.Credits = val
}

type GetStatusOKLeaderboardsMostSubmittedChartsItem struct {
	// Symbol of the agent.
	AgentSymbol string `json:"agentSymbol"`
	// Amount of charts done by the agent.
	ChartCount int `json:"chartCount"`
}

// GetAgentSymbol returns the value of AgentSymbol.
func (s *GetStatusOKLeaderboardsMostSubmittedChartsItem) GetAgentSymbol() string {
	return s.AgentSymbol
}

// GetChartCount returns the value of ChartCount.
func (s *GetStatusOKLeaderboardsMostSubmittedChartsItem) GetChartCount() int {
	return s.ChartCount
}

// SetAgentSymbol sets the value of AgentSymbol.
func (s *GetStatusOKLeaderboardsMostSubmittedChartsItem) SetAgentSymbol(val string) {
	s.AgentSymbol = val
}

// SetChartCount sets the value of ChartCount.
func (s *GetStatusOKLeaderboardsMostSubmittedChartsItem) SetChartCount(val int) {
	s.ChartCount = val
}

type GetStatusOKLinksItem struct {
	Name string `json:"name"`
	URL  string `json:"url"`
}

// GetName returns the value of Name.
func (s *GetStatusOKLinksItem) GetName() string {
	return s.Name
}

// GetURL returns the value of URL.
func (s *GetStatusOKLinksItem) GetURL() string {
	return s.URL
}

// SetName sets the value of Name.
func (s *GetStatusOKLinksItem) SetName(val string) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *GetStatusOKLinksItem) SetURL(val string) {
	s.URL = val
}

type GetStatusOKServerResets struct {
	// The date and time when the game server will reset.
	Next string `json:"next"`
	// How often we intend to reset the game server.
	Frequency string `json:"frequency"`
}

// GetNext returns the value of Next.
func (s *GetStatusOKServerResets) GetNext() string {
	return s.Next
}

// GetFrequency returns the value of Frequency.
func (s *GetStatusOKServerResets) GetFrequency() string {
	return s.Frequency
}

// SetNext sets the value of Next.
func (s *GetStatusOKServerResets) SetNext(val string) {
	s.Next = val
}

// SetFrequency sets the value of Frequency.
func (s *GetStatusOKServerResets) SetFrequency(val string) {
	s.Frequency = val
}

type GetStatusOKStats struct {
	// Number of registered agents in the game.
	Agents int `json:"agents"`
	// Total number of ships in the game.
	Ships int `json:"ships"`
	// Total number of systems in the game.
	Systems int `json:"systems"`
	// Total number of waypoints in the game.
	Waypoints int `json:"waypoints"`
}

// GetAgents returns the value of Agents.
func (s *GetStatusOKStats) GetAgents() int {
	return s.Agents
}

// GetShips returns the value of Ships.
func (s *GetStatusOKStats) GetShips() int {
	return s.Ships
}

// GetSystems returns the value of Systems.
func (s *GetStatusOKStats) GetSystems() int {
	return s.Systems
}

// GetWaypoints returns the value of Waypoints.
func (s *GetStatusOKStats) GetWaypoints() int {
	return s.Waypoints
}

// SetAgents sets the value of Agents.
func (s *GetStatusOKStats) SetAgents(val int) {
	s.Agents = val
}

// SetShips sets the value of Ships.
func (s *GetStatusOKStats) SetShips(val int) {
	s.Ships = val
}

// SetSystems sets the value of Systems.
func (s *GetStatusOKStats) SetSystems(val int) {
	s.Systems = val
}

// SetWaypoints sets the value of Waypoints.
func (s *GetStatusOKStats) SetWaypoints(val int) {
	s.Waypoints = val
}

type GetSystemOK struct {
	Data System `json:"data"`
}

// GetData returns the value of Data.
func (s *GetSystemOK) GetData() System {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetSystemOK) SetData(val System) {
	s.Data = val
}

type GetSystemWaypointsOK struct {
	Data []Waypoint `json:"data"`
	Meta Meta       `json:"meta"`
}

// GetData returns the value of Data.
func (s *GetSystemWaypointsOK) GetData() []Waypoint {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *GetSystemWaypointsOK) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *GetSystemWaypointsOK) SetData(val []Waypoint) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *GetSystemWaypointsOK) SetMeta(val Meta) {
	s.Meta = val
}

// GetSystemWaypointsTraits represents sum type.
type GetSystemWaypointsTraits struct {
	Type                     GetSystemWaypointsTraitsType // switch on this field
	WaypointTraitSymbol      WaypointTraitSymbol
	WaypointTraitSymbolArray []WaypointTraitSymbol
}

// GetSystemWaypointsTraitsType is oneOf type of GetSystemWaypointsTraits.
type GetSystemWaypointsTraitsType string

// Possible values for GetSystemWaypointsTraitsType.
const (
	WaypointTraitSymbolGetSystemWaypointsTraits      GetSystemWaypointsTraitsType = "WaypointTraitSymbol"
	WaypointTraitSymbolArrayGetSystemWaypointsTraits GetSystemWaypointsTraitsType = "[]WaypointTraitSymbol"
)

// IsWaypointTraitSymbol reports whether GetSystemWaypointsTraits is WaypointTraitSymbol.
func (s GetSystemWaypointsTraits) IsWaypointTraitSymbol() bool {
	return s.Type == WaypointTraitSymbolGetSystemWaypointsTraits
}

// IsWaypointTraitSymbolArray reports whether GetSystemWaypointsTraits is []WaypointTraitSymbol.
func (s GetSystemWaypointsTraits) IsWaypointTraitSymbolArray() bool {
	return s.Type == WaypointTraitSymbolArrayGetSystemWaypointsTraits
}

// SetWaypointTraitSymbol sets GetSystemWaypointsTraits to WaypointTraitSymbol.
func (s *GetSystemWaypointsTraits) SetWaypointTraitSymbol(v WaypointTraitSymbol) {
	s.Type = WaypointTraitSymbolGetSystemWaypointsTraits
	s.WaypointTraitSymbol = v
}

// GetWaypointTraitSymbol returns WaypointTraitSymbol and true boolean if GetSystemWaypointsTraits is WaypointTraitSymbol.
func (s GetSystemWaypointsTraits) GetWaypointTraitSymbol() (v WaypointTraitSymbol, ok bool) {
	if !s.IsWaypointTraitSymbol() {
		return v, false
	}
	return s.WaypointTraitSymbol, true
}

// NewWaypointTraitSymbolGetSystemWaypointsTraits returns new GetSystemWaypointsTraits from WaypointTraitSymbol.
func NewWaypointTraitSymbolGetSystemWaypointsTraits(v WaypointTraitSymbol) GetSystemWaypointsTraits {
	var s GetSystemWaypointsTraits
	s.SetWaypointTraitSymbol(v)
	return s
}

// SetWaypointTraitSymbolArray sets GetSystemWaypointsTraits to []WaypointTraitSymbol.
func (s *GetSystemWaypointsTraits) SetWaypointTraitSymbolArray(v []WaypointTraitSymbol) {
	s.Type = WaypointTraitSymbolArrayGetSystemWaypointsTraits
	s.WaypointTraitSymbolArray = v
}

// GetWaypointTraitSymbolArray returns []WaypointTraitSymbol and true boolean if GetSystemWaypointsTraits is []WaypointTraitSymbol.
func (s GetSystemWaypointsTraits) GetWaypointTraitSymbolArray() (v []WaypointTraitSymbol, ok bool) {
	if !s.IsWaypointTraitSymbolArray() {
		return v, false
	}
	return s.WaypointTraitSymbolArray, true
}

// NewWaypointTraitSymbolArrayGetSystemWaypointsTraits returns new GetSystemWaypointsTraits from []WaypointTraitSymbol.
func NewWaypointTraitSymbolArrayGetSystemWaypointsTraits(v []WaypointTraitSymbol) GetSystemWaypointsTraits {
	var s GetSystemWaypointsTraits
	s.SetWaypointTraitSymbolArray(v)
	return s
}

type GetSystemsOK struct {
	Data []System `json:"data"`
	Meta Meta     `json:"meta"`
}

// GetData returns the value of Data.
func (s *GetSystemsOK) GetData() []System {
	return s.Data
}

// GetMeta returns the value of Meta.
func (s *GetSystemsOK) GetMeta() Meta {
	return s.Meta
}

// SetData sets the value of Data.
func (s *GetSystemsOK) SetData(val []System) {
	s.Data = val
}

// SetMeta sets the value of Meta.
func (s *GetSystemsOK) SetMeta(val Meta) {
	s.Meta = val
}

type GetWaypointOK struct {
	Data Waypoint `json:"data"`
}

// GetData returns the value of Data.
func (s *GetWaypointOK) GetData() Waypoint {
	return s.Data
}

// SetData sets the value of Data.
func (s *GetWaypointOK) SetData(val Waypoint) {
	s.Data = val
}

type InstallMountCreated struct {
	Data InstallMountCreatedData `json:"data"`
}

// GetData returns the value of Data.
func (s *InstallMountCreated) GetData() InstallMountCreatedData {
	return s.Data
}

// SetData sets the value of Data.
func (s *InstallMountCreated) SetData(val InstallMountCreatedData) {
	s.Data = val
}

type InstallMountCreatedData struct {
	Agent Agent `json:"agent"`
	// List of installed mounts after the installation of the new mount.
	Mounts      []ShipMount                 `json:"mounts"`
	Cargo       ShipCargo                   `json:"cargo"`
	Transaction ShipModificationTransaction `json:"transaction"`
}

// GetAgent returns the value of Agent.
func (s *InstallMountCreatedData) GetAgent() Agent {
	return s.Agent
}

// GetMounts returns the value of Mounts.
func (s *InstallMountCreatedData) GetMounts() []ShipMount {
	return s.Mounts
}

// GetCargo returns the value of Cargo.
func (s *InstallMountCreatedData) GetCargo() ShipCargo {
	return s.Cargo
}

// GetTransaction returns the value of Transaction.
func (s *InstallMountCreatedData) GetTransaction() ShipModificationTransaction {
	return s.Transaction
}

// SetAgent sets the value of Agent.
func (s *InstallMountCreatedData) SetAgent(val Agent) {
	s.Agent = val
}

// SetMounts sets the value of Mounts.
func (s *InstallMountCreatedData) SetMounts(val []ShipMount) {
	s.Mounts = val
}

// SetCargo sets the value of Cargo.
func (s *InstallMountCreatedData) SetCargo(val ShipCargo) {
	s.Cargo = val
}

// SetTransaction sets the value of Transaction.
func (s *InstallMountCreatedData) SetTransaction(val ShipModificationTransaction) {
	s.Transaction = val
}

type InstallMountReq struct {
	Symbol string `json:"symbol"`
}

// GetSymbol returns the value of Symbol.
func (s *InstallMountReq) GetSymbol() string {
	return s.Symbol
}

// SetSymbol sets the value of Symbol.
func (s *InstallMountReq) SetSymbol(val string) {
	s.Symbol = val
}

type JettisonOK struct {
	Data JettisonOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *JettisonOK) GetData() JettisonOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *JettisonOK) SetData(val JettisonOKData) {
	s.Data = val
}

type JettisonOKData struct {
	Cargo ShipCargo `json:"cargo"`
}

// GetCargo returns the value of Cargo.
func (s *JettisonOKData) GetCargo() ShipCargo {
	return s.Cargo
}

// SetCargo sets the value of Cargo.
func (s *JettisonOKData) SetCargo(val ShipCargo) {
	s.Cargo = val
}

type JettisonReq struct {
	Symbol TradeSymbol `json:"symbol"`
	// Amount of units to jettison of this good.
	Units int `json:"units"`
}

// GetSymbol returns the value of Symbol.
func (s *JettisonReq) GetSymbol() TradeSymbol {
	return s.Symbol
}

// GetUnits returns the value of Units.
func (s *JettisonReq) GetUnits() int {
	return s.Units
}

// SetSymbol sets the value of Symbol.
func (s *JettisonReq) SetSymbol(val TradeSymbol) {
	s.Symbol = val
}

// SetUnits sets the value of Units.
func (s *JettisonReq) SetUnits(val int) {
	s.Units = val
}

// Ref: #/components/schemas/JumpGate
type JumpGate struct {
	Symbol WaypointSymbol `json:"symbol"`
	// All the gates that are connected to this waypoint.
	Connections []string `json:"connections"`
}

// GetSymbol returns the value of Symbol.
func (s *JumpGate) GetSymbol() WaypointSymbol {
	return s.Symbol
}

// GetConnections returns the value of Connections.
func (s *JumpGate) GetConnections() []string {
	return s.Connections
}

// SetSymbol sets the value of Symbol.
func (s *JumpGate) SetSymbol(val WaypointSymbol) {
	s.Symbol = val
}

// SetConnections sets the value of Connections.
func (s *JumpGate) SetConnections(val []string) {
	s.Connections = val
}

type JumpShipOK struct {
	Data JumpShipOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *JumpShipOK) GetData() JumpShipOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *JumpShipOK) SetData(val JumpShipOKData) {
	s.Data = val
}

type JumpShipOKData struct {
	Nav         ShipNav           `json:"nav"`
	Cooldown    Cooldown          `json:"cooldown"`
	Transaction MarketTransaction `json:"transaction"`
	Agent       Agent             `json:"agent"`
}

// GetNav returns the value of Nav.
func (s *JumpShipOKData) GetNav() ShipNav {
	return s.Nav
}

// GetCooldown returns the value of Cooldown.
func (s *JumpShipOKData) GetCooldown() Cooldown {
	return s.Cooldown
}

// GetTransaction returns the value of Transaction.
func (s *JumpShipOKData) GetTransaction() MarketTransaction {
	return s.Transaction
}

// GetAgent returns the value of Agent.
func (s *JumpShipOKData) GetAgent() Agent {
	return s.Agent
}

// SetNav sets the value of Nav.
func (s *JumpShipOKData) SetNav(val ShipNav) {
	s.Nav = val
}

// SetCooldown sets the value of Cooldown.
func (s *JumpShipOKData) SetCooldown(val Cooldown) {
	s.Cooldown = val
}

// SetTransaction sets the value of Transaction.
func (s *JumpShipOKData) SetTransaction(val MarketTransaction) {
	s.Transaction = val
}

// SetAgent sets the value of Agent.
func (s *JumpShipOKData) SetAgent(val Agent) {
	s.Agent = val
}

type JumpShipReq struct {
	// The symbol of the waypoint to jump to. The destination must be a connected waypoint.
	WaypointSymbol string `json:"waypointSymbol"`
}

// GetWaypointSymbol returns the value of WaypointSymbol.
func (s *JumpShipReq) GetWaypointSymbol() string {
	return s.WaypointSymbol
}

// SetWaypointSymbol sets the value of WaypointSymbol.
func (s *JumpShipReq) SetWaypointSymbol(val string) {
	s.WaypointSymbol = val
}

// Ref: #/components/schemas/Market
type Market struct {
	// The symbol of the market. The symbol is the same as the waypoint where the market is located.
	Symbol string `json:"symbol"`
	// The list of goods that are exported from this market.
	Exports []TradeGood `json:"exports"`
	// The list of goods that are sought as imports in this market.
	Imports []TradeGood `json:"imports"`
	// The list of goods that are bought and sold between agents at this market.
	Exchange []TradeGood `json:"exchange"`
	// The list of recent transactions at this market. Visible only when a ship is present at the market.
	Transactions []MarketTransaction `json:"transactions"`
	// The list of goods that are traded at this market. Visible only when a ship is present at the
	// market.
	TradeGoods []MarketTradeGood `json:"tradeGoods"`
}

// GetSymbol returns the value of Symbol.
func (s *Market) GetSymbol() string {
	return s.Symbol
}

// GetExports returns the value of Exports.
func (s *Market) GetExports() []TradeGood {
	return s.Exports
}

// GetImports returns the value of Imports.
func (s *Market) GetImports() []TradeGood {
	return s.Imports
}

// GetExchange returns the value of Exchange.
func (s *Market) GetExchange() []TradeGood {
	return s.Exchange
}

// GetTransactions returns the value of Transactions.
func (s *Market) GetTransactions() []MarketTransaction {
	return s.Transactions
}

// GetTradeGoods returns the value of TradeGoods.
func (s *Market) GetTradeGoods() []MarketTradeGood {
	return s.TradeGoods
}

// SetSymbol sets the value of Symbol.
func (s *Market) SetSymbol(val string) {
	s.Symbol = val
}

// SetExports sets the value of Exports.
func (s *Market) SetExports(val []TradeGood) {
	s.Exports = val
}

// SetImports sets the value of Imports.
func (s *Market) SetImports(val []TradeGood) {
	s.Imports = val
}

// SetExchange sets the value of Exchange.
func (s *Market) SetExchange(val []TradeGood) {
	s.Exchange = val
}

// SetTransactions sets the value of Transactions.
func (s *Market) SetTransactions(val []MarketTransaction) {
	s.Transactions = val
}

// SetTradeGoods sets the value of TradeGoods.
func (s *Market) SetTradeGoods(val []MarketTradeGood) {
	s.TradeGoods = val
}

// Ref: #/components/schemas/MarketTradeGood
type MarketTradeGood struct {
	Symbol TradeSymbol `json:"symbol"`
	// The type of trade good (export, import, or exchange).
	Type MarketTradeGoodType `json:"type"`
	// This is the maximum number of units that can be purchased or sold at this market in a single trade
	// for this good. Trade volume also gives an indication of price volatility. A market with a low
	// trade volume will have large price swings, while high trade volume will be more resilient to price
	// changes.
	TradeVolume int              `json:"tradeVolume"`
	Supply      SupplyLevel      `json:"supply"`
	Activity    OptActivityLevel `json:"activity"`
	// The price at which this good can be purchased from the market.
	PurchasePrice int `json:"purchasePrice"`
	// The price at which this good can be sold to the market.
	SellPrice int `json:"sellPrice"`
}

// GetSymbol returns the value of Symbol.
func (s *MarketTradeGood) GetSymbol() TradeSymbol {
	return s.Symbol
}

// GetType returns the value of Type.
func (s *MarketTradeGood) GetType() MarketTradeGoodType {
	return s.Type
}

// GetTradeVolume returns the value of TradeVolume.
func (s *MarketTradeGood) GetTradeVolume() int {
	return s.TradeVolume
}

// GetSupply returns the value of Supply.
func (s *MarketTradeGood) GetSupply() SupplyLevel {
	return s.Supply
}

// GetActivity returns the value of Activity.
func (s *MarketTradeGood) GetActivity() OptActivityLevel {
	return s.Activity
}

// GetPurchasePrice returns the value of PurchasePrice.
func (s *MarketTradeGood) GetPurchasePrice() int {
	return s.PurchasePrice
}

// GetSellPrice returns the value of SellPrice.
func (s *MarketTradeGood) GetSellPrice() int {
	return s.SellPrice
}

// SetSymbol sets the value of Symbol.
func (s *MarketTradeGood) SetSymbol(val TradeSymbol) {
	s.Symbol = val
}

// SetType sets the value of Type.
func (s *MarketTradeGood) SetType(val MarketTradeGoodType) {
	s.Type = val
}

// SetTradeVolume sets the value of TradeVolume.
func (s *MarketTradeGood) SetTradeVolume(val int) {
	s.TradeVolume = val
}

// SetSupply sets the value of Supply.
func (s *MarketTradeGood) SetSupply(val SupplyLevel) {
	s.Supply = val
}

// SetActivity sets the value of Activity.
func (s *MarketTradeGood) SetActivity(val OptActivityLevel) {
	s.Activity = val
}

// SetPurchasePrice sets the value of PurchasePrice.
func (s *MarketTradeGood) SetPurchasePrice(val int) {
	s.PurchasePrice = val
}

// SetSellPrice sets the value of SellPrice.
func (s *MarketTradeGood) SetSellPrice(val int) {
	s.SellPrice = val
}

// The type of trade good (export, import, or exchange).
type MarketTradeGoodType string

const (
	MarketTradeGoodTypeEXPORT   MarketTradeGoodType = "EXPORT"
	MarketTradeGoodTypeIMPORT   MarketTradeGoodType = "IMPORT"
	MarketTradeGoodTypeEXCHANGE MarketTradeGoodType = "EXCHANGE"
)

// AllValues returns all MarketTradeGoodType values.
func (MarketTradeGoodType) AllValues() []MarketTradeGoodType {
	return []MarketTradeGoodType{
		MarketTradeGoodTypeEXPORT,
		MarketTradeGoodTypeIMPORT,
		MarketTradeGoodTypeEXCHANGE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MarketTradeGoodType) MarshalText() ([]byte, error) {
	switch s {
	case MarketTradeGoodTypeEXPORT:
		return []byte(s), nil
	case MarketTradeGoodTypeIMPORT:
		return []byte(s), nil
	case MarketTradeGoodTypeEXCHANGE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MarketTradeGoodType) UnmarshalText(data []byte) error {
	switch MarketTradeGoodType(data) {
	case MarketTradeGoodTypeEXPORT:
		*s = MarketTradeGoodTypeEXPORT
		return nil
	case MarketTradeGoodTypeIMPORT:
		*s = MarketTradeGoodTypeIMPORT
		return nil
	case MarketTradeGoodTypeEXCHANGE:
		*s = MarketTradeGoodTypeEXCHANGE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Result of a transaction with a market.
// Ref: #/components/schemas/MarketTransaction
type MarketTransaction struct {
	WaypointSymbol WaypointSymbol `json:"waypointSymbol"`
	// The symbol of the ship that made the transaction.
	ShipSymbol string `json:"shipSymbol"`
	// The symbol of the trade good.
	TradeSymbol string `json:"tradeSymbol"`
	// The type of transaction.
	Type MarketTransactionType `json:"type"`
	// The number of units of the transaction.
	Units int `json:"units"`
	// The price per unit of the transaction.
	PricePerUnit int `json:"pricePerUnit"`
	// The total price of the transaction.
	TotalPrice int `json:"totalPrice"`
	// The timestamp of the transaction.
	Timestamp time.Time `json:"timestamp"`
}

// GetWaypointSymbol returns the value of WaypointSymbol.
func (s *MarketTransaction) GetWaypointSymbol() WaypointSymbol {
	return s.WaypointSymbol
}

// GetShipSymbol returns the value of ShipSymbol.
func (s *MarketTransaction) GetShipSymbol() string {
	return s.ShipSymbol
}

// GetTradeSymbol returns the value of TradeSymbol.
func (s *MarketTransaction) GetTradeSymbol() string {
	return s.TradeSymbol
}

// GetType returns the value of Type.
func (s *MarketTransaction) GetType() MarketTransactionType {
	return s.Type
}

// GetUnits returns the value of Units.
func (s *MarketTransaction) GetUnits() int {
	return s.Units
}

// GetPricePerUnit returns the value of PricePerUnit.
func (s *MarketTransaction) GetPricePerUnit() int {
	return s.PricePerUnit
}

// GetTotalPrice returns the value of TotalPrice.
func (s *MarketTransaction) GetTotalPrice() int {
	return s.TotalPrice
}

// GetTimestamp returns the value of Timestamp.
func (s *MarketTransaction) GetTimestamp() time.Time {
	return s.Timestamp
}

// SetWaypointSymbol sets the value of WaypointSymbol.
func (s *MarketTransaction) SetWaypointSymbol(val WaypointSymbol) {
	s.WaypointSymbol = val
}

// SetShipSymbol sets the value of ShipSymbol.
func (s *MarketTransaction) SetShipSymbol(val string) {
	s.ShipSymbol = val
}

// SetTradeSymbol sets the value of TradeSymbol.
func (s *MarketTransaction) SetTradeSymbol(val string) {
	s.TradeSymbol = val
}

// SetType sets the value of Type.
func (s *MarketTransaction) SetType(val MarketTransactionType) {
	s.Type = val
}

// SetUnits sets the value of Units.
func (s *MarketTransaction) SetUnits(val int) {
	s.Units = val
}

// SetPricePerUnit sets the value of PricePerUnit.
func (s *MarketTransaction) SetPricePerUnit(val int) {
	s.PricePerUnit = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *MarketTransaction) SetTotalPrice(val int) {
	s.TotalPrice = val
}

// SetTimestamp sets the value of Timestamp.
func (s *MarketTransaction) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// The type of transaction.
type MarketTransactionType string

const (
	MarketTransactionTypePURCHASE MarketTransactionType = "PURCHASE"
	MarketTransactionTypeSELL     MarketTransactionType = "SELL"
)

// AllValues returns all MarketTransactionType values.
func (MarketTransactionType) AllValues() []MarketTransactionType {
	return []MarketTransactionType{
		MarketTransactionTypePURCHASE,
		MarketTransactionTypeSELL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MarketTransactionType) MarshalText() ([]byte, error) {
	switch s {
	case MarketTransactionTypePURCHASE:
		return []byte(s), nil
	case MarketTransactionTypeSELL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MarketTransactionType) UnmarshalText(data []byte) error {
	switch MarketTransactionType(data) {
	case MarketTransactionTypePURCHASE:
		*s = MarketTransactionTypePURCHASE
		return nil
	case MarketTransactionTypeSELL:
		*s = MarketTransactionTypeSELL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Meta details for pagination.
// Ref: #/components/schemas/Meta
type Meta struct {
	// Shows the total amount of items of this kind that exist.
	Total int `json:"total"`
	// A page denotes an amount of items, offset from the first item. Each page holds an amount of items
	// equal to the `limit`.
	Page int `json:"page"`
	// The amount of items in each page. Limits how many items can be fetched at once.
	Limit int `json:"limit"`
}

// GetTotal returns the value of Total.
func (s *Meta) GetTotal() int {
	return s.Total
}

// GetPage returns the value of Page.
func (s *Meta) GetPage() int {
	return s.Page
}

// GetLimit returns the value of Limit.
func (s *Meta) GetLimit() int {
	return s.Limit
}

// SetTotal sets the value of Total.
func (s *Meta) SetTotal(val int) {
	s.Total = val
}

// SetPage sets the value of Page.
func (s *Meta) SetPage(val int) {
	s.Page = val
}

// SetLimit sets the value of Limit.
func (s *Meta) SetLimit(val int) {
	s.Limit = val
}

type NavigateShipOK struct {
	Data NavigateShipOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *NavigateShipOK) GetData() NavigateShipOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *NavigateShipOK) SetData(val NavigateShipOKData) {
	s.Data = val
}

type NavigateShipOKData struct {
	Fuel   ShipFuel                       `json:"fuel"`
	Nav    ShipNav                        `json:"nav"`
	Events []NavigateShipOKDataEventsItem `json:"events"`
}

// GetFuel returns the value of Fuel.
func (s *NavigateShipOKData) GetFuel() ShipFuel {
	return s.Fuel
}

// GetNav returns the value of Nav.
func (s *NavigateShipOKData) GetNav() ShipNav {
	return s.Nav
}

// GetEvents returns the value of Events.
func (s *NavigateShipOKData) GetEvents() []NavigateShipOKDataEventsItem {
	return s.Events
}

// SetFuel sets the value of Fuel.
func (s *NavigateShipOKData) SetFuel(val ShipFuel) {
	s.Fuel = val
}

// SetNav sets the value of Nav.
func (s *NavigateShipOKData) SetNav(val ShipNav) {
	s.Nav = val
}

// SetEvents sets the value of Events.
func (s *NavigateShipOKData) SetEvents(val []NavigateShipOKDataEventsItem) {
	s.Events = val
}

// NavigateShipOKDataEventsItem represents sum type.
type NavigateShipOKDataEventsItem struct {
	Type               NavigateShipOKDataEventsItemType // switch on this field
	ShipConditionEvent ShipConditionEvent
}

// NavigateShipOKDataEventsItemType is oneOf type of NavigateShipOKDataEventsItem.
type NavigateShipOKDataEventsItemType string

// Possible values for NavigateShipOKDataEventsItemType.
const (
	ShipConditionEventNavigateShipOKDataEventsItem NavigateShipOKDataEventsItemType = "ShipConditionEvent"
)

// IsShipConditionEvent reports whether NavigateShipOKDataEventsItem is ShipConditionEvent.
func (s NavigateShipOKDataEventsItem) IsShipConditionEvent() bool {
	return s.Type == ShipConditionEventNavigateShipOKDataEventsItem
}

// SetShipConditionEvent sets NavigateShipOKDataEventsItem to ShipConditionEvent.
func (s *NavigateShipOKDataEventsItem) SetShipConditionEvent(v ShipConditionEvent) {
	s.Type = ShipConditionEventNavigateShipOKDataEventsItem
	s.ShipConditionEvent = v
}

// GetShipConditionEvent returns ShipConditionEvent and true boolean if NavigateShipOKDataEventsItem is ShipConditionEvent.
func (s NavigateShipOKDataEventsItem) GetShipConditionEvent() (v ShipConditionEvent, ok bool) {
	if !s.IsShipConditionEvent() {
		return v, false
	}
	return s.ShipConditionEvent, true
}

// NewShipConditionEventNavigateShipOKDataEventsItem returns new NavigateShipOKDataEventsItem from ShipConditionEvent.
func NewShipConditionEventNavigateShipOKDataEventsItem(v ShipConditionEvent) NavigateShipOKDataEventsItem {
	var s NavigateShipOKDataEventsItem
	s.SetShipConditionEvent(v)
	return s
}

type NavigateShipReq struct {
	// The target destination.
	WaypointSymbol string `json:"waypointSymbol"`
}

// GetWaypointSymbol returns the value of WaypointSymbol.
func (s *NavigateShipReq) GetWaypointSymbol() string {
	return s.WaypointSymbol
}

// SetWaypointSymbol sets the value of WaypointSymbol.
func (s *NavigateShipReq) SetWaypointSymbol(val string) {
	s.WaypointSymbol = val
}

type NegotiateContractCreated struct {
	Data NegotiateContractCreatedData `json:"data"`
}

// GetData returns the value of Data.
func (s *NegotiateContractCreated) GetData() NegotiateContractCreatedData {
	return s.Data
}

// SetData sets the value of Data.
func (s *NegotiateContractCreated) SetData(val NegotiateContractCreatedData) {
	s.Data = val
}

type NegotiateContractCreatedData struct {
	Contract Contract `json:"contract"`
}

// GetContract returns the value of Contract.
func (s *NegotiateContractCreatedData) GetContract() Contract {
	return s.Contract
}

// SetContract sets the value of Contract.
func (s *NegotiateContractCreatedData) SetContract(val Contract) {
	s.Contract = val
}

// NewOptActivityLevel returns new OptActivityLevel with value set to v.
func NewOptActivityLevel(v ActivityLevel) OptActivityLevel {
	return OptActivityLevel{
		Value: v,
		Set:   true,
	}
}

// OptActivityLevel is optional ActivityLevel.
type OptActivityLevel struct {
	Value ActivityLevel
	Set   bool
}

// IsSet returns true if OptActivityLevel was set.
func (o OptActivityLevel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptActivityLevel) Reset() {
	var v ActivityLevel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptActivityLevel) SetTo(v ActivityLevel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptActivityLevel) Get() (v ActivityLevel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptActivityLevel) Or(d ActivityLevel) ActivityLevel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChart returns new OptChart with value set to v.
func NewOptChart(v Chart) OptChart {
	return OptChart{
		Value: v,
		Set:   true,
	}
}

// OptChart is optional Chart.
type OptChart struct {
	Value Chart
	Set   bool
}

// IsSet returns true if OptChart was set.
func (o OptChart) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChart) Reset() {
	var v Chart
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChart) SetTo(v Chart) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChart) Get() (v Chart, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChart) Or(d Chart) Chart {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDeliverContractReq returns new OptDeliverContractReq with value set to v.
func NewOptDeliverContractReq(v DeliverContractReq) OptDeliverContractReq {
	return OptDeliverContractReq{
		Value: v,
		Set:   true,
	}
}

// OptDeliverContractReq is optional DeliverContractReq.
type OptDeliverContractReq struct {
	Value DeliverContractReq
	Set   bool
}

// IsSet returns true if OptDeliverContractReq was set.
func (o OptDeliverContractReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDeliverContractReq) Reset() {
	var v DeliverContractReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDeliverContractReq) SetTo(v DeliverContractReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDeliverContractReq) Get() (v DeliverContractReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDeliverContractReq) Or(d DeliverContractReq) DeliverContractReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptExtractResourcesReq returns new OptExtractResourcesReq with value set to v.
func NewOptExtractResourcesReq(v ExtractResourcesReq) OptExtractResourcesReq {
	return OptExtractResourcesReq{
		Value: v,
		Set:   true,
	}
}

// OptExtractResourcesReq is optional ExtractResourcesReq.
type OptExtractResourcesReq struct {
	Value ExtractResourcesReq
	Set   bool
}

// IsSet returns true if OptExtractResourcesReq was set.
func (o OptExtractResourcesReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptExtractResourcesReq) Reset() {
	var v ExtractResourcesReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptExtractResourcesReq) SetTo(v ExtractResourcesReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptExtractResourcesReq) Get() (v ExtractResourcesReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptExtractResourcesReq) Or(d ExtractResourcesReq) ExtractResourcesReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetSystemWaypointsTraits returns new OptGetSystemWaypointsTraits with value set to v.
func NewOptGetSystemWaypointsTraits(v GetSystemWaypointsTraits) OptGetSystemWaypointsTraits {
	return OptGetSystemWaypointsTraits{
		Value: v,
		Set:   true,
	}
}

// OptGetSystemWaypointsTraits is optional GetSystemWaypointsTraits.
type OptGetSystemWaypointsTraits struct {
	Value GetSystemWaypointsTraits
	Set   bool
}

// IsSet returns true if OptGetSystemWaypointsTraits was set.
func (o OptGetSystemWaypointsTraits) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetSystemWaypointsTraits) Reset() {
	var v GetSystemWaypointsTraits
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetSystemWaypointsTraits) SetTo(v GetSystemWaypointsTraits) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetSystemWaypointsTraits) Get() (v GetSystemWaypointsTraits, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetSystemWaypointsTraits) Or(d GetSystemWaypointsTraits) GetSystemWaypointsTraits {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInstallMountReq returns new OptInstallMountReq with value set to v.
func NewOptInstallMountReq(v InstallMountReq) OptInstallMountReq {
	return OptInstallMountReq{
		Value: v,
		Set:   true,
	}
}

// OptInstallMountReq is optional InstallMountReq.
type OptInstallMountReq struct {
	Value InstallMountReq
	Set   bool
}

// IsSet returns true if OptInstallMountReq was set.
func (o OptInstallMountReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInstallMountReq) Reset() {
	var v InstallMountReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInstallMountReq) SetTo(v InstallMountReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInstallMountReq) Get() (v InstallMountReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInstallMountReq) Or(d InstallMountReq) InstallMountReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJettisonReq returns new OptJettisonReq with value set to v.
func NewOptJettisonReq(v JettisonReq) OptJettisonReq {
	return OptJettisonReq{
		Value: v,
		Set:   true,
	}
}

// OptJettisonReq is optional JettisonReq.
type OptJettisonReq struct {
	Value JettisonReq
	Set   bool
}

// IsSet returns true if OptJettisonReq was set.
func (o OptJettisonReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJettisonReq) Reset() {
	var v JettisonReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJettisonReq) SetTo(v JettisonReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJettisonReq) Get() (v JettisonReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJettisonReq) Or(d JettisonReq) JettisonReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptJumpShipReq returns new OptJumpShipReq with value set to v.
func NewOptJumpShipReq(v JumpShipReq) OptJumpShipReq {
	return OptJumpShipReq{
		Value: v,
		Set:   true,
	}
}

// OptJumpShipReq is optional JumpShipReq.
type OptJumpShipReq struct {
	Value JumpShipReq
	Set   bool
}

// IsSet returns true if OptJumpShipReq was set.
func (o OptJumpShipReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptJumpShipReq) Reset() {
	var v JumpShipReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptJumpShipReq) SetTo(v JumpShipReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptJumpShipReq) Get() (v JumpShipReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptJumpShipReq) Or(d JumpShipReq) JumpShipReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNavigateShipReq returns new OptNavigateShipReq with value set to v.
func NewOptNavigateShipReq(v NavigateShipReq) OptNavigateShipReq {
	return OptNavigateShipReq{
		Value: v,
		Set:   true,
	}
}

// OptNavigateShipReq is optional NavigateShipReq.
type OptNavigateShipReq struct {
	Value NavigateShipReq
	Set   bool
}

// IsSet returns true if OptNavigateShipReq was set.
func (o OptNavigateShipReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNavigateShipReq) Reset() {
	var v NavigateShipReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNavigateShipReq) SetTo(v NavigateShipReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNavigateShipReq) Get() (v NavigateShipReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNavigateShipReq) Or(d NavigateShipReq) NavigateShipReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPatchShipNavReq returns new OptPatchShipNavReq with value set to v.
func NewOptPatchShipNavReq(v PatchShipNavReq) OptPatchShipNavReq {
	return OptPatchShipNavReq{
		Value: v,
		Set:   true,
	}
}

// OptPatchShipNavReq is optional PatchShipNavReq.
type OptPatchShipNavReq struct {
	Value PatchShipNavReq
	Set   bool
}

// IsSet returns true if OptPatchShipNavReq was set.
func (o OptPatchShipNavReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPatchShipNavReq) Reset() {
	var v PatchShipNavReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPatchShipNavReq) SetTo(v PatchShipNavReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPatchShipNavReq) Get() (v PatchShipNavReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPatchShipNavReq) Or(d PatchShipNavReq) PatchShipNavReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPurchaseCargoReq returns new OptPurchaseCargoReq with value set to v.
func NewOptPurchaseCargoReq(v PurchaseCargoReq) OptPurchaseCargoReq {
	return OptPurchaseCargoReq{
		Value: v,
		Set:   true,
	}
}

// OptPurchaseCargoReq is optional PurchaseCargoReq.
type OptPurchaseCargoReq struct {
	Value PurchaseCargoReq
	Set   bool
}

// IsSet returns true if OptPurchaseCargoReq was set.
func (o OptPurchaseCargoReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPurchaseCargoReq) Reset() {
	var v PurchaseCargoReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPurchaseCargoReq) SetTo(v PurchaseCargoReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPurchaseCargoReq) Get() (v PurchaseCargoReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPurchaseCargoReq) Or(d PurchaseCargoReq) PurchaseCargoReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPurchaseShipReq returns new OptPurchaseShipReq with value set to v.
func NewOptPurchaseShipReq(v PurchaseShipReq) OptPurchaseShipReq {
	return OptPurchaseShipReq{
		Value: v,
		Set:   true,
	}
}

// OptPurchaseShipReq is optional PurchaseShipReq.
type OptPurchaseShipReq struct {
	Value PurchaseShipReq
	Set   bool
}

// IsSet returns true if OptPurchaseShipReq was set.
func (o OptPurchaseShipReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPurchaseShipReq) Reset() {
	var v PurchaseShipReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPurchaseShipReq) SetTo(v PurchaseShipReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPurchaseShipReq) Get() (v PurchaseShipReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPurchaseShipReq) Or(d PurchaseShipReq) PurchaseShipReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRefuelShipReq returns new OptRefuelShipReq with value set to v.
func NewOptRefuelShipReq(v RefuelShipReq) OptRefuelShipReq {
	return OptRefuelShipReq{
		Value: v,
		Set:   true,
	}
}

// OptRefuelShipReq is optional RefuelShipReq.
type OptRefuelShipReq struct {
	Value RefuelShipReq
	Set   bool
}

// IsSet returns true if OptRefuelShipReq was set.
func (o OptRefuelShipReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRefuelShipReq) Reset() {
	var v RefuelShipReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRefuelShipReq) SetTo(v RefuelShipReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRefuelShipReq) Get() (v RefuelShipReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRefuelShipReq) Or(d RefuelShipReq) RefuelShipReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRegisterReq returns new OptRegisterReq with value set to v.
func NewOptRegisterReq(v RegisterReq) OptRegisterReq {
	return OptRegisterReq{
		Value: v,
		Set:   true,
	}
}

// OptRegisterReq is optional RegisterReq.
type OptRegisterReq struct {
	Value RegisterReq
	Set   bool
}

// IsSet returns true if OptRegisterReq was set.
func (o OptRegisterReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRegisterReq) Reset() {
	var v RegisterReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRegisterReq) SetTo(v RegisterReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRegisterReq) Get() (v RegisterReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRegisterReq) Or(d RegisterReq) RegisterReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRemoveMountReq returns new OptRemoveMountReq with value set to v.
func NewOptRemoveMountReq(v RemoveMountReq) OptRemoveMountReq {
	return OptRemoveMountReq{
		Value: v,
		Set:   true,
	}
}

// OptRemoveMountReq is optional RemoveMountReq.
type OptRemoveMountReq struct {
	Value RemoveMountReq
	Set   bool
}

// IsSet returns true if OptRemoveMountReq was set.
func (o OptRemoveMountReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRemoveMountReq) Reset() {
	var v RemoveMountReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRemoveMountReq) SetTo(v RemoveMountReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRemoveMountReq) Get() (v RemoveMountReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRemoveMountReq) Or(d RemoveMountReq) RemoveMountReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptScannedShipFrame returns new OptScannedShipFrame with value set to v.
func NewOptScannedShipFrame(v ScannedShipFrame) OptScannedShipFrame {
	return OptScannedShipFrame{
		Value: v,
		Set:   true,
	}
}

// OptScannedShipFrame is optional ScannedShipFrame.
type OptScannedShipFrame struct {
	Value ScannedShipFrame
	Set   bool
}

// IsSet returns true if OptScannedShipFrame was set.
func (o OptScannedShipFrame) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptScannedShipFrame) Reset() {
	var v ScannedShipFrame
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptScannedShipFrame) SetTo(v ScannedShipFrame) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptScannedShipFrame) Get() (v ScannedShipFrame, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptScannedShipFrame) Or(d ScannedShipFrame) ScannedShipFrame {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptScannedShipReactor returns new OptScannedShipReactor with value set to v.
func NewOptScannedShipReactor(v ScannedShipReactor) OptScannedShipReactor {
	return OptScannedShipReactor{
		Value: v,
		Set:   true,
	}
}

// OptScannedShipReactor is optional ScannedShipReactor.
type OptScannedShipReactor struct {
	Value ScannedShipReactor
	Set   bool
}

// IsSet returns true if OptScannedShipReactor was set.
func (o OptScannedShipReactor) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptScannedShipReactor) Reset() {
	var v ScannedShipReactor
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptScannedShipReactor) SetTo(v ScannedShipReactor) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptScannedShipReactor) Get() (v ScannedShipReactor, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptScannedShipReactor) Or(d ScannedShipReactor) ScannedShipReactor {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSellCargoReq returns new OptSellCargoReq with value set to v.
func NewOptSellCargoReq(v SellCargoReq) OptSellCargoReq {
	return OptSellCargoReq{
		Value: v,
		Set:   true,
	}
}

// OptSellCargoReq is optional SellCargoReq.
type OptSellCargoReq struct {
	Value SellCargoReq
	Set   bool
}

// IsSet returns true if OptSellCargoReq was set.
func (o OptSellCargoReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSellCargoReq) Reset() {
	var v SellCargoReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSellCargoReq) SetTo(v SellCargoReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSellCargoReq) Get() (v SellCargoReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSellCargoReq) Or(d SellCargoReq) SellCargoReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptShipFuelConsumed returns new OptShipFuelConsumed with value set to v.
func NewOptShipFuelConsumed(v ShipFuelConsumed) OptShipFuelConsumed {
	return OptShipFuelConsumed{
		Value: v,
		Set:   true,
	}
}

// OptShipFuelConsumed is optional ShipFuelConsumed.
type OptShipFuelConsumed struct {
	Value ShipFuelConsumed
	Set   bool
}

// IsSet returns true if OptShipFuelConsumed was set.
func (o OptShipFuelConsumed) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptShipFuelConsumed) Reset() {
	var v ShipFuelConsumed
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptShipFuelConsumed) SetTo(v ShipFuelConsumed) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptShipFuelConsumed) Get() (v ShipFuelConsumed, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptShipFuelConsumed) Or(d ShipFuelConsumed) ShipFuelConsumed {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptShipNavFlightMode returns new OptShipNavFlightMode with value set to v.
func NewOptShipNavFlightMode(v ShipNavFlightMode) OptShipNavFlightMode {
	return OptShipNavFlightMode{
		Value: v,
		Set:   true,
	}
}

// OptShipNavFlightMode is optional ShipNavFlightMode.
type OptShipNavFlightMode struct {
	Value ShipNavFlightMode
	Set   bool
}

// IsSet returns true if OptShipNavFlightMode was set.
func (o OptShipNavFlightMode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptShipNavFlightMode) Reset() {
	var v ShipNavFlightMode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptShipNavFlightMode) SetTo(v ShipNavFlightMode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptShipNavFlightMode) Get() (v ShipNavFlightMode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptShipNavFlightMode) Or(d ShipNavFlightMode) ShipNavFlightMode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptShipRefineReq returns new OptShipRefineReq with value set to v.
func NewOptShipRefineReq(v ShipRefineReq) OptShipRefineReq {
	return OptShipRefineReq{
		Value: v,
		Set:   true,
	}
}

// OptShipRefineReq is optional ShipRefineReq.
type OptShipRefineReq struct {
	Value ShipRefineReq
	Set   bool
}

// IsSet returns true if OptShipRefineReq was set.
func (o OptShipRefineReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptShipRefineReq) Reset() {
	var v ShipRefineReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptShipRefineReq) SetTo(v ShipRefineReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptShipRefineReq) Get() (v ShipRefineReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptShipRefineReq) Or(d ShipRefineReq) ShipRefineReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSupplyConstructionReq returns new OptSupplyConstructionReq with value set to v.
func NewOptSupplyConstructionReq(v SupplyConstructionReq) OptSupplyConstructionReq {
	return OptSupplyConstructionReq{
		Value: v,
		Set:   true,
	}
}

// OptSupplyConstructionReq is optional SupplyConstructionReq.
type OptSupplyConstructionReq struct {
	Value SupplyConstructionReq
	Set   bool
}

// IsSet returns true if OptSupplyConstructionReq was set.
func (o OptSupplyConstructionReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSupplyConstructionReq) Reset() {
	var v SupplyConstructionReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSupplyConstructionReq) SetTo(v SupplyConstructionReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSupplyConstructionReq) Get() (v SupplyConstructionReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSupplyConstructionReq) Or(d SupplyConstructionReq) SupplyConstructionReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSurvey returns new OptSurvey with value set to v.
func NewOptSurvey(v Survey) OptSurvey {
	return OptSurvey{
		Value: v,
		Set:   true,
	}
}

// OptSurvey is optional Survey.
type OptSurvey struct {
	Value Survey
	Set   bool
}

// IsSet returns true if OptSurvey was set.
func (o OptSurvey) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSurvey) Reset() {
	var v Survey
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSurvey) SetTo(v Survey) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSurvey) Get() (v Survey, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSurvey) Or(d Survey) Survey {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTransferCargoReq returns new OptTransferCargoReq with value set to v.
func NewOptTransferCargoReq(v TransferCargoReq) OptTransferCargoReq {
	return OptTransferCargoReq{
		Value: v,
		Set:   true,
	}
}

// OptTransferCargoReq is optional TransferCargoReq.
type OptTransferCargoReq struct {
	Value TransferCargoReq
	Set   bool
}

// IsSet returns true if OptTransferCargoReq was set.
func (o OptTransferCargoReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTransferCargoReq) Reset() {
	var v TransferCargoReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTransferCargoReq) SetTo(v TransferCargoReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTransferCargoReq) Get() (v TransferCargoReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTransferCargoReq) Or(d TransferCargoReq) TransferCargoReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWarpShipReq returns new OptWarpShipReq with value set to v.
func NewOptWarpShipReq(v WarpShipReq) OptWarpShipReq {
	return OptWarpShipReq{
		Value: v,
		Set:   true,
	}
}

// OptWarpShipReq is optional WarpShipReq.
type OptWarpShipReq struct {
	Value WarpShipReq
	Set   bool
}

// IsSet returns true if OptWarpShipReq was set.
func (o OptWarpShipReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWarpShipReq) Reset() {
	var v WarpShipReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWarpShipReq) SetTo(v WarpShipReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWarpShipReq) Get() (v WarpShipReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWarpShipReq) Or(d WarpShipReq) WarpShipReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWaypointFaction returns new OptWaypointFaction with value set to v.
func NewOptWaypointFaction(v WaypointFaction) OptWaypointFaction {
	return OptWaypointFaction{
		Value: v,
		Set:   true,
	}
}

// OptWaypointFaction is optional WaypointFaction.
type OptWaypointFaction struct {
	Value WaypointFaction
	Set   bool
}

// IsSet returns true if OptWaypointFaction was set.
func (o OptWaypointFaction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWaypointFaction) Reset() {
	var v WaypointFaction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWaypointFaction) SetTo(v WaypointFaction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWaypointFaction) Get() (v WaypointFaction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWaypointFaction) Or(d WaypointFaction) WaypointFaction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWaypointSymbol returns new OptWaypointSymbol with value set to v.
func NewOptWaypointSymbol(v WaypointSymbol) OptWaypointSymbol {
	return OptWaypointSymbol{
		Value: v,
		Set:   true,
	}
}

// OptWaypointSymbol is optional WaypointSymbol.
type OptWaypointSymbol struct {
	Value WaypointSymbol
	Set   bool
}

// IsSet returns true if OptWaypointSymbol was set.
func (o OptWaypointSymbol) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWaypointSymbol) Reset() {
	var v WaypointSymbol
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWaypointSymbol) SetTo(v WaypointSymbol) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWaypointSymbol) Get() (v WaypointSymbol, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWaypointSymbol) Or(d WaypointSymbol) WaypointSymbol {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptWaypointType returns new OptWaypointType with value set to v.
func NewOptWaypointType(v WaypointType) OptWaypointType {
	return OptWaypointType{
		Value: v,
		Set:   true,
	}
}

// OptWaypointType is optional WaypointType.
type OptWaypointType struct {
	Value WaypointType
	Set   bool
}

// IsSet returns true if OptWaypointType was set.
func (o OptWaypointType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptWaypointType) Reset() {
	var v WaypointType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptWaypointType) SetTo(v WaypointType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptWaypointType) Get() (v WaypointType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptWaypointType) Or(d WaypointType) WaypointType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type OrbitShipOK struct {
	Data OrbitShipOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *OrbitShipOK) GetData() OrbitShipOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *OrbitShipOK) SetData(val OrbitShipOKData) {
	s.Data = val
}

type OrbitShipOKData struct {
	Nav ShipNav `json:"nav"`
}

// GetNav returns the value of Nav.
func (s *OrbitShipOKData) GetNav() ShipNav {
	return s.Nav
}

// SetNav sets the value of Nav.
func (s *OrbitShipOKData) SetNav(val ShipNav) {
	s.Nav = val
}

type PatchShipNavOK struct {
	Data ShipNav `json:"data"`
}

// GetData returns the value of Data.
func (s *PatchShipNavOK) GetData() ShipNav {
	return s.Data
}

// SetData sets the value of Data.
func (s *PatchShipNavOK) SetData(val ShipNav) {
	s.Data = val
}

type PatchShipNavReq struct {
	FlightMode OptShipNavFlightMode `json:"flightMode"`
}

// GetFlightMode returns the value of FlightMode.
func (s *PatchShipNavReq) GetFlightMode() OptShipNavFlightMode {
	return s.FlightMode
}

// SetFlightMode sets the value of FlightMode.
func (s *PatchShipNavReq) SetFlightMode(val OptShipNavFlightMode) {
	s.FlightMode = val
}

type PurchaseCargoCreated struct {
	Data PurchaseCargoCreatedData `json:"data"`
}

// GetData returns the value of Data.
func (s *PurchaseCargoCreated) GetData() PurchaseCargoCreatedData {
	return s.Data
}

// SetData sets the value of Data.
func (s *PurchaseCargoCreated) SetData(val PurchaseCargoCreatedData) {
	s.Data = val
}

type PurchaseCargoCreatedData struct {
	Agent       Agent             `json:"agent"`
	Cargo       ShipCargo         `json:"cargo"`
	Transaction MarketTransaction `json:"transaction"`
}

// GetAgent returns the value of Agent.
func (s *PurchaseCargoCreatedData) GetAgent() Agent {
	return s.Agent
}

// GetCargo returns the value of Cargo.
func (s *PurchaseCargoCreatedData) GetCargo() ShipCargo {
	return s.Cargo
}

// GetTransaction returns the value of Transaction.
func (s *PurchaseCargoCreatedData) GetTransaction() MarketTransaction {
	return s.Transaction
}

// SetAgent sets the value of Agent.
func (s *PurchaseCargoCreatedData) SetAgent(val Agent) {
	s.Agent = val
}

// SetCargo sets the value of Cargo.
func (s *PurchaseCargoCreatedData) SetCargo(val ShipCargo) {
	s.Cargo = val
}

// SetTransaction sets the value of Transaction.
func (s *PurchaseCargoCreatedData) SetTransaction(val MarketTransaction) {
	s.Transaction = val
}

type PurchaseCargoReq struct {
	Symbol TradeSymbol `json:"symbol"`
	// Amounts of units to purchase.
	Units int `json:"units"`
}

// GetSymbol returns the value of Symbol.
func (s *PurchaseCargoReq) GetSymbol() TradeSymbol {
	return s.Symbol
}

// GetUnits returns the value of Units.
func (s *PurchaseCargoReq) GetUnits() int {
	return s.Units
}

// SetSymbol sets the value of Symbol.
func (s *PurchaseCargoReq) SetSymbol(val TradeSymbol) {
	s.Symbol = val
}

// SetUnits sets the value of Units.
func (s *PurchaseCargoReq) SetUnits(val int) {
	s.Units = val
}

type PurchaseShipCreated struct {
	Data PurchaseShipCreatedData `json:"data"`
}

// GetData returns the value of Data.
func (s *PurchaseShipCreated) GetData() PurchaseShipCreatedData {
	return s.Data
}

// SetData sets the value of Data.
func (s *PurchaseShipCreated) SetData(val PurchaseShipCreatedData) {
	s.Data = val
}

type PurchaseShipCreatedData struct {
	Agent       Agent               `json:"agent"`
	Ship        Ship                `json:"ship"`
	Transaction ShipyardTransaction `json:"transaction"`
}

// GetAgent returns the value of Agent.
func (s *PurchaseShipCreatedData) GetAgent() Agent {
	return s.Agent
}

// GetShip returns the value of Ship.
func (s *PurchaseShipCreatedData) GetShip() Ship {
	return s.Ship
}

// GetTransaction returns the value of Transaction.
func (s *PurchaseShipCreatedData) GetTransaction() ShipyardTransaction {
	return s.Transaction
}

// SetAgent sets the value of Agent.
func (s *PurchaseShipCreatedData) SetAgent(val Agent) {
	s.Agent = val
}

// SetShip sets the value of Ship.
func (s *PurchaseShipCreatedData) SetShip(val Ship) {
	s.Ship = val
}

// SetTransaction sets the value of Transaction.
func (s *PurchaseShipCreatedData) SetTransaction(val ShipyardTransaction) {
	s.Transaction = val
}

type PurchaseShipReq struct {
	ShipType ShipType `json:"shipType"`
	// The symbol of the waypoint you want to purchase the ship at.
	WaypointSymbol string `json:"waypointSymbol"`
}

// GetShipType returns the value of ShipType.
func (s *PurchaseShipReq) GetShipType() ShipType {
	return s.ShipType
}

// GetWaypointSymbol returns the value of WaypointSymbol.
func (s *PurchaseShipReq) GetWaypointSymbol() string {
	return s.WaypointSymbol
}

// SetShipType sets the value of ShipType.
func (s *PurchaseShipReq) SetShipType(val ShipType) {
	s.ShipType = val
}

// SetWaypointSymbol sets the value of WaypointSymbol.
func (s *PurchaseShipReq) SetWaypointSymbol(val string) {
	s.WaypointSymbol = val
}

type RefuelShipOK struct {
	Data RefuelShipOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *RefuelShipOK) GetData() RefuelShipOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *RefuelShipOK) SetData(val RefuelShipOKData) {
	s.Data = val
}

type RefuelShipOKData struct {
	Agent       Agent             `json:"agent"`
	Fuel        ShipFuel          `json:"fuel"`
	Transaction MarketTransaction `json:"transaction"`
}

// GetAgent returns the value of Agent.
func (s *RefuelShipOKData) GetAgent() Agent {
	return s.Agent
}

// GetFuel returns the value of Fuel.
func (s *RefuelShipOKData) GetFuel() ShipFuel {
	return s.Fuel
}

// GetTransaction returns the value of Transaction.
func (s *RefuelShipOKData) GetTransaction() MarketTransaction {
	return s.Transaction
}

// SetAgent sets the value of Agent.
func (s *RefuelShipOKData) SetAgent(val Agent) {
	s.Agent = val
}

// SetFuel sets the value of Fuel.
func (s *RefuelShipOKData) SetFuel(val ShipFuel) {
	s.Fuel = val
}

// SetTransaction sets the value of Transaction.
func (s *RefuelShipOKData) SetTransaction(val MarketTransaction) {
	s.Transaction = val
}

type RefuelShipReq struct {
	// The amount of fuel to fill in the ship's tanks. When not specified, the ship will be refueled to
	// its maximum fuel capacity. If the amount specified is greater than the ship's remaining capacity,
	// the ship will only be refueled to its maximum fuel capacity. The amount specified is not in market
	// units but in ship fuel units.
	Units OptInt `json:"units"`
	// Wether to use the FUEL thats in your cargo or not. Default: false.
	FromCargo OptBool `json:"fromCargo"`
}

// GetUnits returns the value of Units.
func (s *RefuelShipReq) GetUnits() OptInt {
	return s.Units
}

// GetFromCargo returns the value of FromCargo.
func (s *RefuelShipReq) GetFromCargo() OptBool {
	return s.FromCargo
}

// SetUnits sets the value of Units.
func (s *RefuelShipReq) SetUnits(val OptInt) {
	s.Units = val
}

// SetFromCargo sets the value of FromCargo.
func (s *RefuelShipReq) SetFromCargo(val OptBool) {
	s.FromCargo = val
}

type RegisterCreated struct {
	Data RegisterCreatedData `json:"data"`
}

// GetData returns the value of Data.
func (s *RegisterCreated) GetData() RegisterCreatedData {
	return s.Data
}

// SetData sets the value of Data.
func (s *RegisterCreated) SetData(val RegisterCreatedData) {
	s.Data = val
}

type RegisterCreatedData struct {
	Agent    Agent    `json:"agent"`
	Contract Contract `json:"contract"`
	Faction  Faction  `json:"faction"`
	Ship     Ship     `json:"ship"`
	// A Bearer token for accessing secured API endpoints.
	Token string `json:"token"`
}

// GetAgent returns the value of Agent.
func (s *RegisterCreatedData) GetAgent() Agent {
	return s.Agent
}

// GetContract returns the value of Contract.
func (s *RegisterCreatedData) GetContract() Contract {
	return s.Contract
}

// GetFaction returns the value of Faction.
func (s *RegisterCreatedData) GetFaction() Faction {
	return s.Faction
}

// GetShip returns the value of Ship.
func (s *RegisterCreatedData) GetShip() Ship {
	return s.Ship
}

// GetToken returns the value of Token.
func (s *RegisterCreatedData) GetToken() string {
	return s.Token
}

// SetAgent sets the value of Agent.
func (s *RegisterCreatedData) SetAgent(val Agent) {
	s.Agent = val
}

// SetContract sets the value of Contract.
func (s *RegisterCreatedData) SetContract(val Contract) {
	s.Contract = val
}

// SetFaction sets the value of Faction.
func (s *RegisterCreatedData) SetFaction(val Faction) {
	s.Faction = val
}

// SetShip sets the value of Ship.
func (s *RegisterCreatedData) SetShip(val Ship) {
	s.Ship = val
}

// SetToken sets the value of Token.
func (s *RegisterCreatedData) SetToken(val string) {
	s.Token = val
}

type RegisterReq struct {
	Faction FactionSymbol `json:"faction"`
	// Your desired agent symbol. This will be a unique name used to represent your agent, and will be
	// the prefix for your ships.
	Symbol string `json:"symbol"`
	// Your email address. This is used if you reserved your call sign between resets.
	Email OptString `json:"email"`
}

// GetFaction returns the value of Faction.
func (s *RegisterReq) GetFaction() FactionSymbol {
	return s.Faction
}

// GetSymbol returns the value of Symbol.
func (s *RegisterReq) GetSymbol() string {
	return s.Symbol
}

// GetEmail returns the value of Email.
func (s *RegisterReq) GetEmail() OptString {
	return s.Email
}

// SetFaction sets the value of Faction.
func (s *RegisterReq) SetFaction(val FactionSymbol) {
	s.Faction = val
}

// SetSymbol sets the value of Symbol.
func (s *RegisterReq) SetSymbol(val string) {
	s.Symbol = val
}

// SetEmail sets the value of Email.
func (s *RegisterReq) SetEmail(val OptString) {
	s.Email = val
}

type RemoveMountCreated struct {
	Data RemoveMountCreatedData `json:"data"`
}

// GetData returns the value of Data.
func (s *RemoveMountCreated) GetData() RemoveMountCreatedData {
	return s.Data
}

// SetData sets the value of Data.
func (s *RemoveMountCreated) SetData(val RemoveMountCreatedData) {
	s.Data = val
}

type RemoveMountCreatedData struct {
	Agent Agent `json:"agent"`
	// List of installed mounts after the removal of the selected mount.
	Mounts      []ShipMount                 `json:"mounts"`
	Cargo       ShipCargo                   `json:"cargo"`
	Transaction ShipModificationTransaction `json:"transaction"`
}

// GetAgent returns the value of Agent.
func (s *RemoveMountCreatedData) GetAgent() Agent {
	return s.Agent
}

// GetMounts returns the value of Mounts.
func (s *RemoveMountCreatedData) GetMounts() []ShipMount {
	return s.Mounts
}

// GetCargo returns the value of Cargo.
func (s *RemoveMountCreatedData) GetCargo() ShipCargo {
	return s.Cargo
}

// GetTransaction returns the value of Transaction.
func (s *RemoveMountCreatedData) GetTransaction() ShipModificationTransaction {
	return s.Transaction
}

// SetAgent sets the value of Agent.
func (s *RemoveMountCreatedData) SetAgent(val Agent) {
	s.Agent = val
}

// SetMounts sets the value of Mounts.
func (s *RemoveMountCreatedData) SetMounts(val []ShipMount) {
	s.Mounts = val
}

// SetCargo sets the value of Cargo.
func (s *RemoveMountCreatedData) SetCargo(val ShipCargo) {
	s.Cargo = val
}

// SetTransaction sets the value of Transaction.
func (s *RemoveMountCreatedData) SetTransaction(val ShipModificationTransaction) {
	s.Transaction = val
}

type RemoveMountReq struct {
	// The symbol of the mount to remove.
	Symbol string `json:"symbol"`
}

// GetSymbol returns the value of Symbol.
func (s *RemoveMountReq) GetSymbol() string {
	return s.Symbol
}

// SetSymbol sets the value of Symbol.
func (s *RemoveMountReq) SetSymbol(val string) {
	s.Symbol = val
}

type RepairShipOK struct {
	Data RepairShipOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *RepairShipOK) GetData() RepairShipOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *RepairShipOK) SetData(val RepairShipOKData) {
	s.Data = val
}

type RepairShipOKData struct {
	Agent       Agent             `json:"agent"`
	Ship        Ship              `json:"ship"`
	Transaction RepairTransaction `json:"transaction"`
}

// GetAgent returns the value of Agent.
func (s *RepairShipOKData) GetAgent() Agent {
	return s.Agent
}

// GetShip returns the value of Ship.
func (s *RepairShipOKData) GetShip() Ship {
	return s.Ship
}

// GetTransaction returns the value of Transaction.
func (s *RepairShipOKData) GetTransaction() RepairTransaction {
	return s.Transaction
}

// SetAgent sets the value of Agent.
func (s *RepairShipOKData) SetAgent(val Agent) {
	s.Agent = val
}

// SetShip sets the value of Ship.
func (s *RepairShipOKData) SetShip(val Ship) {
	s.Ship = val
}

// SetTransaction sets the value of Transaction.
func (s *RepairShipOKData) SetTransaction(val RepairTransaction) {
	s.Transaction = val
}

// Result of a repair transaction.
// Ref: #/components/schemas/RepairTransaction
type RepairTransaction struct {
	WaypointSymbol WaypointSymbol `json:"waypointSymbol"`
	// The symbol of the ship.
	ShipSymbol string `json:"shipSymbol"`
	// The total price of the transaction.
	TotalPrice int `json:"totalPrice"`
	// The timestamp of the transaction.
	Timestamp time.Time `json:"timestamp"`
}

// GetWaypointSymbol returns the value of WaypointSymbol.
func (s *RepairTransaction) GetWaypointSymbol() WaypointSymbol {
	return s.WaypointSymbol
}

// GetShipSymbol returns the value of ShipSymbol.
func (s *RepairTransaction) GetShipSymbol() string {
	return s.ShipSymbol
}

// GetTotalPrice returns the value of TotalPrice.
func (s *RepairTransaction) GetTotalPrice() int {
	return s.TotalPrice
}

// GetTimestamp returns the value of Timestamp.
func (s *RepairTransaction) GetTimestamp() time.Time {
	return s.Timestamp
}

// SetWaypointSymbol sets the value of WaypointSymbol.
func (s *RepairTransaction) SetWaypointSymbol(val WaypointSymbol) {
	s.WaypointSymbol = val
}

// SetShipSymbol sets the value of ShipSymbol.
func (s *RepairTransaction) SetShipSymbol(val string) {
	s.ShipSymbol = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *RepairTransaction) SetTotalPrice(val int) {
	s.TotalPrice = val
}

// SetTimestamp sets the value of Timestamp.
func (s *RepairTransaction) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// The ship that was scanned. Details include information about the ship that could be detected by
// the scanner.
// Ref: #/components/schemas/ScannedShip
type ScannedShip struct {
	// The globally unique identifier of the ship.
	Symbol       string           `json:"symbol"`
	Registration ShipRegistration `json:"registration"`
	Nav          ShipNav          `json:"nav"`
	// The frame of the ship.
	Frame OptScannedShipFrame `json:"frame"`
	// The reactor of the ship.
	Reactor OptScannedShipReactor `json:"reactor"`
	// The engine of the ship.
	Engine ScannedShipEngine `json:"engine"`
	// List of mounts installed in the ship.
	Mounts []ScannedShipMountsItem `json:"mounts"`
}

// GetSymbol returns the value of Symbol.
func (s *ScannedShip) GetSymbol() string {
	return s.Symbol
}

// GetRegistration returns the value of Registration.
func (s *ScannedShip) GetRegistration() ShipRegistration {
	return s.Registration
}

// GetNav returns the value of Nav.
func (s *ScannedShip) GetNav() ShipNav {
	return s.Nav
}

// GetFrame returns the value of Frame.
func (s *ScannedShip) GetFrame() OptScannedShipFrame {
	return s.Frame
}

// GetReactor returns the value of Reactor.
func (s *ScannedShip) GetReactor() OptScannedShipReactor {
	return s.Reactor
}

// GetEngine returns the value of Engine.
func (s *ScannedShip) GetEngine() ScannedShipEngine {
	return s.Engine
}

// GetMounts returns the value of Mounts.
func (s *ScannedShip) GetMounts() []ScannedShipMountsItem {
	return s.Mounts
}

// SetSymbol sets the value of Symbol.
func (s *ScannedShip) SetSymbol(val string) {
	s.Symbol = val
}

// SetRegistration sets the value of Registration.
func (s *ScannedShip) SetRegistration(val ShipRegistration) {
	s.Registration = val
}

// SetNav sets the value of Nav.
func (s *ScannedShip) SetNav(val ShipNav) {
	s.Nav = val
}

// SetFrame sets the value of Frame.
func (s *ScannedShip) SetFrame(val OptScannedShipFrame) {
	s.Frame = val
}

// SetReactor sets the value of Reactor.
func (s *ScannedShip) SetReactor(val OptScannedShipReactor) {
	s.Reactor = val
}

// SetEngine sets the value of Engine.
func (s *ScannedShip) SetEngine(val ScannedShipEngine) {
	s.Engine = val
}

// SetMounts sets the value of Mounts.
func (s *ScannedShip) SetMounts(val []ScannedShipMountsItem) {
	s.Mounts = val
}

// The engine of the ship.
type ScannedShipEngine struct {
	// The symbol of the engine.
	Symbol string `json:"symbol"`
}

// GetSymbol returns the value of Symbol.
func (s *ScannedShipEngine) GetSymbol() string {
	return s.Symbol
}

// SetSymbol sets the value of Symbol.
func (s *ScannedShipEngine) SetSymbol(val string) {
	s.Symbol = val
}

// The frame of the ship.
type ScannedShipFrame struct {
	// The symbol of the frame.
	Symbol string `json:"symbol"`
}

// GetSymbol returns the value of Symbol.
func (s *ScannedShipFrame) GetSymbol() string {
	return s.Symbol
}

// SetSymbol sets the value of Symbol.
func (s *ScannedShipFrame) SetSymbol(val string) {
	s.Symbol = val
}

// A mount on the ship.
type ScannedShipMountsItem struct {
	// The symbol of the mount.
	Symbol string `json:"symbol"`
}

// GetSymbol returns the value of Symbol.
func (s *ScannedShipMountsItem) GetSymbol() string {
	return s.Symbol
}

// SetSymbol sets the value of Symbol.
func (s *ScannedShipMountsItem) SetSymbol(val string) {
	s.Symbol = val
}

// The reactor of the ship.
type ScannedShipReactor struct {
	// The symbol of the reactor.
	Symbol string `json:"symbol"`
}

// GetSymbol returns the value of Symbol.
func (s *ScannedShipReactor) GetSymbol() string {
	return s.Symbol
}

// SetSymbol sets the value of Symbol.
func (s *ScannedShipReactor) SetSymbol(val string) {
	s.Symbol = val
}

// Details of a system was that scanned.
// Ref: #/components/schemas/ScannedSystem
type ScannedSystem struct {
	// Symbol of the system.
	Symbol string `json:"symbol"`
	// Symbol of the system's sector.
	SectorSymbol string     `json:"sectorSymbol"`
	Type         SystemType `json:"type"`
	// Position in the universe in the x axis.
	X int `json:"x"`
	// Position in the universe in the y axis.
	Y int `json:"y"`
	// The system's distance from the scanning ship.
	Distance int `json:"distance"`
}

// GetSymbol returns the value of Symbol.
func (s *ScannedSystem) GetSymbol() string {
	return s.Symbol
}

// GetSectorSymbol returns the value of SectorSymbol.
func (s *ScannedSystem) GetSectorSymbol() string {
	return s.SectorSymbol
}

// GetType returns the value of Type.
func (s *ScannedSystem) GetType() SystemType {
	return s.Type
}

// GetX returns the value of X.
func (s *ScannedSystem) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *ScannedSystem) GetY() int {
	return s.Y
}

// GetDistance returns the value of Distance.
func (s *ScannedSystem) GetDistance() int {
	return s.Distance
}

// SetSymbol sets the value of Symbol.
func (s *ScannedSystem) SetSymbol(val string) {
	s.Symbol = val
}

// SetSectorSymbol sets the value of SectorSymbol.
func (s *ScannedSystem) SetSectorSymbol(val string) {
	s.SectorSymbol = val
}

// SetType sets the value of Type.
func (s *ScannedSystem) SetType(val SystemType) {
	s.Type = val
}

// SetX sets the value of X.
func (s *ScannedSystem) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *ScannedSystem) SetY(val int) {
	s.Y = val
}

// SetDistance sets the value of Distance.
func (s *ScannedSystem) SetDistance(val int) {
	s.Distance = val
}

// A waypoint that was scanned by a ship.
// Ref: #/components/schemas/ScannedWaypoint
type ScannedWaypoint struct {
	Symbol       WaypointSymbol `json:"symbol"`
	Type         WaypointType   `json:"type"`
	SystemSymbol SystemSymbol   `json:"systemSymbol"`
	// Position in the universe in the x axis.
	X int `json:"x"`
	// Position in the universe in the y axis.
	Y int `json:"y"`
	// List of waypoints that orbit this waypoint.
	Orbitals []WaypointOrbital  `json:"orbitals"`
	Faction  OptWaypointFaction `json:"faction"`
	// The traits of the waypoint.
	Traits []WaypointTrait `json:"traits"`
	Chart  OptChart        `json:"chart"`
}

// GetSymbol returns the value of Symbol.
func (s *ScannedWaypoint) GetSymbol() WaypointSymbol {
	return s.Symbol
}

// GetType returns the value of Type.
func (s *ScannedWaypoint) GetType() WaypointType {
	return s.Type
}

// GetSystemSymbol returns the value of SystemSymbol.
func (s *ScannedWaypoint) GetSystemSymbol() SystemSymbol {
	return s.SystemSymbol
}

// GetX returns the value of X.
func (s *ScannedWaypoint) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *ScannedWaypoint) GetY() int {
	return s.Y
}

// GetOrbitals returns the value of Orbitals.
func (s *ScannedWaypoint) GetOrbitals() []WaypointOrbital {
	return s.Orbitals
}

// GetFaction returns the value of Faction.
func (s *ScannedWaypoint) GetFaction() OptWaypointFaction {
	return s.Faction
}

// GetTraits returns the value of Traits.
func (s *ScannedWaypoint) GetTraits() []WaypointTrait {
	return s.Traits
}

// GetChart returns the value of Chart.
func (s *ScannedWaypoint) GetChart() OptChart {
	return s.Chart
}

// SetSymbol sets the value of Symbol.
func (s *ScannedWaypoint) SetSymbol(val WaypointSymbol) {
	s.Symbol = val
}

// SetType sets the value of Type.
func (s *ScannedWaypoint) SetType(val WaypointType) {
	s.Type = val
}

// SetSystemSymbol sets the value of SystemSymbol.
func (s *ScannedWaypoint) SetSystemSymbol(val SystemSymbol) {
	s.SystemSymbol = val
}

// SetX sets the value of X.
func (s *ScannedWaypoint) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *ScannedWaypoint) SetY(val int) {
	s.Y = val
}

// SetOrbitals sets the value of Orbitals.
func (s *ScannedWaypoint) SetOrbitals(val []WaypointOrbital) {
	s.Orbitals = val
}

// SetFaction sets the value of Faction.
func (s *ScannedWaypoint) SetFaction(val OptWaypointFaction) {
	s.Faction = val
}

// SetTraits sets the value of Traits.
func (s *ScannedWaypoint) SetTraits(val []WaypointTrait) {
	s.Traits = val
}

// SetChart sets the value of Chart.
func (s *ScannedWaypoint) SetChart(val OptChart) {
	s.Chart = val
}

type ScrapShipOK struct {
	Data ScrapShipOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *ScrapShipOK) GetData() ScrapShipOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *ScrapShipOK) SetData(val ScrapShipOKData) {
	s.Data = val
}

type ScrapShipOKData struct {
	Agent       Agent            `json:"agent"`
	Transaction ScrapTransaction `json:"transaction"`
}

// GetAgent returns the value of Agent.
func (s *ScrapShipOKData) GetAgent() Agent {
	return s.Agent
}

// GetTransaction returns the value of Transaction.
func (s *ScrapShipOKData) GetTransaction() ScrapTransaction {
	return s.Transaction
}

// SetAgent sets the value of Agent.
func (s *ScrapShipOKData) SetAgent(val Agent) {
	s.Agent = val
}

// SetTransaction sets the value of Transaction.
func (s *ScrapShipOKData) SetTransaction(val ScrapTransaction) {
	s.Transaction = val
}

// Result of a scrap transaction.
// Ref: #/components/schemas/ScrapTransaction
type ScrapTransaction struct {
	WaypointSymbol WaypointSymbol `json:"waypointSymbol"`
	// The symbol of the ship.
	ShipSymbol string `json:"shipSymbol"`
	// The total price of the transaction.
	TotalPrice int `json:"totalPrice"`
	// The timestamp of the transaction.
	Timestamp time.Time `json:"timestamp"`
}

// GetWaypointSymbol returns the value of WaypointSymbol.
func (s *ScrapTransaction) GetWaypointSymbol() WaypointSymbol {
	return s.WaypointSymbol
}

// GetShipSymbol returns the value of ShipSymbol.
func (s *ScrapTransaction) GetShipSymbol() string {
	return s.ShipSymbol
}

// GetTotalPrice returns the value of TotalPrice.
func (s *ScrapTransaction) GetTotalPrice() int {
	return s.TotalPrice
}

// GetTimestamp returns the value of Timestamp.
func (s *ScrapTransaction) GetTimestamp() time.Time {
	return s.Timestamp
}

// SetWaypointSymbol sets the value of WaypointSymbol.
func (s *ScrapTransaction) SetWaypointSymbol(val WaypointSymbol) {
	s.WaypointSymbol = val
}

// SetShipSymbol sets the value of ShipSymbol.
func (s *ScrapTransaction) SetShipSymbol(val string) {
	s.ShipSymbol = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *ScrapTransaction) SetTotalPrice(val int) {
	s.TotalPrice = val
}

// SetTimestamp sets the value of Timestamp.
func (s *ScrapTransaction) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

type SellCargoCreated struct {
	Data SellCargoCreatedData `json:"data"`
}

// GetData returns the value of Data.
func (s *SellCargoCreated) GetData() SellCargoCreatedData {
	return s.Data
}

// SetData sets the value of Data.
func (s *SellCargoCreated) SetData(val SellCargoCreatedData) {
	s.Data = val
}

type SellCargoCreatedData struct {
	Agent       Agent             `json:"agent"`
	Cargo       ShipCargo         `json:"cargo"`
	Transaction MarketTransaction `json:"transaction"`
}

// GetAgent returns the value of Agent.
func (s *SellCargoCreatedData) GetAgent() Agent {
	return s.Agent
}

// GetCargo returns the value of Cargo.
func (s *SellCargoCreatedData) GetCargo() ShipCargo {
	return s.Cargo
}

// GetTransaction returns the value of Transaction.
func (s *SellCargoCreatedData) GetTransaction() MarketTransaction {
	return s.Transaction
}

// SetAgent sets the value of Agent.
func (s *SellCargoCreatedData) SetAgent(val Agent) {
	s.Agent = val
}

// SetCargo sets the value of Cargo.
func (s *SellCargoCreatedData) SetCargo(val ShipCargo) {
	s.Cargo = val
}

// SetTransaction sets the value of Transaction.
func (s *SellCargoCreatedData) SetTransaction(val MarketTransaction) {
	s.Transaction = val
}

type SellCargoReq struct {
	Symbol TradeSymbol `json:"symbol"`
	// Amounts of units to sell of the selected good.
	Units int `json:"units"`
}

// GetSymbol returns the value of Symbol.
func (s *SellCargoReq) GetSymbol() TradeSymbol {
	return s.Symbol
}

// GetUnits returns the value of Units.
func (s *SellCargoReq) GetUnits() int {
	return s.Units
}

// SetSymbol sets the value of Symbol.
func (s *SellCargoReq) SetSymbol(val TradeSymbol) {
	s.Symbol = val
}

// SetUnits sets the value of Units.
func (s *SellCargoReq) SetUnits(val int) {
	s.Units = val
}

// Ship details.
// Ref: #/components/schemas/Ship
type Ship struct {
	// The globally unique identifier of the ship in the following format: `[AGENT_SYMBOL]-[HEX_ID]`.
	Symbol       string           `json:"symbol"`
	Registration ShipRegistration `json:"registration"`
	Nav          ShipNav          `json:"nav"`
	Crew         ShipCrew         `json:"crew"`
	Frame        ShipFrame        `json:"frame"`
	Reactor      ShipReactor      `json:"reactor"`
	Engine       ShipEngine       `json:"engine"`
	Cooldown     Cooldown         `json:"cooldown"`
	// Modules installed in this ship.
	Modules []ShipModule `json:"modules"`
	// Mounts installed in this ship.
	Mounts []ShipMount `json:"mounts"`
	Cargo  ShipCargo   `json:"cargo"`
	Fuel   ShipFuel    `json:"fuel"`
}

// GetSymbol returns the value of Symbol.
func (s *Ship) GetSymbol() string {
	return s.Symbol
}

// GetRegistration returns the value of Registration.
func (s *Ship) GetRegistration() ShipRegistration {
	return s.Registration
}

// GetNav returns the value of Nav.
func (s *Ship) GetNav() ShipNav {
	return s.Nav
}

// GetCrew returns the value of Crew.
func (s *Ship) GetCrew() ShipCrew {
	return s.Crew
}

// GetFrame returns the value of Frame.
func (s *Ship) GetFrame() ShipFrame {
	return s.Frame
}

// GetReactor returns the value of Reactor.
func (s *Ship) GetReactor() ShipReactor {
	return s.Reactor
}

// GetEngine returns the value of Engine.
func (s *Ship) GetEngine() ShipEngine {
	return s.Engine
}

// GetCooldown returns the value of Cooldown.
func (s *Ship) GetCooldown() Cooldown {
	return s.Cooldown
}

// GetModules returns the value of Modules.
func (s *Ship) GetModules() []ShipModule {
	return s.Modules
}

// GetMounts returns the value of Mounts.
func (s *Ship) GetMounts() []ShipMount {
	return s.Mounts
}

// GetCargo returns the value of Cargo.
func (s *Ship) GetCargo() ShipCargo {
	return s.Cargo
}

// GetFuel returns the value of Fuel.
func (s *Ship) GetFuel() ShipFuel {
	return s.Fuel
}

// SetSymbol sets the value of Symbol.
func (s *Ship) SetSymbol(val string) {
	s.Symbol = val
}

// SetRegistration sets the value of Registration.
func (s *Ship) SetRegistration(val ShipRegistration) {
	s.Registration = val
}

// SetNav sets the value of Nav.
func (s *Ship) SetNav(val ShipNav) {
	s.Nav = val
}

// SetCrew sets the value of Crew.
func (s *Ship) SetCrew(val ShipCrew) {
	s.Crew = val
}

// SetFrame sets the value of Frame.
func (s *Ship) SetFrame(val ShipFrame) {
	s.Frame = val
}

// SetReactor sets the value of Reactor.
func (s *Ship) SetReactor(val ShipReactor) {
	s.Reactor = val
}

// SetEngine sets the value of Engine.
func (s *Ship) SetEngine(val ShipEngine) {
	s.Engine = val
}

// SetCooldown sets the value of Cooldown.
func (s *Ship) SetCooldown(val Cooldown) {
	s.Cooldown = val
}

// SetModules sets the value of Modules.
func (s *Ship) SetModules(val []ShipModule) {
	s.Modules = val
}

// SetMounts sets the value of Mounts.
func (s *Ship) SetMounts(val []ShipMount) {
	s.Mounts = val
}

// SetCargo sets the value of Cargo.
func (s *Ship) SetCargo(val ShipCargo) {
	s.Cargo = val
}

// SetFuel sets the value of Fuel.
func (s *Ship) SetFuel(val ShipFuel) {
	s.Fuel = val
}

// Ship cargo details.
// Ref: #/components/schemas/ShipCargo
type ShipCargo struct {
	// The max number of items that can be stored in the cargo hold.
	Capacity int `json:"capacity"`
	// The number of items currently stored in the cargo hold.
	Units int `json:"units"`
	// The items currently in the cargo hold.
	Inventory []ShipCargoItem `json:"inventory"`
}

// GetCapacity returns the value of Capacity.
func (s *ShipCargo) GetCapacity() int {
	return s.Capacity
}

// GetUnits returns the value of Units.
func (s *ShipCargo) GetUnits() int {
	return s.Units
}

// GetInventory returns the value of Inventory.
func (s *ShipCargo) GetInventory() []ShipCargoItem {
	return s.Inventory
}

// SetCapacity sets the value of Capacity.
func (s *ShipCargo) SetCapacity(val int) {
	s.Capacity = val
}

// SetUnits sets the value of Units.
func (s *ShipCargo) SetUnits(val int) {
	s.Units = val
}

// SetInventory sets the value of Inventory.
func (s *ShipCargo) SetInventory(val []ShipCargoItem) {
	s.Inventory = val
}

// The type of cargo item and the number of units.
// Ref: #/components/schemas/ShipCargoItem
type ShipCargoItem struct {
	Symbol TradeSymbol `json:"symbol"`
	// The name of the cargo item type.
	Name string `json:"name"`
	// The description of the cargo item type.
	Description string `json:"description"`
	// The number of units of the cargo item.
	Units int `json:"units"`
}

// GetSymbol returns the value of Symbol.
func (s *ShipCargoItem) GetSymbol() TradeSymbol {
	return s.Symbol
}

// GetName returns the value of Name.
func (s *ShipCargoItem) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ShipCargoItem) GetDescription() string {
	return s.Description
}

// GetUnits returns the value of Units.
func (s *ShipCargoItem) GetUnits() int {
	return s.Units
}

// SetSymbol sets the value of Symbol.
func (s *ShipCargoItem) SetSymbol(val TradeSymbol) {
	s.Symbol = val
}

// SetName sets the value of Name.
func (s *ShipCargoItem) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ShipCargoItem) SetDescription(val string) {
	s.Description = val
}

// SetUnits sets the value of Units.
func (s *ShipCargoItem) SetUnits(val int) {
	s.Units = val
}

type ShipComponentCondition float64

type ShipComponentIntegrity float64

// An event that represents damage or wear to a ship's reactor, frame, or engine, reducing the
// condition of the ship.
// Ref: #/components/schemas/ShipConditionEvent
type ShipConditionEvent struct {
	Symbol    ShipConditionEventSymbol    `json:"symbol"`
	Component ShipConditionEventComponent `json:"component"`
	// The name of the event.
	Name string `json:"name"`
	// A description of the event.
	Description string `json:"description"`
}

// GetSymbol returns the value of Symbol.
func (s *ShipConditionEvent) GetSymbol() ShipConditionEventSymbol {
	return s.Symbol
}

// GetComponent returns the value of Component.
func (s *ShipConditionEvent) GetComponent() ShipConditionEventComponent {
	return s.Component
}

// GetName returns the value of Name.
func (s *ShipConditionEvent) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ShipConditionEvent) GetDescription() string {
	return s.Description
}

// SetSymbol sets the value of Symbol.
func (s *ShipConditionEvent) SetSymbol(val ShipConditionEventSymbol) {
	s.Symbol = val
}

// SetComponent sets the value of Component.
func (s *ShipConditionEvent) SetComponent(val ShipConditionEventComponent) {
	s.Component = val
}

// SetName sets the value of Name.
func (s *ShipConditionEvent) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ShipConditionEvent) SetDescription(val string) {
	s.Description = val
}

type ShipConditionEventComponent string

const (
	ShipConditionEventComponentFRAME   ShipConditionEventComponent = "FRAME"
	ShipConditionEventComponentREACTOR ShipConditionEventComponent = "REACTOR"
	ShipConditionEventComponentENGINE  ShipConditionEventComponent = "ENGINE"
)

// AllValues returns all ShipConditionEventComponent values.
func (ShipConditionEventComponent) AllValues() []ShipConditionEventComponent {
	return []ShipConditionEventComponent{
		ShipConditionEventComponentFRAME,
		ShipConditionEventComponentREACTOR,
		ShipConditionEventComponentENGINE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShipConditionEventComponent) MarshalText() ([]byte, error) {
	switch s {
	case ShipConditionEventComponentFRAME:
		return []byte(s), nil
	case ShipConditionEventComponentREACTOR:
		return []byte(s), nil
	case ShipConditionEventComponentENGINE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShipConditionEventComponent) UnmarshalText(data []byte) error {
	switch ShipConditionEventComponent(data) {
	case ShipConditionEventComponentFRAME:
		*s = ShipConditionEventComponentFRAME
		return nil
	case ShipConditionEventComponentREACTOR:
		*s = ShipConditionEventComponentREACTOR
		return nil
	case ShipConditionEventComponentENGINE:
		*s = ShipConditionEventComponentENGINE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ShipConditionEventSymbol string

const (
	ShipConditionEventSymbolREACTOROVERLOAD                  ShipConditionEventSymbol = "REACTOR_OVERLOAD"
	ShipConditionEventSymbolENERGYSPIKEFROMMINERAL           ShipConditionEventSymbol = "ENERGY_SPIKE_FROM_MINERAL"
	ShipConditionEventSymbolSOLARFLAREINTERFERENCE           ShipConditionEventSymbol = "SOLAR_FLARE_INTERFERENCE"
	ShipConditionEventSymbolCOOLANTLEAK                      ShipConditionEventSymbol = "COOLANT_LEAK"
	ShipConditionEventSymbolPOWERDISTRIBUTIONFLUCTUATION     ShipConditionEventSymbol = "POWER_DISTRIBUTION_FLUCTUATION"
	ShipConditionEventSymbolMAGNETICFIELDDISRUPTION          ShipConditionEventSymbol = "MAGNETIC_FIELD_DISRUPTION"
	ShipConditionEventSymbolHULLMICROMETEORITESTRIKES        ShipConditionEventSymbol = "HULL_MICROMETEORITE_STRIKES"
	ShipConditionEventSymbolSTRUCTURALSTRESSFRACTURES        ShipConditionEventSymbol = "STRUCTURAL_STRESS_FRACTURES"
	ShipConditionEventSymbolCORROSIVEMINERALCONTAMINATION    ShipConditionEventSymbol = "CORROSIVE_MINERAL_CONTAMINATION"
	ShipConditionEventSymbolTHERMALEXPANSIONMISMATCH         ShipConditionEventSymbol = "THERMAL_EXPANSION_MISMATCH"
	ShipConditionEventSymbolVIBRATIONDAMAGEFROMDRILLING      ShipConditionEventSymbol = "VIBRATION_DAMAGE_FROM_DRILLING"
	ShipConditionEventSymbolELECTROMAGNETICFIELDINTERFERENCE ShipConditionEventSymbol = "ELECTROMAGNETIC_FIELD_INTERFERENCE"
	ShipConditionEventSymbolIMPACTWITHEXTRACTEDDEBRIS        ShipConditionEventSymbol = "IMPACT_WITH_EXTRACTED_DEBRIS"
	ShipConditionEventSymbolFUELEFFICIENCYDEGRADATION        ShipConditionEventSymbol = "FUEL_EFFICIENCY_DEGRADATION"
	ShipConditionEventSymbolCOOLANTSYSTEMAGEING              ShipConditionEventSymbol = "COOLANT_SYSTEM_AGEING"
	ShipConditionEventSymbolDUSTMICROABRASIONS               ShipConditionEventSymbol = "DUST_MICROABRASIONS"
	ShipConditionEventSymbolTHRUSTERNOZZLEWEAR               ShipConditionEventSymbol = "THRUSTER_NOZZLE_WEAR"
	ShipConditionEventSymbolEXHAUSTPORTCLOGGING              ShipConditionEventSymbol = "EXHAUST_PORT_CLOGGING"
	ShipConditionEventSymbolBEARINGLUBRICATIONFADE           ShipConditionEventSymbol = "BEARING_LUBRICATION_FADE"
	ShipConditionEventSymbolSENSORCALIBRATIONDRIFT           ShipConditionEventSymbol = "SENSOR_CALIBRATION_DRIFT"
	ShipConditionEventSymbolHULLMICROMETEORITEDAMAGE         ShipConditionEventSymbol = "HULL_MICROMETEORITE_DAMAGE"
	ShipConditionEventSymbolSPACEDEBRISCOLLISION             ShipConditionEventSymbol = "SPACE_DEBRIS_COLLISION"
	ShipConditionEventSymbolTHERMALSTRESS                    ShipConditionEventSymbol = "THERMAL_STRESS"
	ShipConditionEventSymbolVIBRATIONOVERLOAD                ShipConditionEventSymbol = "VIBRATION_OVERLOAD"
	ShipConditionEventSymbolPRESSUREDIFFERENTIALSTRESS       ShipConditionEventSymbol = "PRESSURE_DIFFERENTIAL_STRESS"
	ShipConditionEventSymbolELECTROMAGNETICSURGEEFFECTS      ShipConditionEventSymbol = "ELECTROMAGNETIC_SURGE_EFFECTS"
	ShipConditionEventSymbolATMOSPHERICENTRYHEAT             ShipConditionEventSymbol = "ATMOSPHERIC_ENTRY_HEAT"
)

// AllValues returns all ShipConditionEventSymbol values.
func (ShipConditionEventSymbol) AllValues() []ShipConditionEventSymbol {
	return []ShipConditionEventSymbol{
		ShipConditionEventSymbolREACTOROVERLOAD,
		ShipConditionEventSymbolENERGYSPIKEFROMMINERAL,
		ShipConditionEventSymbolSOLARFLAREINTERFERENCE,
		ShipConditionEventSymbolCOOLANTLEAK,
		ShipConditionEventSymbolPOWERDISTRIBUTIONFLUCTUATION,
		ShipConditionEventSymbolMAGNETICFIELDDISRUPTION,
		ShipConditionEventSymbolHULLMICROMETEORITESTRIKES,
		ShipConditionEventSymbolSTRUCTURALSTRESSFRACTURES,
		ShipConditionEventSymbolCORROSIVEMINERALCONTAMINATION,
		ShipConditionEventSymbolTHERMALEXPANSIONMISMATCH,
		ShipConditionEventSymbolVIBRATIONDAMAGEFROMDRILLING,
		ShipConditionEventSymbolELECTROMAGNETICFIELDINTERFERENCE,
		ShipConditionEventSymbolIMPACTWITHEXTRACTEDDEBRIS,
		ShipConditionEventSymbolFUELEFFICIENCYDEGRADATION,
		ShipConditionEventSymbolCOOLANTSYSTEMAGEING,
		ShipConditionEventSymbolDUSTMICROABRASIONS,
		ShipConditionEventSymbolTHRUSTERNOZZLEWEAR,
		ShipConditionEventSymbolEXHAUSTPORTCLOGGING,
		ShipConditionEventSymbolBEARINGLUBRICATIONFADE,
		ShipConditionEventSymbolSENSORCALIBRATIONDRIFT,
		ShipConditionEventSymbolHULLMICROMETEORITEDAMAGE,
		ShipConditionEventSymbolSPACEDEBRISCOLLISION,
		ShipConditionEventSymbolTHERMALSTRESS,
		ShipConditionEventSymbolVIBRATIONOVERLOAD,
		ShipConditionEventSymbolPRESSUREDIFFERENTIALSTRESS,
		ShipConditionEventSymbolELECTROMAGNETICSURGEEFFECTS,
		ShipConditionEventSymbolATMOSPHERICENTRYHEAT,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShipConditionEventSymbol) MarshalText() ([]byte, error) {
	switch s {
	case ShipConditionEventSymbolREACTOROVERLOAD:
		return []byte(s), nil
	case ShipConditionEventSymbolENERGYSPIKEFROMMINERAL:
		return []byte(s), nil
	case ShipConditionEventSymbolSOLARFLAREINTERFERENCE:
		return []byte(s), nil
	case ShipConditionEventSymbolCOOLANTLEAK:
		return []byte(s), nil
	case ShipConditionEventSymbolPOWERDISTRIBUTIONFLUCTUATION:
		return []byte(s), nil
	case ShipConditionEventSymbolMAGNETICFIELDDISRUPTION:
		return []byte(s), nil
	case ShipConditionEventSymbolHULLMICROMETEORITESTRIKES:
		return []byte(s), nil
	case ShipConditionEventSymbolSTRUCTURALSTRESSFRACTURES:
		return []byte(s), nil
	case ShipConditionEventSymbolCORROSIVEMINERALCONTAMINATION:
		return []byte(s), nil
	case ShipConditionEventSymbolTHERMALEXPANSIONMISMATCH:
		return []byte(s), nil
	case ShipConditionEventSymbolVIBRATIONDAMAGEFROMDRILLING:
		return []byte(s), nil
	case ShipConditionEventSymbolELECTROMAGNETICFIELDINTERFERENCE:
		return []byte(s), nil
	case ShipConditionEventSymbolIMPACTWITHEXTRACTEDDEBRIS:
		return []byte(s), nil
	case ShipConditionEventSymbolFUELEFFICIENCYDEGRADATION:
		return []byte(s), nil
	case ShipConditionEventSymbolCOOLANTSYSTEMAGEING:
		return []byte(s), nil
	case ShipConditionEventSymbolDUSTMICROABRASIONS:
		return []byte(s), nil
	case ShipConditionEventSymbolTHRUSTERNOZZLEWEAR:
		return []byte(s), nil
	case ShipConditionEventSymbolEXHAUSTPORTCLOGGING:
		return []byte(s), nil
	case ShipConditionEventSymbolBEARINGLUBRICATIONFADE:
		return []byte(s), nil
	case ShipConditionEventSymbolSENSORCALIBRATIONDRIFT:
		return []byte(s), nil
	case ShipConditionEventSymbolHULLMICROMETEORITEDAMAGE:
		return []byte(s), nil
	case ShipConditionEventSymbolSPACEDEBRISCOLLISION:
		return []byte(s), nil
	case ShipConditionEventSymbolTHERMALSTRESS:
		return []byte(s), nil
	case ShipConditionEventSymbolVIBRATIONOVERLOAD:
		return []byte(s), nil
	case ShipConditionEventSymbolPRESSUREDIFFERENTIALSTRESS:
		return []byte(s), nil
	case ShipConditionEventSymbolELECTROMAGNETICSURGEEFFECTS:
		return []byte(s), nil
	case ShipConditionEventSymbolATMOSPHERICENTRYHEAT:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShipConditionEventSymbol) UnmarshalText(data []byte) error {
	switch ShipConditionEventSymbol(data) {
	case ShipConditionEventSymbolREACTOROVERLOAD:
		*s = ShipConditionEventSymbolREACTOROVERLOAD
		return nil
	case ShipConditionEventSymbolENERGYSPIKEFROMMINERAL:
		*s = ShipConditionEventSymbolENERGYSPIKEFROMMINERAL
		return nil
	case ShipConditionEventSymbolSOLARFLAREINTERFERENCE:
		*s = ShipConditionEventSymbolSOLARFLAREINTERFERENCE
		return nil
	case ShipConditionEventSymbolCOOLANTLEAK:
		*s = ShipConditionEventSymbolCOOLANTLEAK
		return nil
	case ShipConditionEventSymbolPOWERDISTRIBUTIONFLUCTUATION:
		*s = ShipConditionEventSymbolPOWERDISTRIBUTIONFLUCTUATION
		return nil
	case ShipConditionEventSymbolMAGNETICFIELDDISRUPTION:
		*s = ShipConditionEventSymbolMAGNETICFIELDDISRUPTION
		return nil
	case ShipConditionEventSymbolHULLMICROMETEORITESTRIKES:
		*s = ShipConditionEventSymbolHULLMICROMETEORITESTRIKES
		return nil
	case ShipConditionEventSymbolSTRUCTURALSTRESSFRACTURES:
		*s = ShipConditionEventSymbolSTRUCTURALSTRESSFRACTURES
		return nil
	case ShipConditionEventSymbolCORROSIVEMINERALCONTAMINATION:
		*s = ShipConditionEventSymbolCORROSIVEMINERALCONTAMINATION
		return nil
	case ShipConditionEventSymbolTHERMALEXPANSIONMISMATCH:
		*s = ShipConditionEventSymbolTHERMALEXPANSIONMISMATCH
		return nil
	case ShipConditionEventSymbolVIBRATIONDAMAGEFROMDRILLING:
		*s = ShipConditionEventSymbolVIBRATIONDAMAGEFROMDRILLING
		return nil
	case ShipConditionEventSymbolELECTROMAGNETICFIELDINTERFERENCE:
		*s = ShipConditionEventSymbolELECTROMAGNETICFIELDINTERFERENCE
		return nil
	case ShipConditionEventSymbolIMPACTWITHEXTRACTEDDEBRIS:
		*s = ShipConditionEventSymbolIMPACTWITHEXTRACTEDDEBRIS
		return nil
	case ShipConditionEventSymbolFUELEFFICIENCYDEGRADATION:
		*s = ShipConditionEventSymbolFUELEFFICIENCYDEGRADATION
		return nil
	case ShipConditionEventSymbolCOOLANTSYSTEMAGEING:
		*s = ShipConditionEventSymbolCOOLANTSYSTEMAGEING
		return nil
	case ShipConditionEventSymbolDUSTMICROABRASIONS:
		*s = ShipConditionEventSymbolDUSTMICROABRASIONS
		return nil
	case ShipConditionEventSymbolTHRUSTERNOZZLEWEAR:
		*s = ShipConditionEventSymbolTHRUSTERNOZZLEWEAR
		return nil
	case ShipConditionEventSymbolEXHAUSTPORTCLOGGING:
		*s = ShipConditionEventSymbolEXHAUSTPORTCLOGGING
		return nil
	case ShipConditionEventSymbolBEARINGLUBRICATIONFADE:
		*s = ShipConditionEventSymbolBEARINGLUBRICATIONFADE
		return nil
	case ShipConditionEventSymbolSENSORCALIBRATIONDRIFT:
		*s = ShipConditionEventSymbolSENSORCALIBRATIONDRIFT
		return nil
	case ShipConditionEventSymbolHULLMICROMETEORITEDAMAGE:
		*s = ShipConditionEventSymbolHULLMICROMETEORITEDAMAGE
		return nil
	case ShipConditionEventSymbolSPACEDEBRISCOLLISION:
		*s = ShipConditionEventSymbolSPACEDEBRISCOLLISION
		return nil
	case ShipConditionEventSymbolTHERMALSTRESS:
		*s = ShipConditionEventSymbolTHERMALSTRESS
		return nil
	case ShipConditionEventSymbolVIBRATIONOVERLOAD:
		*s = ShipConditionEventSymbolVIBRATIONOVERLOAD
		return nil
	case ShipConditionEventSymbolPRESSUREDIFFERENTIALSTRESS:
		*s = ShipConditionEventSymbolPRESSUREDIFFERENTIALSTRESS
		return nil
	case ShipConditionEventSymbolELECTROMAGNETICSURGEEFFECTS:
		*s = ShipConditionEventSymbolELECTROMAGNETICSURGEEFFECTS
		return nil
	case ShipConditionEventSymbolATMOSPHERICENTRYHEAT:
		*s = ShipConditionEventSymbolATMOSPHERICENTRYHEAT
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The ship's crew service and maintain the ship's systems and equipment.
// Ref: #/components/schemas/ShipCrew
type ShipCrew struct {
	// The current number of crew members on the ship.
	Current int `json:"current"`
	// The minimum number of crew members required to maintain the ship.
	Required int `json:"required"`
	// The maximum number of crew members the ship can support.
	Capacity int `json:"capacity"`
	// The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed
	// shift improves the crew's morale.
	Rotation ShipCrewRotation `json:"rotation"`
	// A rough measure of the crew's morale. A higher morale means the crew is happier and more
	// productive. A lower morale means the ship is more prone to accidents.
	Morale int `json:"morale"`
	// The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a
	// civilized waypoint.
	Wages int `json:"wages"`
}

// GetCurrent returns the value of Current.
func (s *ShipCrew) GetCurrent() int {
	return s.Current
}

// GetRequired returns the value of Required.
func (s *ShipCrew) GetRequired() int {
	return s.Required
}

// GetCapacity returns the value of Capacity.
func (s *ShipCrew) GetCapacity() int {
	return s.Capacity
}

// GetRotation returns the value of Rotation.
func (s *ShipCrew) GetRotation() ShipCrewRotation {
	return s.Rotation
}

// GetMorale returns the value of Morale.
func (s *ShipCrew) GetMorale() int {
	return s.Morale
}

// GetWages returns the value of Wages.
func (s *ShipCrew) GetWages() int {
	return s.Wages
}

// SetCurrent sets the value of Current.
func (s *ShipCrew) SetCurrent(val int) {
	s.Current = val
}

// SetRequired sets the value of Required.
func (s *ShipCrew) SetRequired(val int) {
	s.Required = val
}

// SetCapacity sets the value of Capacity.
func (s *ShipCrew) SetCapacity(val int) {
	s.Capacity = val
}

// SetRotation sets the value of Rotation.
func (s *ShipCrew) SetRotation(val ShipCrewRotation) {
	s.Rotation = val
}

// SetMorale sets the value of Morale.
func (s *ShipCrew) SetMorale(val int) {
	s.Morale = val
}

// SetWages sets the value of Wages.
func (s *ShipCrew) SetWages(val int) {
	s.Wages = val
}

// The rotation of crew shifts. A stricter shift improves the ship's performance. A more relaxed
// shift improves the crew's morale.
type ShipCrewRotation string

const (
	ShipCrewRotationSTRICT  ShipCrewRotation = "STRICT"
	ShipCrewRotationRELAXED ShipCrewRotation = "RELAXED"
)

// AllValues returns all ShipCrewRotation values.
func (ShipCrewRotation) AllValues() []ShipCrewRotation {
	return []ShipCrewRotation{
		ShipCrewRotationSTRICT,
		ShipCrewRotationRELAXED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShipCrewRotation) MarshalText() ([]byte, error) {
	switch s {
	case ShipCrewRotationSTRICT:
		return []byte(s), nil
	case ShipCrewRotationRELAXED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShipCrewRotation) UnmarshalText(data []byte) error {
	switch ShipCrewRotation(data) {
	case ShipCrewRotationSTRICT:
		*s = ShipCrewRotationSTRICT
		return nil
	case ShipCrewRotationRELAXED:
		*s = ShipCrewRotationRELAXED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The engine determines how quickly a ship travels between waypoints.
// Ref: #/components/schemas/ShipEngine
type ShipEngine struct {
	// The symbol of the engine.
	Symbol ShipEngineSymbol `json:"symbol"`
	// The name of the engine.
	Name string `json:"name"`
	// The description of the engine.
	Description string                 `json:"description"`
	Condition   ShipComponentCondition `json:"condition"`
	Integrity   ShipComponentIntegrity `json:"integrity"`
	// The speed stat of this engine. The higher the speed, the faster a ship can travel from one point
	// to another. Reduces the time of arrival when navigating the ship.
	Speed        int              `json:"speed"`
	Requirements ShipRequirements `json:"requirements"`
}

// GetSymbol returns the value of Symbol.
func (s *ShipEngine) GetSymbol() ShipEngineSymbol {
	return s.Symbol
}

// GetName returns the value of Name.
func (s *ShipEngine) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ShipEngine) GetDescription() string {
	return s.Description
}

// GetCondition returns the value of Condition.
func (s *ShipEngine) GetCondition() ShipComponentCondition {
	return s.Condition
}

// GetIntegrity returns the value of Integrity.
func (s *ShipEngine) GetIntegrity() ShipComponentIntegrity {
	return s.Integrity
}

// GetSpeed returns the value of Speed.
func (s *ShipEngine) GetSpeed() int {
	return s.Speed
}

// GetRequirements returns the value of Requirements.
func (s *ShipEngine) GetRequirements() ShipRequirements {
	return s.Requirements
}

// SetSymbol sets the value of Symbol.
func (s *ShipEngine) SetSymbol(val ShipEngineSymbol) {
	s.Symbol = val
}

// SetName sets the value of Name.
func (s *ShipEngine) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ShipEngine) SetDescription(val string) {
	s.Description = val
}

// SetCondition sets the value of Condition.
func (s *ShipEngine) SetCondition(val ShipComponentCondition) {
	s.Condition = val
}

// SetIntegrity sets the value of Integrity.
func (s *ShipEngine) SetIntegrity(val ShipComponentIntegrity) {
	s.Integrity = val
}

// SetSpeed sets the value of Speed.
func (s *ShipEngine) SetSpeed(val int) {
	s.Speed = val
}

// SetRequirements sets the value of Requirements.
func (s *ShipEngine) SetRequirements(val ShipRequirements) {
	s.Requirements = val
}

// The symbol of the engine.
type ShipEngineSymbol string

const (
	ShipEngineSymbolENGINEIMPULSEDRIVEI ShipEngineSymbol = "ENGINE_IMPULSE_DRIVE_I"
	ShipEngineSymbolENGINEIONDRIVEI     ShipEngineSymbol = "ENGINE_ION_DRIVE_I"
	ShipEngineSymbolENGINEIONDRIVEII    ShipEngineSymbol = "ENGINE_ION_DRIVE_II"
	ShipEngineSymbolENGINEHYPERDRIVEI   ShipEngineSymbol = "ENGINE_HYPER_DRIVE_I"
)

// AllValues returns all ShipEngineSymbol values.
func (ShipEngineSymbol) AllValues() []ShipEngineSymbol {
	return []ShipEngineSymbol{
		ShipEngineSymbolENGINEIMPULSEDRIVEI,
		ShipEngineSymbolENGINEIONDRIVEI,
		ShipEngineSymbolENGINEIONDRIVEII,
		ShipEngineSymbolENGINEHYPERDRIVEI,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShipEngineSymbol) MarshalText() ([]byte, error) {
	switch s {
	case ShipEngineSymbolENGINEIMPULSEDRIVEI:
		return []byte(s), nil
	case ShipEngineSymbolENGINEIONDRIVEI:
		return []byte(s), nil
	case ShipEngineSymbolENGINEIONDRIVEII:
		return []byte(s), nil
	case ShipEngineSymbolENGINEHYPERDRIVEI:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShipEngineSymbol) UnmarshalText(data []byte) error {
	switch ShipEngineSymbol(data) {
	case ShipEngineSymbolENGINEIMPULSEDRIVEI:
		*s = ShipEngineSymbolENGINEIMPULSEDRIVEI
		return nil
	case ShipEngineSymbolENGINEIONDRIVEI:
		*s = ShipEngineSymbolENGINEIONDRIVEI
		return nil
	case ShipEngineSymbolENGINEIONDRIVEII:
		*s = ShipEngineSymbolENGINEIONDRIVEII
		return nil
	case ShipEngineSymbolENGINEHYPERDRIVEI:
		*s = ShipEngineSymbolENGINEHYPERDRIVEI
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The frame of the ship. The frame determines the number of modules and mounting points of the ship,
// as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become
// more sluggish and less maneuverable.
// Ref: #/components/schemas/ShipFrame
type ShipFrame struct {
	// Symbol of the frame.
	Symbol ShipFrameSymbol `json:"symbol"`
	// Name of the frame.
	Name string `json:"name"`
	// Description of the frame.
	Description string                 `json:"description"`
	Condition   ShipComponentCondition `json:"condition"`
	Integrity   ShipComponentIntegrity `json:"integrity"`
	// The amount of slots that can be dedicated to modules installed in the ship. Each installed module
	// take up a number of slots, and once there are no more slots, no new modules can be installed.
	ModuleSlots int `json:"moduleSlots"`
	// The amount of slots that can be dedicated to mounts installed in the ship. Each installed mount
	// takes up a number of points, and once there are no more points remaining, no new mounts can be
	// installed.
	MountingPoints int `json:"mountingPoints"`
	// The maximum amount of fuel that can be stored in this ship. When refueling, the ship will be
	// refueled to this amount.
	FuelCapacity int              `json:"fuelCapacity"`
	Requirements ShipRequirements `json:"requirements"`
}

// GetSymbol returns the value of Symbol.
func (s *ShipFrame) GetSymbol() ShipFrameSymbol {
	return s.Symbol
}

// GetName returns the value of Name.
func (s *ShipFrame) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ShipFrame) GetDescription() string {
	return s.Description
}

// GetCondition returns the value of Condition.
func (s *ShipFrame) GetCondition() ShipComponentCondition {
	return s.Condition
}

// GetIntegrity returns the value of Integrity.
func (s *ShipFrame) GetIntegrity() ShipComponentIntegrity {
	return s.Integrity
}

// GetModuleSlots returns the value of ModuleSlots.
func (s *ShipFrame) GetModuleSlots() int {
	return s.ModuleSlots
}

// GetMountingPoints returns the value of MountingPoints.
func (s *ShipFrame) GetMountingPoints() int {
	return s.MountingPoints
}

// GetFuelCapacity returns the value of FuelCapacity.
func (s *ShipFrame) GetFuelCapacity() int {
	return s.FuelCapacity
}

// GetRequirements returns the value of Requirements.
func (s *ShipFrame) GetRequirements() ShipRequirements {
	return s.Requirements
}

// SetSymbol sets the value of Symbol.
func (s *ShipFrame) SetSymbol(val ShipFrameSymbol) {
	s.Symbol = val
}

// SetName sets the value of Name.
func (s *ShipFrame) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ShipFrame) SetDescription(val string) {
	s.Description = val
}

// SetCondition sets the value of Condition.
func (s *ShipFrame) SetCondition(val ShipComponentCondition) {
	s.Condition = val
}

// SetIntegrity sets the value of Integrity.
func (s *ShipFrame) SetIntegrity(val ShipComponentIntegrity) {
	s.Integrity = val
}

// SetModuleSlots sets the value of ModuleSlots.
func (s *ShipFrame) SetModuleSlots(val int) {
	s.ModuleSlots = val
}

// SetMountingPoints sets the value of MountingPoints.
func (s *ShipFrame) SetMountingPoints(val int) {
	s.MountingPoints = val
}

// SetFuelCapacity sets the value of FuelCapacity.
func (s *ShipFrame) SetFuelCapacity(val int) {
	s.FuelCapacity = val
}

// SetRequirements sets the value of Requirements.
func (s *ShipFrame) SetRequirements(val ShipRequirements) {
	s.Requirements = val
}

// Symbol of the frame.
type ShipFrameSymbol string

const (
	ShipFrameSymbolFRAMEPROBE          ShipFrameSymbol = "FRAME_PROBE"
	ShipFrameSymbolFRAMEDRONE          ShipFrameSymbol = "FRAME_DRONE"
	ShipFrameSymbolFRAMEINTERCEPTOR    ShipFrameSymbol = "FRAME_INTERCEPTOR"
	ShipFrameSymbolFRAMERACER          ShipFrameSymbol = "FRAME_RACER"
	ShipFrameSymbolFRAMEFIGHTER        ShipFrameSymbol = "FRAME_FIGHTER"
	ShipFrameSymbolFRAMEFRIGATE        ShipFrameSymbol = "FRAME_FRIGATE"
	ShipFrameSymbolFRAMESHUTTLE        ShipFrameSymbol = "FRAME_SHUTTLE"
	ShipFrameSymbolFRAMEEXPLORER       ShipFrameSymbol = "FRAME_EXPLORER"
	ShipFrameSymbolFRAMEMINER          ShipFrameSymbol = "FRAME_MINER"
	ShipFrameSymbolFRAMELIGHTFREIGHTER ShipFrameSymbol = "FRAME_LIGHT_FREIGHTER"
	ShipFrameSymbolFRAMEHEAVYFREIGHTER ShipFrameSymbol = "FRAME_HEAVY_FREIGHTER"
	ShipFrameSymbolFRAMETRANSPORT      ShipFrameSymbol = "FRAME_TRANSPORT"
	ShipFrameSymbolFRAMEDESTROYER      ShipFrameSymbol = "FRAME_DESTROYER"
	ShipFrameSymbolFRAMECRUISER        ShipFrameSymbol = "FRAME_CRUISER"
	ShipFrameSymbolFRAMECARRIER        ShipFrameSymbol = "FRAME_CARRIER"
)

// AllValues returns all ShipFrameSymbol values.
func (ShipFrameSymbol) AllValues() []ShipFrameSymbol {
	return []ShipFrameSymbol{
		ShipFrameSymbolFRAMEPROBE,
		ShipFrameSymbolFRAMEDRONE,
		ShipFrameSymbolFRAMEINTERCEPTOR,
		ShipFrameSymbolFRAMERACER,
		ShipFrameSymbolFRAMEFIGHTER,
		ShipFrameSymbolFRAMEFRIGATE,
		ShipFrameSymbolFRAMESHUTTLE,
		ShipFrameSymbolFRAMEEXPLORER,
		ShipFrameSymbolFRAMEMINER,
		ShipFrameSymbolFRAMELIGHTFREIGHTER,
		ShipFrameSymbolFRAMEHEAVYFREIGHTER,
		ShipFrameSymbolFRAMETRANSPORT,
		ShipFrameSymbolFRAMEDESTROYER,
		ShipFrameSymbolFRAMECRUISER,
		ShipFrameSymbolFRAMECARRIER,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShipFrameSymbol) MarshalText() ([]byte, error) {
	switch s {
	case ShipFrameSymbolFRAMEPROBE:
		return []byte(s), nil
	case ShipFrameSymbolFRAMEDRONE:
		return []byte(s), nil
	case ShipFrameSymbolFRAMEINTERCEPTOR:
		return []byte(s), nil
	case ShipFrameSymbolFRAMERACER:
		return []byte(s), nil
	case ShipFrameSymbolFRAMEFIGHTER:
		return []byte(s), nil
	case ShipFrameSymbolFRAMEFRIGATE:
		return []byte(s), nil
	case ShipFrameSymbolFRAMESHUTTLE:
		return []byte(s), nil
	case ShipFrameSymbolFRAMEEXPLORER:
		return []byte(s), nil
	case ShipFrameSymbolFRAMEMINER:
		return []byte(s), nil
	case ShipFrameSymbolFRAMELIGHTFREIGHTER:
		return []byte(s), nil
	case ShipFrameSymbolFRAMEHEAVYFREIGHTER:
		return []byte(s), nil
	case ShipFrameSymbolFRAMETRANSPORT:
		return []byte(s), nil
	case ShipFrameSymbolFRAMEDESTROYER:
		return []byte(s), nil
	case ShipFrameSymbolFRAMECRUISER:
		return []byte(s), nil
	case ShipFrameSymbolFRAMECARRIER:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShipFrameSymbol) UnmarshalText(data []byte) error {
	switch ShipFrameSymbol(data) {
	case ShipFrameSymbolFRAMEPROBE:
		*s = ShipFrameSymbolFRAMEPROBE
		return nil
	case ShipFrameSymbolFRAMEDRONE:
		*s = ShipFrameSymbolFRAMEDRONE
		return nil
	case ShipFrameSymbolFRAMEINTERCEPTOR:
		*s = ShipFrameSymbolFRAMEINTERCEPTOR
		return nil
	case ShipFrameSymbolFRAMERACER:
		*s = ShipFrameSymbolFRAMERACER
		return nil
	case ShipFrameSymbolFRAMEFIGHTER:
		*s = ShipFrameSymbolFRAMEFIGHTER
		return nil
	case ShipFrameSymbolFRAMEFRIGATE:
		*s = ShipFrameSymbolFRAMEFRIGATE
		return nil
	case ShipFrameSymbolFRAMESHUTTLE:
		*s = ShipFrameSymbolFRAMESHUTTLE
		return nil
	case ShipFrameSymbolFRAMEEXPLORER:
		*s = ShipFrameSymbolFRAMEEXPLORER
		return nil
	case ShipFrameSymbolFRAMEMINER:
		*s = ShipFrameSymbolFRAMEMINER
		return nil
	case ShipFrameSymbolFRAMELIGHTFREIGHTER:
		*s = ShipFrameSymbolFRAMELIGHTFREIGHTER
		return nil
	case ShipFrameSymbolFRAMEHEAVYFREIGHTER:
		*s = ShipFrameSymbolFRAMEHEAVYFREIGHTER
		return nil
	case ShipFrameSymbolFRAMETRANSPORT:
		*s = ShipFrameSymbolFRAMETRANSPORT
		return nil
	case ShipFrameSymbolFRAMEDESTROYER:
		*s = ShipFrameSymbolFRAMEDESTROYER
		return nil
	case ShipFrameSymbolFRAMECRUISER:
		*s = ShipFrameSymbolFRAMECRUISER
		return nil
	case ShipFrameSymbolFRAMECARRIER:
		*s = ShipFrameSymbolFRAMECARRIER
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Details of the ship's fuel tanks including how much fuel was consumed during the last transit or
// action.
// Ref: #/components/schemas/ShipFuel
type ShipFuel struct {
	// The current amount of fuel in the ship's tanks.
	Current int `json:"current"`
	// The maximum amount of fuel the ship's tanks can hold.
	Capacity int `json:"capacity"`
	// An object that only shows up when an action has consumed fuel in the process. Shows the fuel
	// consumption data.
	Consumed OptShipFuelConsumed `json:"consumed"`
}

// GetCurrent returns the value of Current.
func (s *ShipFuel) GetCurrent() int {
	return s.Current
}

// GetCapacity returns the value of Capacity.
func (s *ShipFuel) GetCapacity() int {
	return s.Capacity
}

// GetConsumed returns the value of Consumed.
func (s *ShipFuel) GetConsumed() OptShipFuelConsumed {
	return s.Consumed
}

// SetCurrent sets the value of Current.
func (s *ShipFuel) SetCurrent(val int) {
	s.Current = val
}

// SetCapacity sets the value of Capacity.
func (s *ShipFuel) SetCapacity(val int) {
	s.Capacity = val
}

// SetConsumed sets the value of Consumed.
func (s *ShipFuel) SetConsumed(val OptShipFuelConsumed) {
	s.Consumed = val
}

// An object that only shows up when an action has consumed fuel in the process. Shows the fuel
// consumption data.
type ShipFuelConsumed struct {
	// The amount of fuel consumed by the most recent transit or action.
	Amount int `json:"amount"`
	// The time at which the fuel was consumed.
	Timestamp time.Time `json:"timestamp"`
}

// GetAmount returns the value of Amount.
func (s *ShipFuelConsumed) GetAmount() int {
	return s.Amount
}

// GetTimestamp returns the value of Timestamp.
func (s *ShipFuelConsumed) GetTimestamp() time.Time {
	return s.Timestamp
}

// SetAmount sets the value of Amount.
func (s *ShipFuelConsumed) SetAmount(val int) {
	s.Amount = val
}

// SetTimestamp sets the value of Timestamp.
func (s *ShipFuelConsumed) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// Result of a transaction for a ship modification, such as installing a mount or a module.
// Ref: #/components/schemas/ShipModificationTransaction
type ShipModificationTransaction struct {
	// The symbol of the waypoint where the transaction took place.
	WaypointSymbol string `json:"waypointSymbol"`
	// The symbol of the ship that made the transaction.
	ShipSymbol string `json:"shipSymbol"`
	// The symbol of the trade good.
	TradeSymbol string `json:"tradeSymbol"`
	// The total price of the transaction.
	TotalPrice int `json:"totalPrice"`
	// The timestamp of the transaction.
	Timestamp time.Time `json:"timestamp"`
}

// GetWaypointSymbol returns the value of WaypointSymbol.
func (s *ShipModificationTransaction) GetWaypointSymbol() string {
	return s.WaypointSymbol
}

// GetShipSymbol returns the value of ShipSymbol.
func (s *ShipModificationTransaction) GetShipSymbol() string {
	return s.ShipSymbol
}

// GetTradeSymbol returns the value of TradeSymbol.
func (s *ShipModificationTransaction) GetTradeSymbol() string {
	return s.TradeSymbol
}

// GetTotalPrice returns the value of TotalPrice.
func (s *ShipModificationTransaction) GetTotalPrice() int {
	return s.TotalPrice
}

// GetTimestamp returns the value of Timestamp.
func (s *ShipModificationTransaction) GetTimestamp() time.Time {
	return s.Timestamp
}

// SetWaypointSymbol sets the value of WaypointSymbol.
func (s *ShipModificationTransaction) SetWaypointSymbol(val string) {
	s.WaypointSymbol = val
}

// SetShipSymbol sets the value of ShipSymbol.
func (s *ShipModificationTransaction) SetShipSymbol(val string) {
	s.ShipSymbol = val
}

// SetTradeSymbol sets the value of TradeSymbol.
func (s *ShipModificationTransaction) SetTradeSymbol(val string) {
	s.TradeSymbol = val
}

// SetTotalPrice sets the value of TotalPrice.
func (s *ShipModificationTransaction) SetTotalPrice(val int) {
	s.TotalPrice = val
}

// SetTimestamp sets the value of Timestamp.
func (s *ShipModificationTransaction) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// A module can be installed in a ship and provides a set of capabilities such as storage space or
// quarters for crew. Module installations are permanent.
// Ref: #/components/schemas/ShipModule
type ShipModule struct {
	// The symbol of the module.
	Symbol ShipModuleSymbol `json:"symbol"`
	// Modules that provide capacity, such as cargo hold or crew quarters will show this value to denote
	// how much of a bonus the module grants.
	Capacity OptInt `json:"capacity"`
	// Modules that have a range will such as a sensor array show this value to denote how far can the
	// module reach with its capabilities.
	Range OptInt `json:"range"`
	// Name of this module.
	Name string `json:"name"`
	// Description of this module.
	Description  string           `json:"description"`
	Requirements ShipRequirements `json:"requirements"`
}

// GetSymbol returns the value of Symbol.
func (s *ShipModule) GetSymbol() ShipModuleSymbol {
	return s.Symbol
}

// GetCapacity returns the value of Capacity.
func (s *ShipModule) GetCapacity() OptInt {
	return s.Capacity
}

// GetRange returns the value of Range.
func (s *ShipModule) GetRange() OptInt {
	return s.Range
}

// GetName returns the value of Name.
func (s *ShipModule) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ShipModule) GetDescription() string {
	return s.Description
}

// GetRequirements returns the value of Requirements.
func (s *ShipModule) GetRequirements() ShipRequirements {
	return s.Requirements
}

// SetSymbol sets the value of Symbol.
func (s *ShipModule) SetSymbol(val ShipModuleSymbol) {
	s.Symbol = val
}

// SetCapacity sets the value of Capacity.
func (s *ShipModule) SetCapacity(val OptInt) {
	s.Capacity = val
}

// SetRange sets the value of Range.
func (s *ShipModule) SetRange(val OptInt) {
	s.Range = val
}

// SetName sets the value of Name.
func (s *ShipModule) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ShipModule) SetDescription(val string) {
	s.Description = val
}

// SetRequirements sets the value of Requirements.
func (s *ShipModule) SetRequirements(val ShipRequirements) {
	s.Requirements = val
}

// The symbol of the module.
type ShipModuleSymbol string

const (
	ShipModuleSymbolMODULEMINERALPROCESSORI ShipModuleSymbol = "MODULE_MINERAL_PROCESSOR_I"
	ShipModuleSymbolMODULEGASPROCESSORI     ShipModuleSymbol = "MODULE_GAS_PROCESSOR_I"
	ShipModuleSymbolMODULECARGOHOLDI        ShipModuleSymbol = "MODULE_CARGO_HOLD_I"
	ShipModuleSymbolMODULECARGOHOLDII       ShipModuleSymbol = "MODULE_CARGO_HOLD_II"
	ShipModuleSymbolMODULECARGOHOLDIII      ShipModuleSymbol = "MODULE_CARGO_HOLD_III"
	ShipModuleSymbolMODULECREWQUARTERSI     ShipModuleSymbol = "MODULE_CREW_QUARTERS_I"
	ShipModuleSymbolMODULEENVOYQUARTERSI    ShipModuleSymbol = "MODULE_ENVOY_QUARTERS_I"
	ShipModuleSymbolMODULEPASSENGERCABINI   ShipModuleSymbol = "MODULE_PASSENGER_CABIN_I"
	ShipModuleSymbolMODULEMICROREFINERYI    ShipModuleSymbol = "MODULE_MICRO_REFINERY_I"
	ShipModuleSymbolMODULEOREREFINERYI      ShipModuleSymbol = "MODULE_ORE_REFINERY_I"
	ShipModuleSymbolMODULEFUELREFINERYI     ShipModuleSymbol = "MODULE_FUEL_REFINERY_I"
	ShipModuleSymbolMODULESCIENCELABI       ShipModuleSymbol = "MODULE_SCIENCE_LAB_I"
	ShipModuleSymbolMODULEJUMPDRIVEI        ShipModuleSymbol = "MODULE_JUMP_DRIVE_I"
	ShipModuleSymbolMODULEJUMPDRIVEII       ShipModuleSymbol = "MODULE_JUMP_DRIVE_II"
	ShipModuleSymbolMODULEJUMPDRIVEIII      ShipModuleSymbol = "MODULE_JUMP_DRIVE_III"
	ShipModuleSymbolMODULEWARPDRIVEI        ShipModuleSymbol = "MODULE_WARP_DRIVE_I"
	ShipModuleSymbolMODULEWARPDRIVEII       ShipModuleSymbol = "MODULE_WARP_DRIVE_II"
	ShipModuleSymbolMODULEWARPDRIVEIII      ShipModuleSymbol = "MODULE_WARP_DRIVE_III"
	ShipModuleSymbolMODULESHIELDGENERATORI  ShipModuleSymbol = "MODULE_SHIELD_GENERATOR_I"
	ShipModuleSymbolMODULESHIELDGENERATORII ShipModuleSymbol = "MODULE_SHIELD_GENERATOR_II"
)

// AllValues returns all ShipModuleSymbol values.
func (ShipModuleSymbol) AllValues() []ShipModuleSymbol {
	return []ShipModuleSymbol{
		ShipModuleSymbolMODULEMINERALPROCESSORI,
		ShipModuleSymbolMODULEGASPROCESSORI,
		ShipModuleSymbolMODULECARGOHOLDI,
		ShipModuleSymbolMODULECARGOHOLDII,
		ShipModuleSymbolMODULECARGOHOLDIII,
		ShipModuleSymbolMODULECREWQUARTERSI,
		ShipModuleSymbolMODULEENVOYQUARTERSI,
		ShipModuleSymbolMODULEPASSENGERCABINI,
		ShipModuleSymbolMODULEMICROREFINERYI,
		ShipModuleSymbolMODULEOREREFINERYI,
		ShipModuleSymbolMODULEFUELREFINERYI,
		ShipModuleSymbolMODULESCIENCELABI,
		ShipModuleSymbolMODULEJUMPDRIVEI,
		ShipModuleSymbolMODULEJUMPDRIVEII,
		ShipModuleSymbolMODULEJUMPDRIVEIII,
		ShipModuleSymbolMODULEWARPDRIVEI,
		ShipModuleSymbolMODULEWARPDRIVEII,
		ShipModuleSymbolMODULEWARPDRIVEIII,
		ShipModuleSymbolMODULESHIELDGENERATORI,
		ShipModuleSymbolMODULESHIELDGENERATORII,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShipModuleSymbol) MarshalText() ([]byte, error) {
	switch s {
	case ShipModuleSymbolMODULEMINERALPROCESSORI:
		return []byte(s), nil
	case ShipModuleSymbolMODULEGASPROCESSORI:
		return []byte(s), nil
	case ShipModuleSymbolMODULECARGOHOLDI:
		return []byte(s), nil
	case ShipModuleSymbolMODULECARGOHOLDII:
		return []byte(s), nil
	case ShipModuleSymbolMODULECARGOHOLDIII:
		return []byte(s), nil
	case ShipModuleSymbolMODULECREWQUARTERSI:
		return []byte(s), nil
	case ShipModuleSymbolMODULEENVOYQUARTERSI:
		return []byte(s), nil
	case ShipModuleSymbolMODULEPASSENGERCABINI:
		return []byte(s), nil
	case ShipModuleSymbolMODULEMICROREFINERYI:
		return []byte(s), nil
	case ShipModuleSymbolMODULEOREREFINERYI:
		return []byte(s), nil
	case ShipModuleSymbolMODULEFUELREFINERYI:
		return []byte(s), nil
	case ShipModuleSymbolMODULESCIENCELABI:
		return []byte(s), nil
	case ShipModuleSymbolMODULEJUMPDRIVEI:
		return []byte(s), nil
	case ShipModuleSymbolMODULEJUMPDRIVEII:
		return []byte(s), nil
	case ShipModuleSymbolMODULEJUMPDRIVEIII:
		return []byte(s), nil
	case ShipModuleSymbolMODULEWARPDRIVEI:
		return []byte(s), nil
	case ShipModuleSymbolMODULEWARPDRIVEII:
		return []byte(s), nil
	case ShipModuleSymbolMODULEWARPDRIVEIII:
		return []byte(s), nil
	case ShipModuleSymbolMODULESHIELDGENERATORI:
		return []byte(s), nil
	case ShipModuleSymbolMODULESHIELDGENERATORII:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShipModuleSymbol) UnmarshalText(data []byte) error {
	switch ShipModuleSymbol(data) {
	case ShipModuleSymbolMODULEMINERALPROCESSORI:
		*s = ShipModuleSymbolMODULEMINERALPROCESSORI
		return nil
	case ShipModuleSymbolMODULEGASPROCESSORI:
		*s = ShipModuleSymbolMODULEGASPROCESSORI
		return nil
	case ShipModuleSymbolMODULECARGOHOLDI:
		*s = ShipModuleSymbolMODULECARGOHOLDI
		return nil
	case ShipModuleSymbolMODULECARGOHOLDII:
		*s = ShipModuleSymbolMODULECARGOHOLDII
		return nil
	case ShipModuleSymbolMODULECARGOHOLDIII:
		*s = ShipModuleSymbolMODULECARGOHOLDIII
		return nil
	case ShipModuleSymbolMODULECREWQUARTERSI:
		*s = ShipModuleSymbolMODULECREWQUARTERSI
		return nil
	case ShipModuleSymbolMODULEENVOYQUARTERSI:
		*s = ShipModuleSymbolMODULEENVOYQUARTERSI
		return nil
	case ShipModuleSymbolMODULEPASSENGERCABINI:
		*s = ShipModuleSymbolMODULEPASSENGERCABINI
		return nil
	case ShipModuleSymbolMODULEMICROREFINERYI:
		*s = ShipModuleSymbolMODULEMICROREFINERYI
		return nil
	case ShipModuleSymbolMODULEOREREFINERYI:
		*s = ShipModuleSymbolMODULEOREREFINERYI
		return nil
	case ShipModuleSymbolMODULEFUELREFINERYI:
		*s = ShipModuleSymbolMODULEFUELREFINERYI
		return nil
	case ShipModuleSymbolMODULESCIENCELABI:
		*s = ShipModuleSymbolMODULESCIENCELABI
		return nil
	case ShipModuleSymbolMODULEJUMPDRIVEI:
		*s = ShipModuleSymbolMODULEJUMPDRIVEI
		return nil
	case ShipModuleSymbolMODULEJUMPDRIVEII:
		*s = ShipModuleSymbolMODULEJUMPDRIVEII
		return nil
	case ShipModuleSymbolMODULEJUMPDRIVEIII:
		*s = ShipModuleSymbolMODULEJUMPDRIVEIII
		return nil
	case ShipModuleSymbolMODULEWARPDRIVEI:
		*s = ShipModuleSymbolMODULEWARPDRIVEI
		return nil
	case ShipModuleSymbolMODULEWARPDRIVEII:
		*s = ShipModuleSymbolMODULEWARPDRIVEII
		return nil
	case ShipModuleSymbolMODULEWARPDRIVEIII:
		*s = ShipModuleSymbolMODULEWARPDRIVEIII
		return nil
	case ShipModuleSymbolMODULESHIELDGENERATORI:
		*s = ShipModuleSymbolMODULESHIELDGENERATORI
		return nil
	case ShipModuleSymbolMODULESHIELDGENERATORII:
		*s = ShipModuleSymbolMODULESHIELDGENERATORII
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A mount is installed on the exterier of a ship.
// Ref: #/components/schemas/ShipMount
type ShipMount struct {
	// Symbo of this mount.
	Symbol ShipMountSymbol `json:"symbol"`
	// Name of this mount.
	Name string `json:"name"`
	// Description of this mount.
	Description OptString `json:"description"`
	// Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities
	// are.
	Strength OptInt `json:"strength"`
	// Mounts that have this value denote what goods can be produced from using the mount.
	Deposits     []ShipMountDepositsItem `json:"deposits"`
	Requirements ShipRequirements        `json:"requirements"`
}

// GetSymbol returns the value of Symbol.
func (s *ShipMount) GetSymbol() ShipMountSymbol {
	return s.Symbol
}

// GetName returns the value of Name.
func (s *ShipMount) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ShipMount) GetDescription() OptString {
	return s.Description
}

// GetStrength returns the value of Strength.
func (s *ShipMount) GetStrength() OptInt {
	return s.Strength
}

// GetDeposits returns the value of Deposits.
func (s *ShipMount) GetDeposits() []ShipMountDepositsItem {
	return s.Deposits
}

// GetRequirements returns the value of Requirements.
func (s *ShipMount) GetRequirements() ShipRequirements {
	return s.Requirements
}

// SetSymbol sets the value of Symbol.
func (s *ShipMount) SetSymbol(val ShipMountSymbol) {
	s.Symbol = val
}

// SetName sets the value of Name.
func (s *ShipMount) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ShipMount) SetDescription(val OptString) {
	s.Description = val
}

// SetStrength sets the value of Strength.
func (s *ShipMount) SetStrength(val OptInt) {
	s.Strength = val
}

// SetDeposits sets the value of Deposits.
func (s *ShipMount) SetDeposits(val []ShipMountDepositsItem) {
	s.Deposits = val
}

// SetRequirements sets the value of Requirements.
func (s *ShipMount) SetRequirements(val ShipRequirements) {
	s.Requirements = val
}

type ShipMountDepositsItem string

const (
	ShipMountDepositsItemQUARTZSAND      ShipMountDepositsItem = "QUARTZ_SAND"
	ShipMountDepositsItemSILICONCRYSTALS ShipMountDepositsItem = "SILICON_CRYSTALS"
	ShipMountDepositsItemPRECIOUSSTONES  ShipMountDepositsItem = "PRECIOUS_STONES"
	ShipMountDepositsItemICEWATER        ShipMountDepositsItem = "ICE_WATER"
	ShipMountDepositsItemAMMONIAICE      ShipMountDepositsItem = "AMMONIA_ICE"
	ShipMountDepositsItemIRONORE         ShipMountDepositsItem = "IRON_ORE"
	ShipMountDepositsItemCOPPERORE       ShipMountDepositsItem = "COPPER_ORE"
	ShipMountDepositsItemSILVERORE       ShipMountDepositsItem = "SILVER_ORE"
	ShipMountDepositsItemALUMINUMORE     ShipMountDepositsItem = "ALUMINUM_ORE"
	ShipMountDepositsItemGOLDORE         ShipMountDepositsItem = "GOLD_ORE"
	ShipMountDepositsItemPLATINUMORE     ShipMountDepositsItem = "PLATINUM_ORE"
	ShipMountDepositsItemDIAMONDS        ShipMountDepositsItem = "DIAMONDS"
	ShipMountDepositsItemURANITEORE      ShipMountDepositsItem = "URANITE_ORE"
	ShipMountDepositsItemMERITIUMORE     ShipMountDepositsItem = "MERITIUM_ORE"
)

// AllValues returns all ShipMountDepositsItem values.
func (ShipMountDepositsItem) AllValues() []ShipMountDepositsItem {
	return []ShipMountDepositsItem{
		ShipMountDepositsItemQUARTZSAND,
		ShipMountDepositsItemSILICONCRYSTALS,
		ShipMountDepositsItemPRECIOUSSTONES,
		ShipMountDepositsItemICEWATER,
		ShipMountDepositsItemAMMONIAICE,
		ShipMountDepositsItemIRONORE,
		ShipMountDepositsItemCOPPERORE,
		ShipMountDepositsItemSILVERORE,
		ShipMountDepositsItemALUMINUMORE,
		ShipMountDepositsItemGOLDORE,
		ShipMountDepositsItemPLATINUMORE,
		ShipMountDepositsItemDIAMONDS,
		ShipMountDepositsItemURANITEORE,
		ShipMountDepositsItemMERITIUMORE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShipMountDepositsItem) MarshalText() ([]byte, error) {
	switch s {
	case ShipMountDepositsItemQUARTZSAND:
		return []byte(s), nil
	case ShipMountDepositsItemSILICONCRYSTALS:
		return []byte(s), nil
	case ShipMountDepositsItemPRECIOUSSTONES:
		return []byte(s), nil
	case ShipMountDepositsItemICEWATER:
		return []byte(s), nil
	case ShipMountDepositsItemAMMONIAICE:
		return []byte(s), nil
	case ShipMountDepositsItemIRONORE:
		return []byte(s), nil
	case ShipMountDepositsItemCOPPERORE:
		return []byte(s), nil
	case ShipMountDepositsItemSILVERORE:
		return []byte(s), nil
	case ShipMountDepositsItemALUMINUMORE:
		return []byte(s), nil
	case ShipMountDepositsItemGOLDORE:
		return []byte(s), nil
	case ShipMountDepositsItemPLATINUMORE:
		return []byte(s), nil
	case ShipMountDepositsItemDIAMONDS:
		return []byte(s), nil
	case ShipMountDepositsItemURANITEORE:
		return []byte(s), nil
	case ShipMountDepositsItemMERITIUMORE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShipMountDepositsItem) UnmarshalText(data []byte) error {
	switch ShipMountDepositsItem(data) {
	case ShipMountDepositsItemQUARTZSAND:
		*s = ShipMountDepositsItemQUARTZSAND
		return nil
	case ShipMountDepositsItemSILICONCRYSTALS:
		*s = ShipMountDepositsItemSILICONCRYSTALS
		return nil
	case ShipMountDepositsItemPRECIOUSSTONES:
		*s = ShipMountDepositsItemPRECIOUSSTONES
		return nil
	case ShipMountDepositsItemICEWATER:
		*s = ShipMountDepositsItemICEWATER
		return nil
	case ShipMountDepositsItemAMMONIAICE:
		*s = ShipMountDepositsItemAMMONIAICE
		return nil
	case ShipMountDepositsItemIRONORE:
		*s = ShipMountDepositsItemIRONORE
		return nil
	case ShipMountDepositsItemCOPPERORE:
		*s = ShipMountDepositsItemCOPPERORE
		return nil
	case ShipMountDepositsItemSILVERORE:
		*s = ShipMountDepositsItemSILVERORE
		return nil
	case ShipMountDepositsItemALUMINUMORE:
		*s = ShipMountDepositsItemALUMINUMORE
		return nil
	case ShipMountDepositsItemGOLDORE:
		*s = ShipMountDepositsItemGOLDORE
		return nil
	case ShipMountDepositsItemPLATINUMORE:
		*s = ShipMountDepositsItemPLATINUMORE
		return nil
	case ShipMountDepositsItemDIAMONDS:
		*s = ShipMountDepositsItemDIAMONDS
		return nil
	case ShipMountDepositsItemURANITEORE:
		*s = ShipMountDepositsItemURANITEORE
		return nil
	case ShipMountDepositsItemMERITIUMORE:
		*s = ShipMountDepositsItemMERITIUMORE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Symbo of this mount.
type ShipMountSymbol string

const (
	ShipMountSymbolMOUNTGASSIPHONI       ShipMountSymbol = "MOUNT_GAS_SIPHON_I"
	ShipMountSymbolMOUNTGASSIPHONII      ShipMountSymbol = "MOUNT_GAS_SIPHON_II"
	ShipMountSymbolMOUNTGASSIPHONIII     ShipMountSymbol = "MOUNT_GAS_SIPHON_III"
	ShipMountSymbolMOUNTSURVEYORI        ShipMountSymbol = "MOUNT_SURVEYOR_I"
	ShipMountSymbolMOUNTSURVEYORII       ShipMountSymbol = "MOUNT_SURVEYOR_II"
	ShipMountSymbolMOUNTSURVEYORIII      ShipMountSymbol = "MOUNT_SURVEYOR_III"
	ShipMountSymbolMOUNTSENSORARRAYI     ShipMountSymbol = "MOUNT_SENSOR_ARRAY_I"
	ShipMountSymbolMOUNTSENSORARRAYII    ShipMountSymbol = "MOUNT_SENSOR_ARRAY_II"
	ShipMountSymbolMOUNTSENSORARRAYIII   ShipMountSymbol = "MOUNT_SENSOR_ARRAY_III"
	ShipMountSymbolMOUNTMININGLASERI     ShipMountSymbol = "MOUNT_MINING_LASER_I"
	ShipMountSymbolMOUNTMININGLASERII    ShipMountSymbol = "MOUNT_MINING_LASER_II"
	ShipMountSymbolMOUNTMININGLASERIII   ShipMountSymbol = "MOUNT_MINING_LASER_III"
	ShipMountSymbolMOUNTLASERCANNONI     ShipMountSymbol = "MOUNT_LASER_CANNON_I"
	ShipMountSymbolMOUNTMISSILELAUNCHERI ShipMountSymbol = "MOUNT_MISSILE_LAUNCHER_I"
	ShipMountSymbolMOUNTTURRETI          ShipMountSymbol = "MOUNT_TURRET_I"
)

// AllValues returns all ShipMountSymbol values.
func (ShipMountSymbol) AllValues() []ShipMountSymbol {
	return []ShipMountSymbol{
		ShipMountSymbolMOUNTGASSIPHONI,
		ShipMountSymbolMOUNTGASSIPHONII,
		ShipMountSymbolMOUNTGASSIPHONIII,
		ShipMountSymbolMOUNTSURVEYORI,
		ShipMountSymbolMOUNTSURVEYORII,
		ShipMountSymbolMOUNTSURVEYORIII,
		ShipMountSymbolMOUNTSENSORARRAYI,
		ShipMountSymbolMOUNTSENSORARRAYII,
		ShipMountSymbolMOUNTSENSORARRAYIII,
		ShipMountSymbolMOUNTMININGLASERI,
		ShipMountSymbolMOUNTMININGLASERII,
		ShipMountSymbolMOUNTMININGLASERIII,
		ShipMountSymbolMOUNTLASERCANNONI,
		ShipMountSymbolMOUNTMISSILELAUNCHERI,
		ShipMountSymbolMOUNTTURRETI,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShipMountSymbol) MarshalText() ([]byte, error) {
	switch s {
	case ShipMountSymbolMOUNTGASSIPHONI:
		return []byte(s), nil
	case ShipMountSymbolMOUNTGASSIPHONII:
		return []byte(s), nil
	case ShipMountSymbolMOUNTGASSIPHONIII:
		return []byte(s), nil
	case ShipMountSymbolMOUNTSURVEYORI:
		return []byte(s), nil
	case ShipMountSymbolMOUNTSURVEYORII:
		return []byte(s), nil
	case ShipMountSymbolMOUNTSURVEYORIII:
		return []byte(s), nil
	case ShipMountSymbolMOUNTSENSORARRAYI:
		return []byte(s), nil
	case ShipMountSymbolMOUNTSENSORARRAYII:
		return []byte(s), nil
	case ShipMountSymbolMOUNTSENSORARRAYIII:
		return []byte(s), nil
	case ShipMountSymbolMOUNTMININGLASERI:
		return []byte(s), nil
	case ShipMountSymbolMOUNTMININGLASERII:
		return []byte(s), nil
	case ShipMountSymbolMOUNTMININGLASERIII:
		return []byte(s), nil
	case ShipMountSymbolMOUNTLASERCANNONI:
		return []byte(s), nil
	case ShipMountSymbolMOUNTMISSILELAUNCHERI:
		return []byte(s), nil
	case ShipMountSymbolMOUNTTURRETI:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShipMountSymbol) UnmarshalText(data []byte) error {
	switch ShipMountSymbol(data) {
	case ShipMountSymbolMOUNTGASSIPHONI:
		*s = ShipMountSymbolMOUNTGASSIPHONI
		return nil
	case ShipMountSymbolMOUNTGASSIPHONII:
		*s = ShipMountSymbolMOUNTGASSIPHONII
		return nil
	case ShipMountSymbolMOUNTGASSIPHONIII:
		*s = ShipMountSymbolMOUNTGASSIPHONIII
		return nil
	case ShipMountSymbolMOUNTSURVEYORI:
		*s = ShipMountSymbolMOUNTSURVEYORI
		return nil
	case ShipMountSymbolMOUNTSURVEYORII:
		*s = ShipMountSymbolMOUNTSURVEYORII
		return nil
	case ShipMountSymbolMOUNTSURVEYORIII:
		*s = ShipMountSymbolMOUNTSURVEYORIII
		return nil
	case ShipMountSymbolMOUNTSENSORARRAYI:
		*s = ShipMountSymbolMOUNTSENSORARRAYI
		return nil
	case ShipMountSymbolMOUNTSENSORARRAYII:
		*s = ShipMountSymbolMOUNTSENSORARRAYII
		return nil
	case ShipMountSymbolMOUNTSENSORARRAYIII:
		*s = ShipMountSymbolMOUNTSENSORARRAYIII
		return nil
	case ShipMountSymbolMOUNTMININGLASERI:
		*s = ShipMountSymbolMOUNTMININGLASERI
		return nil
	case ShipMountSymbolMOUNTMININGLASERII:
		*s = ShipMountSymbolMOUNTMININGLASERII
		return nil
	case ShipMountSymbolMOUNTMININGLASERIII:
		*s = ShipMountSymbolMOUNTMININGLASERIII
		return nil
	case ShipMountSymbolMOUNTLASERCANNONI:
		*s = ShipMountSymbolMOUNTLASERCANNONI
		return nil
	case ShipMountSymbolMOUNTMISSILELAUNCHERI:
		*s = ShipMountSymbolMOUNTMISSILELAUNCHERI
		return nil
	case ShipMountSymbolMOUNTTURRETI:
		*s = ShipMountSymbolMOUNTTURRETI
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The navigation information of the ship.
// Ref: #/components/schemas/ShipNav
type ShipNav struct {
	SystemSymbol   SystemSymbol      `json:"systemSymbol"`
	WaypointSymbol WaypointSymbol    `json:"waypointSymbol"`
	Route          ShipNavRoute      `json:"route"`
	Status         ShipNavStatus     `json:"status"`
	FlightMode     ShipNavFlightMode `json:"flightMode"`
}

// GetSystemSymbol returns the value of SystemSymbol.
func (s *ShipNav) GetSystemSymbol() SystemSymbol {
	return s.SystemSymbol
}

// GetWaypointSymbol returns the value of WaypointSymbol.
func (s *ShipNav) GetWaypointSymbol() WaypointSymbol {
	return s.WaypointSymbol
}

// GetRoute returns the value of Route.
func (s *ShipNav) GetRoute() ShipNavRoute {
	return s.Route
}

// GetStatus returns the value of Status.
func (s *ShipNav) GetStatus() ShipNavStatus {
	return s.Status
}

// GetFlightMode returns the value of FlightMode.
func (s *ShipNav) GetFlightMode() ShipNavFlightMode {
	return s.FlightMode
}

// SetSystemSymbol sets the value of SystemSymbol.
func (s *ShipNav) SetSystemSymbol(val SystemSymbol) {
	s.SystemSymbol = val
}

// SetWaypointSymbol sets the value of WaypointSymbol.
func (s *ShipNav) SetWaypointSymbol(val WaypointSymbol) {
	s.WaypointSymbol = val
}

// SetRoute sets the value of Route.
func (s *ShipNav) SetRoute(val ShipNavRoute) {
	s.Route = val
}

// SetStatus sets the value of Status.
func (s *ShipNav) SetStatus(val ShipNavStatus) {
	s.Status = val
}

// SetFlightMode sets the value of FlightMode.
func (s *ShipNav) SetFlightMode(val ShipNavFlightMode) {
	s.FlightMode = val
}

// The ship's set speed when traveling between waypoints or systems.
// Ref: #/components/schemas/ShipNavFlightMode
type ShipNavFlightMode string

const (
	ShipNavFlightModeDRIFT   ShipNavFlightMode = "DRIFT"
	ShipNavFlightModeSTEALTH ShipNavFlightMode = "STEALTH"
	ShipNavFlightModeCRUISE  ShipNavFlightMode = "CRUISE"
	ShipNavFlightModeBURN    ShipNavFlightMode = "BURN"
)

// AllValues returns all ShipNavFlightMode values.
func (ShipNavFlightMode) AllValues() []ShipNavFlightMode {
	return []ShipNavFlightMode{
		ShipNavFlightModeDRIFT,
		ShipNavFlightModeSTEALTH,
		ShipNavFlightModeCRUISE,
		ShipNavFlightModeBURN,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShipNavFlightMode) MarshalText() ([]byte, error) {
	switch s {
	case ShipNavFlightModeDRIFT:
		return []byte(s), nil
	case ShipNavFlightModeSTEALTH:
		return []byte(s), nil
	case ShipNavFlightModeCRUISE:
		return []byte(s), nil
	case ShipNavFlightModeBURN:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShipNavFlightMode) UnmarshalText(data []byte) error {
	switch ShipNavFlightMode(data) {
	case ShipNavFlightModeDRIFT:
		*s = ShipNavFlightModeDRIFT
		return nil
	case ShipNavFlightModeSTEALTH:
		*s = ShipNavFlightModeSTEALTH
		return nil
	case ShipNavFlightModeCRUISE:
		*s = ShipNavFlightModeCRUISE
		return nil
	case ShipNavFlightModeBURN:
		*s = ShipNavFlightModeBURN
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The routing information for the ship's most recent transit or current location.
// Ref: #/components/schemas/ShipNavRoute
type ShipNavRoute struct {
	Destination ShipNavRouteWaypoint `json:"destination"`
	Origin      ShipNavRouteWaypoint `json:"origin"`
	// The date time of the ship's departure.
	DepartureTime time.Time `json:"departureTime"`
	// The date time of the ship's arrival. If the ship is in-transit, this is the expected time of
	// arrival.
	Arrival time.Time `json:"arrival"`
}

// GetDestination returns the value of Destination.
func (s *ShipNavRoute) GetDestination() ShipNavRouteWaypoint {
	return s.Destination
}

// GetOrigin returns the value of Origin.
func (s *ShipNavRoute) GetOrigin() ShipNavRouteWaypoint {
	return s.Origin
}

// GetDepartureTime returns the value of DepartureTime.
func (s *ShipNavRoute) GetDepartureTime() time.Time {
	return s.DepartureTime
}

// GetArrival returns the value of Arrival.
func (s *ShipNavRoute) GetArrival() time.Time {
	return s.Arrival
}

// SetDestination sets the value of Destination.
func (s *ShipNavRoute) SetDestination(val ShipNavRouteWaypoint) {
	s.Destination = val
}

// SetOrigin sets the value of Origin.
func (s *ShipNavRoute) SetOrigin(val ShipNavRouteWaypoint) {
	s.Origin = val
}

// SetDepartureTime sets the value of DepartureTime.
func (s *ShipNavRoute) SetDepartureTime(val time.Time) {
	s.DepartureTime = val
}

// SetArrival sets the value of Arrival.
func (s *ShipNavRoute) SetArrival(val time.Time) {
	s.Arrival = val
}

// The destination or departure of a ships nav route.
// Ref: #/components/schemas/ShipNavRouteWaypoint
type ShipNavRouteWaypoint struct {
	// The symbol of the waypoint.
	Symbol       string       `json:"symbol"`
	Type         WaypointType `json:"type"`
	SystemSymbol SystemSymbol `json:"systemSymbol"`
	// Position in the universe in the x axis.
	X int `json:"x"`
	// Position in the universe in the y axis.
	Y int `json:"y"`
}

// GetSymbol returns the value of Symbol.
func (s *ShipNavRouteWaypoint) GetSymbol() string {
	return s.Symbol
}

// GetType returns the value of Type.
func (s *ShipNavRouteWaypoint) GetType() WaypointType {
	return s.Type
}

// GetSystemSymbol returns the value of SystemSymbol.
func (s *ShipNavRouteWaypoint) GetSystemSymbol() SystemSymbol {
	return s.SystemSymbol
}

// GetX returns the value of X.
func (s *ShipNavRouteWaypoint) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *ShipNavRouteWaypoint) GetY() int {
	return s.Y
}

// SetSymbol sets the value of Symbol.
func (s *ShipNavRouteWaypoint) SetSymbol(val string) {
	s.Symbol = val
}

// SetType sets the value of Type.
func (s *ShipNavRouteWaypoint) SetType(val WaypointType) {
	s.Type = val
}

// SetSystemSymbol sets the value of SystemSymbol.
func (s *ShipNavRouteWaypoint) SetSystemSymbol(val SystemSymbol) {
	s.SystemSymbol = val
}

// SetX sets the value of X.
func (s *ShipNavRouteWaypoint) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *ShipNavRouteWaypoint) SetY(val int) {
	s.Y = val
}

// The current status of the ship.
// Ref: #/components/schemas/ShipNavStatus
type ShipNavStatus string

const (
	ShipNavStatusINTRANSIT ShipNavStatus = "IN_TRANSIT"
	ShipNavStatusINORBIT   ShipNavStatus = "IN_ORBIT"
	ShipNavStatusDOCKED    ShipNavStatus = "DOCKED"
)

// AllValues returns all ShipNavStatus values.
func (ShipNavStatus) AllValues() []ShipNavStatus {
	return []ShipNavStatus{
		ShipNavStatusINTRANSIT,
		ShipNavStatusINORBIT,
		ShipNavStatusDOCKED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShipNavStatus) MarshalText() ([]byte, error) {
	switch s {
	case ShipNavStatusINTRANSIT:
		return []byte(s), nil
	case ShipNavStatusINORBIT:
		return []byte(s), nil
	case ShipNavStatusDOCKED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShipNavStatus) UnmarshalText(data []byte) error {
	switch ShipNavStatus(data) {
	case ShipNavStatusINTRANSIT:
		*s = ShipNavStatusINTRANSIT
		return nil
	case ShipNavStatusINORBIT:
		*s = ShipNavStatusINORBIT
		return nil
	case ShipNavStatusDOCKED:
		*s = ShipNavStatusDOCKED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.
// Ref: #/components/schemas/ShipReactor
type ShipReactor struct {
	// Symbol of the reactor.
	Symbol ShipReactorSymbol `json:"symbol"`
	// Name of the reactor.
	Name string `json:"name"`
	// Description of the reactor.
	Description string                 `json:"description"`
	Condition   ShipComponentCondition `json:"condition"`
	Integrity   ShipComponentIntegrity `json:"integrity"`
	// The amount of power provided by this reactor. The more power a reactor provides to the ship, the
	// lower the cooldown it gets when using a module or mount that taxes the ship's power.
	PowerOutput  int              `json:"powerOutput"`
	Requirements ShipRequirements `json:"requirements"`
}

// GetSymbol returns the value of Symbol.
func (s *ShipReactor) GetSymbol() ShipReactorSymbol {
	return s.Symbol
}

// GetName returns the value of Name.
func (s *ShipReactor) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ShipReactor) GetDescription() string {
	return s.Description
}

// GetCondition returns the value of Condition.
func (s *ShipReactor) GetCondition() ShipComponentCondition {
	return s.Condition
}

// GetIntegrity returns the value of Integrity.
func (s *ShipReactor) GetIntegrity() ShipComponentIntegrity {
	return s.Integrity
}

// GetPowerOutput returns the value of PowerOutput.
func (s *ShipReactor) GetPowerOutput() int {
	return s.PowerOutput
}

// GetRequirements returns the value of Requirements.
func (s *ShipReactor) GetRequirements() ShipRequirements {
	return s.Requirements
}

// SetSymbol sets the value of Symbol.
func (s *ShipReactor) SetSymbol(val ShipReactorSymbol) {
	s.Symbol = val
}

// SetName sets the value of Name.
func (s *ShipReactor) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ShipReactor) SetDescription(val string) {
	s.Description = val
}

// SetCondition sets the value of Condition.
func (s *ShipReactor) SetCondition(val ShipComponentCondition) {
	s.Condition = val
}

// SetIntegrity sets the value of Integrity.
func (s *ShipReactor) SetIntegrity(val ShipComponentIntegrity) {
	s.Integrity = val
}

// SetPowerOutput sets the value of PowerOutput.
func (s *ShipReactor) SetPowerOutput(val int) {
	s.PowerOutput = val
}

// SetRequirements sets the value of Requirements.
func (s *ShipReactor) SetRequirements(val ShipRequirements) {
	s.Requirements = val
}

// Symbol of the reactor.
type ShipReactorSymbol string

const (
	ShipReactorSymbolREACTORSOLARI      ShipReactorSymbol = "REACTOR_SOLAR_I"
	ShipReactorSymbolREACTORFUSIONI     ShipReactorSymbol = "REACTOR_FUSION_I"
	ShipReactorSymbolREACTORFISSIONI    ShipReactorSymbol = "REACTOR_FISSION_I"
	ShipReactorSymbolREACTORCHEMICALI   ShipReactorSymbol = "REACTOR_CHEMICAL_I"
	ShipReactorSymbolREACTORANTIMATTERI ShipReactorSymbol = "REACTOR_ANTIMATTER_I"
)

// AllValues returns all ShipReactorSymbol values.
func (ShipReactorSymbol) AllValues() []ShipReactorSymbol {
	return []ShipReactorSymbol{
		ShipReactorSymbolREACTORSOLARI,
		ShipReactorSymbolREACTORFUSIONI,
		ShipReactorSymbolREACTORFISSIONI,
		ShipReactorSymbolREACTORCHEMICALI,
		ShipReactorSymbolREACTORANTIMATTERI,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShipReactorSymbol) MarshalText() ([]byte, error) {
	switch s {
	case ShipReactorSymbolREACTORSOLARI:
		return []byte(s), nil
	case ShipReactorSymbolREACTORFUSIONI:
		return []byte(s), nil
	case ShipReactorSymbolREACTORFISSIONI:
		return []byte(s), nil
	case ShipReactorSymbolREACTORCHEMICALI:
		return []byte(s), nil
	case ShipReactorSymbolREACTORANTIMATTERI:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShipReactorSymbol) UnmarshalText(data []byte) error {
	switch ShipReactorSymbol(data) {
	case ShipReactorSymbolREACTORSOLARI:
		*s = ShipReactorSymbolREACTORSOLARI
		return nil
	case ShipReactorSymbolREACTORFUSIONI:
		*s = ShipReactorSymbolREACTORFUSIONI
		return nil
	case ShipReactorSymbolREACTORFISSIONI:
		*s = ShipReactorSymbolREACTORFISSIONI
		return nil
	case ShipReactorSymbolREACTORCHEMICALI:
		*s = ShipReactorSymbolREACTORCHEMICALI
		return nil
	case ShipReactorSymbolREACTORANTIMATTERI:
		*s = ShipReactorSymbolREACTORANTIMATTERI
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ShipRefineCreated struct {
	Data ShipRefineCreatedData `json:"data"`
}

// GetData returns the value of Data.
func (s *ShipRefineCreated) GetData() ShipRefineCreatedData {
	return s.Data
}

// SetData sets the value of Data.
func (s *ShipRefineCreated) SetData(val ShipRefineCreatedData) {
	s.Data = val
}

type ShipRefineCreatedData struct {
	Cargo    ShipCargo `json:"cargo"`
	Cooldown Cooldown  `json:"cooldown"`
	// Goods that were produced by this refining process.
	Produced []ShipRefineCreatedDataProducedItem `json:"produced"`
	// Goods that were consumed during this refining process.
	Consumed []ShipRefineCreatedDataConsumedItem `json:"consumed"`
}

// GetCargo returns the value of Cargo.
func (s *ShipRefineCreatedData) GetCargo() ShipCargo {
	return s.Cargo
}

// GetCooldown returns the value of Cooldown.
func (s *ShipRefineCreatedData) GetCooldown() Cooldown {
	return s.Cooldown
}

// GetProduced returns the value of Produced.
func (s *ShipRefineCreatedData) GetProduced() []ShipRefineCreatedDataProducedItem {
	return s.Produced
}

// GetConsumed returns the value of Consumed.
func (s *ShipRefineCreatedData) GetConsumed() []ShipRefineCreatedDataConsumedItem {
	return s.Consumed
}

// SetCargo sets the value of Cargo.
func (s *ShipRefineCreatedData) SetCargo(val ShipCargo) {
	s.Cargo = val
}

// SetCooldown sets the value of Cooldown.
func (s *ShipRefineCreatedData) SetCooldown(val Cooldown) {
	s.Cooldown = val
}

// SetProduced sets the value of Produced.
func (s *ShipRefineCreatedData) SetProduced(val []ShipRefineCreatedDataProducedItem) {
	s.Produced = val
}

// SetConsumed sets the value of Consumed.
func (s *ShipRefineCreatedData) SetConsumed(val []ShipRefineCreatedDataConsumedItem) {
	s.Consumed = val
}

type ShipRefineCreatedDataConsumedItem struct {
	// Symbol of the good.
	TradeSymbol string `json:"tradeSymbol"`
	// Amount of units of the good.
	Units int `json:"units"`
}

// GetTradeSymbol returns the value of TradeSymbol.
func (s *ShipRefineCreatedDataConsumedItem) GetTradeSymbol() string {
	return s.TradeSymbol
}

// GetUnits returns the value of Units.
func (s *ShipRefineCreatedDataConsumedItem) GetUnits() int {
	return s.Units
}

// SetTradeSymbol sets the value of TradeSymbol.
func (s *ShipRefineCreatedDataConsumedItem) SetTradeSymbol(val string) {
	s.TradeSymbol = val
}

// SetUnits sets the value of Units.
func (s *ShipRefineCreatedDataConsumedItem) SetUnits(val int) {
	s.Units = val
}

type ShipRefineCreatedDataProducedItem struct {
	// Symbol of the good.
	TradeSymbol string `json:"tradeSymbol"`
	// Amount of units of the good.
	Units int `json:"units"`
}

// GetTradeSymbol returns the value of TradeSymbol.
func (s *ShipRefineCreatedDataProducedItem) GetTradeSymbol() string {
	return s.TradeSymbol
}

// GetUnits returns the value of Units.
func (s *ShipRefineCreatedDataProducedItem) GetUnits() int {
	return s.Units
}

// SetTradeSymbol sets the value of TradeSymbol.
func (s *ShipRefineCreatedDataProducedItem) SetTradeSymbol(val string) {
	s.TradeSymbol = val
}

// SetUnits sets the value of Units.
func (s *ShipRefineCreatedDataProducedItem) SetUnits(val int) {
	s.Units = val
}

type ShipRefineReq struct {
	// The type of good to produce out of the refining process.
	Produce ShipRefineReqProduce `json:"produce"`
}

// GetProduce returns the value of Produce.
func (s *ShipRefineReq) GetProduce() ShipRefineReqProduce {
	return s.Produce
}

// SetProduce sets the value of Produce.
func (s *ShipRefineReq) SetProduce(val ShipRefineReqProduce) {
	s.Produce = val
}

// The type of good to produce out of the refining process.
type ShipRefineReqProduce string

const (
	ShipRefineReqProduceIRON     ShipRefineReqProduce = "IRON"
	ShipRefineReqProduceCOPPER   ShipRefineReqProduce = "COPPER"
	ShipRefineReqProduceSILVER   ShipRefineReqProduce = "SILVER"
	ShipRefineReqProduceGOLD     ShipRefineReqProduce = "GOLD"
	ShipRefineReqProduceALUMINUM ShipRefineReqProduce = "ALUMINUM"
	ShipRefineReqProducePLATINUM ShipRefineReqProduce = "PLATINUM"
	ShipRefineReqProduceURANITE  ShipRefineReqProduce = "URANITE"
	ShipRefineReqProduceMERITIUM ShipRefineReqProduce = "MERITIUM"
	ShipRefineReqProduceFUEL     ShipRefineReqProduce = "FUEL"
)

// AllValues returns all ShipRefineReqProduce values.
func (ShipRefineReqProduce) AllValues() []ShipRefineReqProduce {
	return []ShipRefineReqProduce{
		ShipRefineReqProduceIRON,
		ShipRefineReqProduceCOPPER,
		ShipRefineReqProduceSILVER,
		ShipRefineReqProduceGOLD,
		ShipRefineReqProduceALUMINUM,
		ShipRefineReqProducePLATINUM,
		ShipRefineReqProduceURANITE,
		ShipRefineReqProduceMERITIUM,
		ShipRefineReqProduceFUEL,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShipRefineReqProduce) MarshalText() ([]byte, error) {
	switch s {
	case ShipRefineReqProduceIRON:
		return []byte(s), nil
	case ShipRefineReqProduceCOPPER:
		return []byte(s), nil
	case ShipRefineReqProduceSILVER:
		return []byte(s), nil
	case ShipRefineReqProduceGOLD:
		return []byte(s), nil
	case ShipRefineReqProduceALUMINUM:
		return []byte(s), nil
	case ShipRefineReqProducePLATINUM:
		return []byte(s), nil
	case ShipRefineReqProduceURANITE:
		return []byte(s), nil
	case ShipRefineReqProduceMERITIUM:
		return []byte(s), nil
	case ShipRefineReqProduceFUEL:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShipRefineReqProduce) UnmarshalText(data []byte) error {
	switch ShipRefineReqProduce(data) {
	case ShipRefineReqProduceIRON:
		*s = ShipRefineReqProduceIRON
		return nil
	case ShipRefineReqProduceCOPPER:
		*s = ShipRefineReqProduceCOPPER
		return nil
	case ShipRefineReqProduceSILVER:
		*s = ShipRefineReqProduceSILVER
		return nil
	case ShipRefineReqProduceGOLD:
		*s = ShipRefineReqProduceGOLD
		return nil
	case ShipRefineReqProduceALUMINUM:
		*s = ShipRefineReqProduceALUMINUM
		return nil
	case ShipRefineReqProducePLATINUM:
		*s = ShipRefineReqProducePLATINUM
		return nil
	case ShipRefineReqProduceURANITE:
		*s = ShipRefineReqProduceURANITE
		return nil
	case ShipRefineReqProduceMERITIUM:
		*s = ShipRefineReqProduceMERITIUM
		return nil
	case ShipRefineReqProduceFUEL:
		*s = ShipRefineReqProduceFUEL
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The public registration information of the ship.
// Ref: #/components/schemas/ShipRegistration
type ShipRegistration struct {
	// The agent's registered name of the ship.
	Name string `json:"name"`
	// The symbol of the faction the ship is registered with.
	FactionSymbol string   `json:"factionSymbol"`
	Role          ShipRole `json:"role"`
}

// GetName returns the value of Name.
func (s *ShipRegistration) GetName() string {
	return s.Name
}

// GetFactionSymbol returns the value of FactionSymbol.
func (s *ShipRegistration) GetFactionSymbol() string {
	return s.FactionSymbol
}

// GetRole returns the value of Role.
func (s *ShipRegistration) GetRole() ShipRole {
	return s.Role
}

// SetName sets the value of Name.
func (s *ShipRegistration) SetName(val string) {
	s.Name = val
}

// SetFactionSymbol sets the value of FactionSymbol.
func (s *ShipRegistration) SetFactionSymbol(val string) {
	s.FactionSymbol = val
}

// SetRole sets the value of Role.
func (s *ShipRegistration) SetRole(val ShipRole) {
	s.Role = val
}

// The requirements for installation on a ship.
// Ref: #/components/schemas/ShipRequirements
type ShipRequirements struct {
	// The amount of power required from the reactor.
	Power OptInt `json:"power"`
	// The number of crew required for operation.
	Crew OptInt `json:"crew"`
	// The number of module slots required for installation.
	Slots OptInt `json:"slots"`
}

// GetPower returns the value of Power.
func (s *ShipRequirements) GetPower() OptInt {
	return s.Power
}

// GetCrew returns the value of Crew.
func (s *ShipRequirements) GetCrew() OptInt {
	return s.Crew
}

// GetSlots returns the value of Slots.
func (s *ShipRequirements) GetSlots() OptInt {
	return s.Slots
}

// SetPower sets the value of Power.
func (s *ShipRequirements) SetPower(val OptInt) {
	s.Power = val
}

// SetCrew sets the value of Crew.
func (s *ShipRequirements) SetCrew(val OptInt) {
	s.Crew = val
}

// SetSlots sets the value of Slots.
func (s *ShipRequirements) SetSlots(val OptInt) {
	s.Slots = val
}

// The registered role of the ship.
// Ref: #/components/schemas/ShipRole
type ShipRole string

const (
	ShipRoleFABRICATOR  ShipRole = "FABRICATOR"
	ShipRoleHARVESTER   ShipRole = "HARVESTER"
	ShipRoleHAULER      ShipRole = "HAULER"
	ShipRoleINTERCEPTOR ShipRole = "INTERCEPTOR"
	ShipRoleEXCAVATOR   ShipRole = "EXCAVATOR"
	ShipRoleTRANSPORT   ShipRole = "TRANSPORT"
	ShipRoleREPAIR      ShipRole = "REPAIR"
	ShipRoleSURVEYOR    ShipRole = "SURVEYOR"
	ShipRoleCOMMAND     ShipRole = "COMMAND"
	ShipRoleCARRIER     ShipRole = "CARRIER"
	ShipRolePATROL      ShipRole = "PATROL"
	ShipRoleSATELLITE   ShipRole = "SATELLITE"
	ShipRoleEXPLORER    ShipRole = "EXPLORER"
	ShipRoleREFINERY    ShipRole = "REFINERY"
)

// AllValues returns all ShipRole values.
func (ShipRole) AllValues() []ShipRole {
	return []ShipRole{
		ShipRoleFABRICATOR,
		ShipRoleHARVESTER,
		ShipRoleHAULER,
		ShipRoleINTERCEPTOR,
		ShipRoleEXCAVATOR,
		ShipRoleTRANSPORT,
		ShipRoleREPAIR,
		ShipRoleSURVEYOR,
		ShipRoleCOMMAND,
		ShipRoleCARRIER,
		ShipRolePATROL,
		ShipRoleSATELLITE,
		ShipRoleEXPLORER,
		ShipRoleREFINERY,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShipRole) MarshalText() ([]byte, error) {
	switch s {
	case ShipRoleFABRICATOR:
		return []byte(s), nil
	case ShipRoleHARVESTER:
		return []byte(s), nil
	case ShipRoleHAULER:
		return []byte(s), nil
	case ShipRoleINTERCEPTOR:
		return []byte(s), nil
	case ShipRoleEXCAVATOR:
		return []byte(s), nil
	case ShipRoleTRANSPORT:
		return []byte(s), nil
	case ShipRoleREPAIR:
		return []byte(s), nil
	case ShipRoleSURVEYOR:
		return []byte(s), nil
	case ShipRoleCOMMAND:
		return []byte(s), nil
	case ShipRoleCARRIER:
		return []byte(s), nil
	case ShipRolePATROL:
		return []byte(s), nil
	case ShipRoleSATELLITE:
		return []byte(s), nil
	case ShipRoleEXPLORER:
		return []byte(s), nil
	case ShipRoleREFINERY:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShipRole) UnmarshalText(data []byte) error {
	switch ShipRole(data) {
	case ShipRoleFABRICATOR:
		*s = ShipRoleFABRICATOR
		return nil
	case ShipRoleHARVESTER:
		*s = ShipRoleHARVESTER
		return nil
	case ShipRoleHAULER:
		*s = ShipRoleHAULER
		return nil
	case ShipRoleINTERCEPTOR:
		*s = ShipRoleINTERCEPTOR
		return nil
	case ShipRoleEXCAVATOR:
		*s = ShipRoleEXCAVATOR
		return nil
	case ShipRoleTRANSPORT:
		*s = ShipRoleTRANSPORT
		return nil
	case ShipRoleREPAIR:
		*s = ShipRoleREPAIR
		return nil
	case ShipRoleSURVEYOR:
		*s = ShipRoleSURVEYOR
		return nil
	case ShipRoleCOMMAND:
		*s = ShipRoleCOMMAND
		return nil
	case ShipRoleCARRIER:
		*s = ShipRoleCARRIER
		return nil
	case ShipRolePATROL:
		*s = ShipRolePATROL
		return nil
	case ShipRoleSATELLITE:
		*s = ShipRoleSATELLITE
		return nil
	case ShipRoleEXPLORER:
		*s = ShipRoleEXPLORER
		return nil
	case ShipRoleREFINERY:
		*s = ShipRoleREFINERY
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Type of ship.
// Ref: #/components/schemas/ShipType
type ShipType string

const (
	ShipTypeSHIPPROBE             ShipType = "SHIP_PROBE"
	ShipTypeSHIPMININGDRONE       ShipType = "SHIP_MINING_DRONE"
	ShipTypeSHIPSIPHONDRONE       ShipType = "SHIP_SIPHON_DRONE"
	ShipTypeSHIPINTERCEPTOR       ShipType = "SHIP_INTERCEPTOR"
	ShipTypeSHIPLIGHTHAULER       ShipType = "SHIP_LIGHT_HAULER"
	ShipTypeSHIPCOMMANDFRIGATE    ShipType = "SHIP_COMMAND_FRIGATE"
	ShipTypeSHIPEXPLORER          ShipType = "SHIP_EXPLORER"
	ShipTypeSHIPHEAVYFREIGHTER    ShipType = "SHIP_HEAVY_FREIGHTER"
	ShipTypeSHIPLIGHTSHUTTLE      ShipType = "SHIP_LIGHT_SHUTTLE"
	ShipTypeSHIPOREHOUND          ShipType = "SHIP_ORE_HOUND"
	ShipTypeSHIPREFININGFREIGHTER ShipType = "SHIP_REFINING_FREIGHTER"
	ShipTypeSHIPSURVEYOR          ShipType = "SHIP_SURVEYOR"
)

// AllValues returns all ShipType values.
func (ShipType) AllValues() []ShipType {
	return []ShipType{
		ShipTypeSHIPPROBE,
		ShipTypeSHIPMININGDRONE,
		ShipTypeSHIPSIPHONDRONE,
		ShipTypeSHIPINTERCEPTOR,
		ShipTypeSHIPLIGHTHAULER,
		ShipTypeSHIPCOMMANDFRIGATE,
		ShipTypeSHIPEXPLORER,
		ShipTypeSHIPHEAVYFREIGHTER,
		ShipTypeSHIPLIGHTSHUTTLE,
		ShipTypeSHIPOREHOUND,
		ShipTypeSHIPREFININGFREIGHTER,
		ShipTypeSHIPSURVEYOR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShipType) MarshalText() ([]byte, error) {
	switch s {
	case ShipTypeSHIPPROBE:
		return []byte(s), nil
	case ShipTypeSHIPMININGDRONE:
		return []byte(s), nil
	case ShipTypeSHIPSIPHONDRONE:
		return []byte(s), nil
	case ShipTypeSHIPINTERCEPTOR:
		return []byte(s), nil
	case ShipTypeSHIPLIGHTHAULER:
		return []byte(s), nil
	case ShipTypeSHIPCOMMANDFRIGATE:
		return []byte(s), nil
	case ShipTypeSHIPEXPLORER:
		return []byte(s), nil
	case ShipTypeSHIPHEAVYFREIGHTER:
		return []byte(s), nil
	case ShipTypeSHIPLIGHTSHUTTLE:
		return []byte(s), nil
	case ShipTypeSHIPOREHOUND:
		return []byte(s), nil
	case ShipTypeSHIPREFININGFREIGHTER:
		return []byte(s), nil
	case ShipTypeSHIPSURVEYOR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShipType) UnmarshalText(data []byte) error {
	switch ShipType(data) {
	case ShipTypeSHIPPROBE:
		*s = ShipTypeSHIPPROBE
		return nil
	case ShipTypeSHIPMININGDRONE:
		*s = ShipTypeSHIPMININGDRONE
		return nil
	case ShipTypeSHIPSIPHONDRONE:
		*s = ShipTypeSHIPSIPHONDRONE
		return nil
	case ShipTypeSHIPINTERCEPTOR:
		*s = ShipTypeSHIPINTERCEPTOR
		return nil
	case ShipTypeSHIPLIGHTHAULER:
		*s = ShipTypeSHIPLIGHTHAULER
		return nil
	case ShipTypeSHIPCOMMANDFRIGATE:
		*s = ShipTypeSHIPCOMMANDFRIGATE
		return nil
	case ShipTypeSHIPEXPLORER:
		*s = ShipTypeSHIPEXPLORER
		return nil
	case ShipTypeSHIPHEAVYFREIGHTER:
		*s = ShipTypeSHIPHEAVYFREIGHTER
		return nil
	case ShipTypeSHIPLIGHTSHUTTLE:
		*s = ShipTypeSHIPLIGHTSHUTTLE
		return nil
	case ShipTypeSHIPOREHOUND:
		*s = ShipTypeSHIPOREHOUND
		return nil
	case ShipTypeSHIPREFININGFREIGHTER:
		*s = ShipTypeSHIPREFININGFREIGHTER
		return nil
	case ShipTypeSHIPSURVEYOR:
		*s = ShipTypeSHIPSURVEYOR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Shipyard
type Shipyard struct {
	// The symbol of the shipyard. The symbol is the same as the waypoint where the shipyard is located.
	Symbol string `json:"symbol"`
	// The list of ship types available for purchase at this shipyard.
	ShipTypes []ShipyardShipTypesItem `json:"shipTypes"`
	// The list of recent transactions at this shipyard.
	Transactions []ShipyardTransaction `json:"transactions"`
	// The ships that are currently available for purchase at the shipyard.
	Ships []ShipyardShip `json:"ships"`
	// The fee to modify a ship at this shipyard. This includes installing or removing modules and mounts
	// on a ship. In the case of mounts, the fee is a flat rate per mount. In the case of modules, the
	// fee is per slot the module occupies.
	ModificationsFee int `json:"modificationsFee"`
}

// GetSymbol returns the value of Symbol.
func (s *Shipyard) GetSymbol() string {
	return s.Symbol
}

// GetShipTypes returns the value of ShipTypes.
func (s *Shipyard) GetShipTypes() []ShipyardShipTypesItem {
	return s.ShipTypes
}

// GetTransactions returns the value of Transactions.
func (s *Shipyard) GetTransactions() []ShipyardTransaction {
	return s.Transactions
}

// GetShips returns the value of Ships.
func (s *Shipyard) GetShips() []ShipyardShip {
	return s.Ships
}

// GetModificationsFee returns the value of ModificationsFee.
func (s *Shipyard) GetModificationsFee() int {
	return s.ModificationsFee
}

// SetSymbol sets the value of Symbol.
func (s *Shipyard) SetSymbol(val string) {
	s.Symbol = val
}

// SetShipTypes sets the value of ShipTypes.
func (s *Shipyard) SetShipTypes(val []ShipyardShipTypesItem) {
	s.ShipTypes = val
}

// SetTransactions sets the value of Transactions.
func (s *Shipyard) SetTransactions(val []ShipyardTransaction) {
	s.Transactions = val
}

// SetShips sets the value of Ships.
func (s *Shipyard) SetShips(val []ShipyardShip) {
	s.Ships = val
}

// SetModificationsFee sets the value of ModificationsFee.
func (s *Shipyard) SetModificationsFee(val int) {
	s.ModificationsFee = val
}

// Ref: #/components/schemas/ShipyardShip
type ShipyardShip struct {
	Type          ShipType         `json:"type"`
	Name          string           `json:"name"`
	Description   string           `json:"description"`
	Supply        SupplyLevel      `json:"supply"`
	Activity      OptActivityLevel `json:"activity"`
	PurchasePrice int              `json:"purchasePrice"`
	Frame         ShipFrame        `json:"frame"`
	Reactor       ShipReactor      `json:"reactor"`
	Engine        ShipEngine       `json:"engine"`
	Modules       []ShipModule     `json:"modules"`
	Mounts        []ShipMount      `json:"mounts"`
	Crew          ShipyardShipCrew `json:"crew"`
}

// GetType returns the value of Type.
func (s *ShipyardShip) GetType() ShipType {
	return s.Type
}

// GetName returns the value of Name.
func (s *ShipyardShip) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ShipyardShip) GetDescription() string {
	return s.Description
}

// GetSupply returns the value of Supply.
func (s *ShipyardShip) GetSupply() SupplyLevel {
	return s.Supply
}

// GetActivity returns the value of Activity.
func (s *ShipyardShip) GetActivity() OptActivityLevel {
	return s.Activity
}

// GetPurchasePrice returns the value of PurchasePrice.
func (s *ShipyardShip) GetPurchasePrice() int {
	return s.PurchasePrice
}

// GetFrame returns the value of Frame.
func (s *ShipyardShip) GetFrame() ShipFrame {
	return s.Frame
}

// GetReactor returns the value of Reactor.
func (s *ShipyardShip) GetReactor() ShipReactor {
	return s.Reactor
}

// GetEngine returns the value of Engine.
func (s *ShipyardShip) GetEngine() ShipEngine {
	return s.Engine
}

// GetModules returns the value of Modules.
func (s *ShipyardShip) GetModules() []ShipModule {
	return s.Modules
}

// GetMounts returns the value of Mounts.
func (s *ShipyardShip) GetMounts() []ShipMount {
	return s.Mounts
}

// GetCrew returns the value of Crew.
func (s *ShipyardShip) GetCrew() ShipyardShipCrew {
	return s.Crew
}

// SetType sets the value of Type.
func (s *ShipyardShip) SetType(val ShipType) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *ShipyardShip) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ShipyardShip) SetDescription(val string) {
	s.Description = val
}

// SetSupply sets the value of Supply.
func (s *ShipyardShip) SetSupply(val SupplyLevel) {
	s.Supply = val
}

// SetActivity sets the value of Activity.
func (s *ShipyardShip) SetActivity(val OptActivityLevel) {
	s.Activity = val
}

// SetPurchasePrice sets the value of PurchasePrice.
func (s *ShipyardShip) SetPurchasePrice(val int) {
	s.PurchasePrice = val
}

// SetFrame sets the value of Frame.
func (s *ShipyardShip) SetFrame(val ShipFrame) {
	s.Frame = val
}

// SetReactor sets the value of Reactor.
func (s *ShipyardShip) SetReactor(val ShipReactor) {
	s.Reactor = val
}

// SetEngine sets the value of Engine.
func (s *ShipyardShip) SetEngine(val ShipEngine) {
	s.Engine = val
}

// SetModules sets the value of Modules.
func (s *ShipyardShip) SetModules(val []ShipModule) {
	s.Modules = val
}

// SetMounts sets the value of Mounts.
func (s *ShipyardShip) SetMounts(val []ShipMount) {
	s.Mounts = val
}

// SetCrew sets the value of Crew.
func (s *ShipyardShip) SetCrew(val ShipyardShipCrew) {
	s.Crew = val
}

type ShipyardShipCrew struct {
	Required int `json:"required"`
	Capacity int `json:"capacity"`
}

// GetRequired returns the value of Required.
func (s *ShipyardShipCrew) GetRequired() int {
	return s.Required
}

// GetCapacity returns the value of Capacity.
func (s *ShipyardShipCrew) GetCapacity() int {
	return s.Capacity
}

// SetRequired sets the value of Required.
func (s *ShipyardShipCrew) SetRequired(val int) {
	s.Required = val
}

// SetCapacity sets the value of Capacity.
func (s *ShipyardShipCrew) SetCapacity(val int) {
	s.Capacity = val
}

type ShipyardShipTypesItem struct {
	Type ShipType `json:"type"`
}

// GetType returns the value of Type.
func (s *ShipyardShipTypesItem) GetType() ShipType {
	return s.Type
}

// SetType sets the value of Type.
func (s *ShipyardShipTypesItem) SetType(val ShipType) {
	s.Type = val
}

// Results of a transaction with a shipyard.
// Ref: #/components/schemas/ShipyardTransaction
type ShipyardTransaction struct {
	WaypointSymbol WaypointSymbol `json:"waypointSymbol"`
	// The symbol of the ship that was the subject of the transaction.
	//
	// Deprecated: schema marks this property as deprecated.
	ShipSymbol string `json:"shipSymbol"`
	// The symbol of the ship that was the subject of the transaction.
	ShipType string `json:"shipType"`
	// The price of the transaction.
	Price int `json:"price"`
	// The symbol of the agent that made the transaction.
	AgentSymbol string `json:"agentSymbol"`
	// The timestamp of the transaction.
	Timestamp time.Time `json:"timestamp"`
}

// GetWaypointSymbol returns the value of WaypointSymbol.
func (s *ShipyardTransaction) GetWaypointSymbol() WaypointSymbol {
	return s.WaypointSymbol
}

// GetShipSymbol returns the value of ShipSymbol.
func (s *ShipyardTransaction) GetShipSymbol() string {
	return s.ShipSymbol
}

// GetShipType returns the value of ShipType.
func (s *ShipyardTransaction) GetShipType() string {
	return s.ShipType
}

// GetPrice returns the value of Price.
func (s *ShipyardTransaction) GetPrice() int {
	return s.Price
}

// GetAgentSymbol returns the value of AgentSymbol.
func (s *ShipyardTransaction) GetAgentSymbol() string {
	return s.AgentSymbol
}

// GetTimestamp returns the value of Timestamp.
func (s *ShipyardTransaction) GetTimestamp() time.Time {
	return s.Timestamp
}

// SetWaypointSymbol sets the value of WaypointSymbol.
func (s *ShipyardTransaction) SetWaypointSymbol(val WaypointSymbol) {
	s.WaypointSymbol = val
}

// SetShipSymbol sets the value of ShipSymbol.
func (s *ShipyardTransaction) SetShipSymbol(val string) {
	s.ShipSymbol = val
}

// SetShipType sets the value of ShipType.
func (s *ShipyardTransaction) SetShipType(val string) {
	s.ShipType = val
}

// SetPrice sets the value of Price.
func (s *ShipyardTransaction) SetPrice(val int) {
	s.Price = val
}

// SetAgentSymbol sets the value of AgentSymbol.
func (s *ShipyardTransaction) SetAgentSymbol(val string) {
	s.AgentSymbol = val
}

// SetTimestamp sets the value of Timestamp.
func (s *ShipyardTransaction) SetTimestamp(val time.Time) {
	s.Timestamp = val
}

// Siphon details.
// Ref: #/components/schemas/Siphon
type Siphon struct {
	// Symbol of the ship that executed the siphon.
	ShipSymbol string      `json:"shipSymbol"`
	Yield      SiphonYield `json:"yield"`
}

// GetShipSymbol returns the value of ShipSymbol.
func (s *Siphon) GetShipSymbol() string {
	return s.ShipSymbol
}

// GetYield returns the value of Yield.
func (s *Siphon) GetYield() SiphonYield {
	return s.Yield
}

// SetShipSymbol sets the value of ShipSymbol.
func (s *Siphon) SetShipSymbol(val string) {
	s.ShipSymbol = val
}

// SetYield sets the value of Yield.
func (s *Siphon) SetYield(val SiphonYield) {
	s.Yield = val
}

type SiphonResourcesCreated struct {
	Data SiphonResourcesCreatedData `json:"data"`
}

// GetData returns the value of Data.
func (s *SiphonResourcesCreated) GetData() SiphonResourcesCreatedData {
	return s.Data
}

// SetData sets the value of Data.
func (s *SiphonResourcesCreated) SetData(val SiphonResourcesCreatedData) {
	s.Data = val
}

type SiphonResourcesCreatedData struct {
	Cooldown Cooldown                               `json:"cooldown"`
	Siphon   Siphon                                 `json:"siphon"`
	Cargo    ShipCargo                              `json:"cargo"`
	Events   []SiphonResourcesCreatedDataEventsItem `json:"events"`
}

// GetCooldown returns the value of Cooldown.
func (s *SiphonResourcesCreatedData) GetCooldown() Cooldown {
	return s.Cooldown
}

// GetSiphon returns the value of Siphon.
func (s *SiphonResourcesCreatedData) GetSiphon() Siphon {
	return s.Siphon
}

// GetCargo returns the value of Cargo.
func (s *SiphonResourcesCreatedData) GetCargo() ShipCargo {
	return s.Cargo
}

// GetEvents returns the value of Events.
func (s *SiphonResourcesCreatedData) GetEvents() []SiphonResourcesCreatedDataEventsItem {
	return s.Events
}

// SetCooldown sets the value of Cooldown.
func (s *SiphonResourcesCreatedData) SetCooldown(val Cooldown) {
	s.Cooldown = val
}

// SetSiphon sets the value of Siphon.
func (s *SiphonResourcesCreatedData) SetSiphon(val Siphon) {
	s.Siphon = val
}

// SetCargo sets the value of Cargo.
func (s *SiphonResourcesCreatedData) SetCargo(val ShipCargo) {
	s.Cargo = val
}

// SetEvents sets the value of Events.
func (s *SiphonResourcesCreatedData) SetEvents(val []SiphonResourcesCreatedDataEventsItem) {
	s.Events = val
}

// SiphonResourcesCreatedDataEventsItem represents sum type.
type SiphonResourcesCreatedDataEventsItem struct {
	Type               SiphonResourcesCreatedDataEventsItemType // switch on this field
	ShipConditionEvent ShipConditionEvent
}

// SiphonResourcesCreatedDataEventsItemType is oneOf type of SiphonResourcesCreatedDataEventsItem.
type SiphonResourcesCreatedDataEventsItemType string

// Possible values for SiphonResourcesCreatedDataEventsItemType.
const (
	ShipConditionEventSiphonResourcesCreatedDataEventsItem SiphonResourcesCreatedDataEventsItemType = "ShipConditionEvent"
)

// IsShipConditionEvent reports whether SiphonResourcesCreatedDataEventsItem is ShipConditionEvent.
func (s SiphonResourcesCreatedDataEventsItem) IsShipConditionEvent() bool {
	return s.Type == ShipConditionEventSiphonResourcesCreatedDataEventsItem
}

// SetShipConditionEvent sets SiphonResourcesCreatedDataEventsItem to ShipConditionEvent.
func (s *SiphonResourcesCreatedDataEventsItem) SetShipConditionEvent(v ShipConditionEvent) {
	s.Type = ShipConditionEventSiphonResourcesCreatedDataEventsItem
	s.ShipConditionEvent = v
}

// GetShipConditionEvent returns ShipConditionEvent and true boolean if SiphonResourcesCreatedDataEventsItem is ShipConditionEvent.
func (s SiphonResourcesCreatedDataEventsItem) GetShipConditionEvent() (v ShipConditionEvent, ok bool) {
	if !s.IsShipConditionEvent() {
		return v, false
	}
	return s.ShipConditionEvent, true
}

// NewShipConditionEventSiphonResourcesCreatedDataEventsItem returns new SiphonResourcesCreatedDataEventsItem from ShipConditionEvent.
func NewShipConditionEventSiphonResourcesCreatedDataEventsItem(v ShipConditionEvent) SiphonResourcesCreatedDataEventsItem {
	var s SiphonResourcesCreatedDataEventsItem
	s.SetShipConditionEvent(v)
	return s
}

// A yield from the siphon operation.
// Ref: #/components/schemas/SiphonYield
type SiphonYield struct {
	Symbol TradeSymbol `json:"symbol"`
	// The number of units siphoned that were placed into the ship's cargo hold.
	Units int `json:"units"`
}

// GetSymbol returns the value of Symbol.
func (s *SiphonYield) GetSymbol() TradeSymbol {
	return s.Symbol
}

// GetUnits returns the value of Units.
func (s *SiphonYield) GetUnits() int {
	return s.Units
}

// SetSymbol sets the value of Symbol.
func (s *SiphonYield) SetSymbol(val TradeSymbol) {
	s.Symbol = val
}

// SetUnits sets the value of Units.
func (s *SiphonYield) SetUnits(val int) {
	s.Units = val
}

type SupplyConstructionCreated struct {
	Data SupplyConstructionCreatedData `json:"data"`
}

// GetData returns the value of Data.
func (s *SupplyConstructionCreated) GetData() SupplyConstructionCreatedData {
	return s.Data
}

// SetData sets the value of Data.
func (s *SupplyConstructionCreated) SetData(val SupplyConstructionCreatedData) {
	s.Data = val
}

type SupplyConstructionCreatedData struct {
	Construction Construction `json:"construction"`
	Cargo        ShipCargo    `json:"cargo"`
}

// GetConstruction returns the value of Construction.
func (s *SupplyConstructionCreatedData) GetConstruction() Construction {
	return s.Construction
}

// GetCargo returns the value of Cargo.
func (s *SupplyConstructionCreatedData) GetCargo() ShipCargo {
	return s.Cargo
}

// SetConstruction sets the value of Construction.
func (s *SupplyConstructionCreatedData) SetConstruction(val Construction) {
	s.Construction = val
}

// SetCargo sets the value of Cargo.
func (s *SupplyConstructionCreatedData) SetCargo(val ShipCargo) {
	s.Cargo = val
}

type SupplyConstructionReq struct {
	// Symbol of the ship to use.
	ShipSymbol string `json:"shipSymbol"`
	// The symbol of the good to supply.
	TradeSymbol string `json:"tradeSymbol"`
	// Amount of units to supply.
	Units int `json:"units"`
}

// GetShipSymbol returns the value of ShipSymbol.
func (s *SupplyConstructionReq) GetShipSymbol() string {
	return s.ShipSymbol
}

// GetTradeSymbol returns the value of TradeSymbol.
func (s *SupplyConstructionReq) GetTradeSymbol() string {
	return s.TradeSymbol
}

// GetUnits returns the value of Units.
func (s *SupplyConstructionReq) GetUnits() int {
	return s.Units
}

// SetShipSymbol sets the value of ShipSymbol.
func (s *SupplyConstructionReq) SetShipSymbol(val string) {
	s.ShipSymbol = val
}

// SetTradeSymbol sets the value of TradeSymbol.
func (s *SupplyConstructionReq) SetTradeSymbol(val string) {
	s.TradeSymbol = val
}

// SetUnits sets the value of Units.
func (s *SupplyConstructionReq) SetUnits(val int) {
	s.Units = val
}

// The supply level of a trade good.
// Ref: #/components/schemas/SupplyLevel
type SupplyLevel string

const (
	SupplyLevelSCARCE   SupplyLevel = "SCARCE"
	SupplyLevelLIMITED  SupplyLevel = "LIMITED"
	SupplyLevelMODERATE SupplyLevel = "MODERATE"
	SupplyLevelHIGH     SupplyLevel = "HIGH"
	SupplyLevelABUNDANT SupplyLevel = "ABUNDANT"
)

// AllValues returns all SupplyLevel values.
func (SupplyLevel) AllValues() []SupplyLevel {
	return []SupplyLevel{
		SupplyLevelSCARCE,
		SupplyLevelLIMITED,
		SupplyLevelMODERATE,
		SupplyLevelHIGH,
		SupplyLevelABUNDANT,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SupplyLevel) MarshalText() ([]byte, error) {
	switch s {
	case SupplyLevelSCARCE:
		return []byte(s), nil
	case SupplyLevelLIMITED:
		return []byte(s), nil
	case SupplyLevelMODERATE:
		return []byte(s), nil
	case SupplyLevelHIGH:
		return []byte(s), nil
	case SupplyLevelABUNDANT:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SupplyLevel) UnmarshalText(data []byte) error {
	switch SupplyLevel(data) {
	case SupplyLevelSCARCE:
		*s = SupplyLevelSCARCE
		return nil
	case SupplyLevelLIMITED:
		*s = SupplyLevelLIMITED
		return nil
	case SupplyLevelMODERATE:
		*s = SupplyLevelMODERATE
		return nil
	case SupplyLevelHIGH:
		*s = SupplyLevelHIGH
		return nil
	case SupplyLevelABUNDANT:
		*s = SupplyLevelABUNDANT
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A resource survey of a waypoint, detailing a specific extraction location and the types of
// resources that can be found there.
// Ref: #/components/schemas/Survey
type Survey struct {
	// A unique signature for the location of this survey. This signature is verified when attempting an
	// extraction using this survey.
	Signature string `json:"signature"`
	// The symbol of the waypoint that this survey is for.
	Symbol string `json:"symbol"`
	// A list of deposits that can be found at this location. A ship will extract one of these deposits
	// when using this survey in an extraction request. If multiple deposits of the same type are present,
	//  the chance of extracting that deposit is increased.
	Deposits []SurveyDeposit `json:"deposits"`
	// The date and time when the survey expires. After this date and time, the survey will no longer be
	// available for extraction.
	Expiration time.Time `json:"expiration"`
	// The size of the deposit. This value indicates how much can be extracted from the survey before it
	// is exhausted.
	Size SurveySize `json:"size"`
}

// GetSignature returns the value of Signature.
func (s *Survey) GetSignature() string {
	return s.Signature
}

// GetSymbol returns the value of Symbol.
func (s *Survey) GetSymbol() string {
	return s.Symbol
}

// GetDeposits returns the value of Deposits.
func (s *Survey) GetDeposits() []SurveyDeposit {
	return s.Deposits
}

// GetExpiration returns the value of Expiration.
func (s *Survey) GetExpiration() time.Time {
	return s.Expiration
}

// GetSize returns the value of Size.
func (s *Survey) GetSize() SurveySize {
	return s.Size
}

// SetSignature sets the value of Signature.
func (s *Survey) SetSignature(val string) {
	s.Signature = val
}

// SetSymbol sets the value of Symbol.
func (s *Survey) SetSymbol(val string) {
	s.Symbol = val
}

// SetDeposits sets the value of Deposits.
func (s *Survey) SetDeposits(val []SurveyDeposit) {
	s.Deposits = val
}

// SetExpiration sets the value of Expiration.
func (s *Survey) SetExpiration(val time.Time) {
	s.Expiration = val
}

// SetSize sets the value of Size.
func (s *Survey) SetSize(val SurveySize) {
	s.Size = val
}

// A surveyed deposit of a mineral or resource available for extraction.
// Ref: #/components/schemas/SurveyDeposit
type SurveyDeposit struct {
	// The symbol of the deposit.
	Symbol string `json:"symbol"`
}

// GetSymbol returns the value of Symbol.
func (s *SurveyDeposit) GetSymbol() string {
	return s.Symbol
}

// SetSymbol sets the value of Symbol.
func (s *SurveyDeposit) SetSymbol(val string) {
	s.Symbol = val
}

// The size of the deposit. This value indicates how much can be extracted from the survey before it
// is exhausted.
type SurveySize string

const (
	SurveySizeSMALL    SurveySize = "SMALL"
	SurveySizeMODERATE SurveySize = "MODERATE"
	SurveySizeLARGE    SurveySize = "LARGE"
)

// AllValues returns all SurveySize values.
func (SurveySize) AllValues() []SurveySize {
	return []SurveySize{
		SurveySizeSMALL,
		SurveySizeMODERATE,
		SurveySizeLARGE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SurveySize) MarshalText() ([]byte, error) {
	switch s {
	case SurveySizeSMALL:
		return []byte(s), nil
	case SurveySizeMODERATE:
		return []byte(s), nil
	case SurveySizeLARGE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SurveySize) UnmarshalText(data []byte) error {
	switch SurveySize(data) {
	case SurveySizeSMALL:
		*s = SurveySizeSMALL
		return nil
	case SurveySizeMODERATE:
		*s = SurveySizeMODERATE
		return nil
	case SurveySizeLARGE:
		*s = SurveySizeLARGE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/System
type System struct {
	// The symbol of the system.
	Symbol string `json:"symbol"`
	// The symbol of the sector.
	SectorSymbol string     `json:"sectorSymbol"`
	Type         SystemType `json:"type"`
	// Relative position of the system in the sector in the x axis.
	X int `json:"x"`
	// Relative position of the system in the sector in the y axis.
	Y int `json:"y"`
	// Waypoints in this system.
	Waypoints []SystemWaypoint `json:"waypoints"`
	// Factions that control this system.
	Factions []SystemFaction `json:"factions"`
}

// GetSymbol returns the value of Symbol.
func (s *System) GetSymbol() string {
	return s.Symbol
}

// GetSectorSymbol returns the value of SectorSymbol.
func (s *System) GetSectorSymbol() string {
	return s.SectorSymbol
}

// GetType returns the value of Type.
func (s *System) GetType() SystemType {
	return s.Type
}

// GetX returns the value of X.
func (s *System) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *System) GetY() int {
	return s.Y
}

// GetWaypoints returns the value of Waypoints.
func (s *System) GetWaypoints() []SystemWaypoint {
	return s.Waypoints
}

// GetFactions returns the value of Factions.
func (s *System) GetFactions() []SystemFaction {
	return s.Factions
}

// SetSymbol sets the value of Symbol.
func (s *System) SetSymbol(val string) {
	s.Symbol = val
}

// SetSectorSymbol sets the value of SectorSymbol.
func (s *System) SetSectorSymbol(val string) {
	s.SectorSymbol = val
}

// SetType sets the value of Type.
func (s *System) SetType(val SystemType) {
	s.Type = val
}

// SetX sets the value of X.
func (s *System) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *System) SetY(val int) {
	s.Y = val
}

// SetWaypoints sets the value of Waypoints.
func (s *System) SetWaypoints(val []SystemWaypoint) {
	s.Waypoints = val
}

// SetFactions sets the value of Factions.
func (s *System) SetFactions(val []SystemFaction) {
	s.Factions = val
}

// Ref: #/components/schemas/SystemFaction
type SystemFaction struct {
	Symbol FactionSymbol `json:"symbol"`
}

// GetSymbol returns the value of Symbol.
func (s *SystemFaction) GetSymbol() FactionSymbol {
	return s.Symbol
}

// SetSymbol sets the value of Symbol.
func (s *SystemFaction) SetSymbol(val FactionSymbol) {
	s.Symbol = val
}

type SystemSymbol string

// The type of system.
// Ref: #/components/schemas/SystemType
type SystemType string

const (
	SystemTypeNEUTRONSTAR SystemType = "NEUTRON_STAR"
	SystemTypeREDSTAR     SystemType = "RED_STAR"
	SystemTypeORANGESTAR  SystemType = "ORANGE_STAR"
	SystemTypeBLUESTAR    SystemType = "BLUE_STAR"
	SystemTypeYOUNGSTAR   SystemType = "YOUNG_STAR"
	SystemTypeWHITEDWARF  SystemType = "WHITE_DWARF"
	SystemTypeBLACKHOLE   SystemType = "BLACK_HOLE"
	SystemTypeHYPERGIANT  SystemType = "HYPERGIANT"
	SystemTypeNEBULA      SystemType = "NEBULA"
	SystemTypeUNSTABLE    SystemType = "UNSTABLE"
)

// AllValues returns all SystemType values.
func (SystemType) AllValues() []SystemType {
	return []SystemType{
		SystemTypeNEUTRONSTAR,
		SystemTypeREDSTAR,
		SystemTypeORANGESTAR,
		SystemTypeBLUESTAR,
		SystemTypeYOUNGSTAR,
		SystemTypeWHITEDWARF,
		SystemTypeBLACKHOLE,
		SystemTypeHYPERGIANT,
		SystemTypeNEBULA,
		SystemTypeUNSTABLE,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SystemType) MarshalText() ([]byte, error) {
	switch s {
	case SystemTypeNEUTRONSTAR:
		return []byte(s), nil
	case SystemTypeREDSTAR:
		return []byte(s), nil
	case SystemTypeORANGESTAR:
		return []byte(s), nil
	case SystemTypeBLUESTAR:
		return []byte(s), nil
	case SystemTypeYOUNGSTAR:
		return []byte(s), nil
	case SystemTypeWHITEDWARF:
		return []byte(s), nil
	case SystemTypeBLACKHOLE:
		return []byte(s), nil
	case SystemTypeHYPERGIANT:
		return []byte(s), nil
	case SystemTypeNEBULA:
		return []byte(s), nil
	case SystemTypeUNSTABLE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SystemType) UnmarshalText(data []byte) error {
	switch SystemType(data) {
	case SystemTypeNEUTRONSTAR:
		*s = SystemTypeNEUTRONSTAR
		return nil
	case SystemTypeREDSTAR:
		*s = SystemTypeREDSTAR
		return nil
	case SystemTypeORANGESTAR:
		*s = SystemTypeORANGESTAR
		return nil
	case SystemTypeBLUESTAR:
		*s = SystemTypeBLUESTAR
		return nil
	case SystemTypeYOUNGSTAR:
		*s = SystemTypeYOUNGSTAR
		return nil
	case SystemTypeWHITEDWARF:
		*s = SystemTypeWHITEDWARF
		return nil
	case SystemTypeBLACKHOLE:
		*s = SystemTypeBLACKHOLE
		return nil
	case SystemTypeHYPERGIANT:
		*s = SystemTypeHYPERGIANT
		return nil
	case SystemTypeNEBULA:
		*s = SystemTypeNEBULA
		return nil
	case SystemTypeUNSTABLE:
		*s = SystemTypeUNSTABLE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/SystemWaypoint
type SystemWaypoint struct {
	Symbol WaypointSymbol `json:"symbol"`
	Type   WaypointType   `json:"type"`
	// Relative position of the waypoint on the system's x axis. This is not an absolute position in the
	// universe.
	X int `json:"x"`
	// Relative position of the waypoint on the system's y axis. This is not an absolute position in the
	// universe.
	Y int `json:"y"`
	// Waypoints that orbit this waypoint.
	Orbitals []WaypointOrbital `json:"orbitals"`
	// The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise
	// this value is undefined.
	Orbits OptString `json:"orbits"`
}

// GetSymbol returns the value of Symbol.
func (s *SystemWaypoint) GetSymbol() WaypointSymbol {
	return s.Symbol
}

// GetType returns the value of Type.
func (s *SystemWaypoint) GetType() WaypointType {
	return s.Type
}

// GetX returns the value of X.
func (s *SystemWaypoint) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *SystemWaypoint) GetY() int {
	return s.Y
}

// GetOrbitals returns the value of Orbitals.
func (s *SystemWaypoint) GetOrbitals() []WaypointOrbital {
	return s.Orbitals
}

// GetOrbits returns the value of Orbits.
func (s *SystemWaypoint) GetOrbits() OptString {
	return s.Orbits
}

// SetSymbol sets the value of Symbol.
func (s *SystemWaypoint) SetSymbol(val WaypointSymbol) {
	s.Symbol = val
}

// SetType sets the value of Type.
func (s *SystemWaypoint) SetType(val WaypointType) {
	s.Type = val
}

// SetX sets the value of X.
func (s *SystemWaypoint) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *SystemWaypoint) SetY(val int) {
	s.Y = val
}

// SetOrbitals sets the value of Orbitals.
func (s *SystemWaypoint) SetOrbitals(val []WaypointOrbital) {
	s.Orbitals = val
}

// SetOrbits sets the value of Orbits.
func (s *SystemWaypoint) SetOrbits(val OptString) {
	s.Orbits = val
}

// A good that can be traded for other goods or currency.
// Ref: #/components/schemas/TradeGood
type TradeGood struct {
	Symbol TradeSymbol `json:"symbol"`
	// The name of the good.
	Name string `json:"name"`
	// The description of the good.
	Description string `json:"description"`
}

// GetSymbol returns the value of Symbol.
func (s *TradeGood) GetSymbol() TradeSymbol {
	return s.Symbol
}

// GetName returns the value of Name.
func (s *TradeGood) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *TradeGood) GetDescription() string {
	return s.Description
}

// SetSymbol sets the value of Symbol.
func (s *TradeGood) SetSymbol(val TradeSymbol) {
	s.Symbol = val
}

// SetName sets the value of Name.
func (s *TradeGood) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *TradeGood) SetDescription(val string) {
	s.Description = val
}

// The good's symbol.
// Ref: #/components/schemas/TradeSymbol
type TradeSymbol string

const (
	TradeSymbolPRECIOUSSTONES          TradeSymbol = "PRECIOUS_STONES"
	TradeSymbolQUARTZSAND              TradeSymbol = "QUARTZ_SAND"
	TradeSymbolSILICONCRYSTALS         TradeSymbol = "SILICON_CRYSTALS"
	TradeSymbolAMMONIAICE              TradeSymbol = "AMMONIA_ICE"
	TradeSymbolLIQUIDHYDROGEN          TradeSymbol = "LIQUID_HYDROGEN"
	TradeSymbolLIQUIDNITROGEN          TradeSymbol = "LIQUID_NITROGEN"
	TradeSymbolICEWATER                TradeSymbol = "ICE_WATER"
	TradeSymbolEXOTICMATTER            TradeSymbol = "EXOTIC_MATTER"
	TradeSymbolADVANCEDCIRCUITRY       TradeSymbol = "ADVANCED_CIRCUITRY"
	TradeSymbolGRAVITONEMITTERS        TradeSymbol = "GRAVITON_EMITTERS"
	TradeSymbolIRON                    TradeSymbol = "IRON"
	TradeSymbolIRONORE                 TradeSymbol = "IRON_ORE"
	TradeSymbolCOPPER                  TradeSymbol = "COPPER"
	TradeSymbolCOPPERORE               TradeSymbol = "COPPER_ORE"
	TradeSymbolALUMINUM                TradeSymbol = "ALUMINUM"
	TradeSymbolALUMINUMORE             TradeSymbol = "ALUMINUM_ORE"
	TradeSymbolSILVER                  TradeSymbol = "SILVER"
	TradeSymbolSILVERORE               TradeSymbol = "SILVER_ORE"
	TradeSymbolGOLD                    TradeSymbol = "GOLD"
	TradeSymbolGOLDORE                 TradeSymbol = "GOLD_ORE"
	TradeSymbolPLATINUM                TradeSymbol = "PLATINUM"
	TradeSymbolPLATINUMORE             TradeSymbol = "PLATINUM_ORE"
	TradeSymbolDIAMONDS                TradeSymbol = "DIAMONDS"
	TradeSymbolURANITE                 TradeSymbol = "URANITE"
	TradeSymbolURANITEORE              TradeSymbol = "URANITE_ORE"
	TradeSymbolMERITIUM                TradeSymbol = "MERITIUM"
	TradeSymbolMERITIUMORE             TradeSymbol = "MERITIUM_ORE"
	TradeSymbolHYDROCARBON             TradeSymbol = "HYDROCARBON"
	TradeSymbolANTIMATTER              TradeSymbol = "ANTIMATTER"
	TradeSymbolFABMATS                 TradeSymbol = "FAB_MATS"
	TradeSymbolFERTILIZERS             TradeSymbol = "FERTILIZERS"
	TradeSymbolFABRICS                 TradeSymbol = "FABRICS"
	TradeSymbolFOOD                    TradeSymbol = "FOOD"
	TradeSymbolJEWELRY                 TradeSymbol = "JEWELRY"
	TradeSymbolMACHINERY               TradeSymbol = "MACHINERY"
	TradeSymbolFIREARMS                TradeSymbol = "FIREARMS"
	TradeSymbolASSAULTRIFLES           TradeSymbol = "ASSAULT_RIFLES"
	TradeSymbolMILITARYEQUIPMENT       TradeSymbol = "MILITARY_EQUIPMENT"
	TradeSymbolEXPLOSIVES              TradeSymbol = "EXPLOSIVES"
	TradeSymbolLABINSTRUMENTS          TradeSymbol = "LAB_INSTRUMENTS"
	TradeSymbolAMMUNITION              TradeSymbol = "AMMUNITION"
	TradeSymbolELECTRONICS             TradeSymbol = "ELECTRONICS"
	TradeSymbolSHIPPLATING             TradeSymbol = "SHIP_PLATING"
	TradeSymbolSHIPPARTS               TradeSymbol = "SHIP_PARTS"
	TradeSymbolEQUIPMENT               TradeSymbol = "EQUIPMENT"
	TradeSymbolFUEL                    TradeSymbol = "FUEL"
	TradeSymbolMEDICINE                TradeSymbol = "MEDICINE"
	TradeSymbolDRUGS                   TradeSymbol = "DRUGS"
	TradeSymbolCLOTHING                TradeSymbol = "CLOTHING"
	TradeSymbolMICROPROCESSORS         TradeSymbol = "MICROPROCESSORS"
	TradeSymbolPLASTICS                TradeSymbol = "PLASTICS"
	TradeSymbolPOLYNUCLEOTIDES         TradeSymbol = "POLYNUCLEOTIDES"
	TradeSymbolBIOCOMPOSITES           TradeSymbol = "BIOCOMPOSITES"
	TradeSymbolQUANTUMSTABILIZERS      TradeSymbol = "QUANTUM_STABILIZERS"
	TradeSymbolNANOBOTS                TradeSymbol = "NANOBOTS"
	TradeSymbolAIMAINFRAMES            TradeSymbol = "AI_MAINFRAMES"
	TradeSymbolQUANTUMDRIVES           TradeSymbol = "QUANTUM_DRIVES"
	TradeSymbolROBOTICDRONES           TradeSymbol = "ROBOTIC_DRONES"
	TradeSymbolCYBERIMPLANTS           TradeSymbol = "CYBER_IMPLANTS"
	TradeSymbolGENETHERAPEUTICS        TradeSymbol = "GENE_THERAPEUTICS"
	TradeSymbolNEURALCHIPS             TradeSymbol = "NEURAL_CHIPS"
	TradeSymbolMOODREGULATORS          TradeSymbol = "MOOD_REGULATORS"
	TradeSymbolVIRALAGENTS             TradeSymbol = "VIRAL_AGENTS"
	TradeSymbolMICROFUSIONGENERATORS   TradeSymbol = "MICRO_FUSION_GENERATORS"
	TradeSymbolSUPERGRAINS             TradeSymbol = "SUPERGRAINS"
	TradeSymbolLASERRIFLES             TradeSymbol = "LASER_RIFLES"
	TradeSymbolHOLOGRAPHICS            TradeSymbol = "HOLOGRAPHICS"
	TradeSymbolSHIPSALVAGE             TradeSymbol = "SHIP_SALVAGE"
	TradeSymbolRELICTECH               TradeSymbol = "RELIC_TECH"
	TradeSymbolNOVELLIFEFORMS          TradeSymbol = "NOVEL_LIFEFORMS"
	TradeSymbolBOTANICALSPECIMENS      TradeSymbol = "BOTANICAL_SPECIMENS"
	TradeSymbolCULTURALARTIFACTS       TradeSymbol = "CULTURAL_ARTIFACTS"
	TradeSymbolFRAMEPROBE              TradeSymbol = "FRAME_PROBE"
	TradeSymbolFRAMEDRONE              TradeSymbol = "FRAME_DRONE"
	TradeSymbolFRAMEINTERCEPTOR        TradeSymbol = "FRAME_INTERCEPTOR"
	TradeSymbolFRAMERACER              TradeSymbol = "FRAME_RACER"
	TradeSymbolFRAMEFIGHTER            TradeSymbol = "FRAME_FIGHTER"
	TradeSymbolFRAMEFRIGATE            TradeSymbol = "FRAME_FRIGATE"
	TradeSymbolFRAMESHUTTLE            TradeSymbol = "FRAME_SHUTTLE"
	TradeSymbolFRAMEEXPLORER           TradeSymbol = "FRAME_EXPLORER"
	TradeSymbolFRAMEMINER              TradeSymbol = "FRAME_MINER"
	TradeSymbolFRAMELIGHTFREIGHTER     TradeSymbol = "FRAME_LIGHT_FREIGHTER"
	TradeSymbolFRAMEHEAVYFREIGHTER     TradeSymbol = "FRAME_HEAVY_FREIGHTER"
	TradeSymbolFRAMETRANSPORT          TradeSymbol = "FRAME_TRANSPORT"
	TradeSymbolFRAMEDESTROYER          TradeSymbol = "FRAME_DESTROYER"
	TradeSymbolFRAMECRUISER            TradeSymbol = "FRAME_CRUISER"
	TradeSymbolFRAMECARRIER            TradeSymbol = "FRAME_CARRIER"
	TradeSymbolREACTORSOLARI           TradeSymbol = "REACTOR_SOLAR_I"
	TradeSymbolREACTORFUSIONI          TradeSymbol = "REACTOR_FUSION_I"
	TradeSymbolREACTORFISSIONI         TradeSymbol = "REACTOR_FISSION_I"
	TradeSymbolREACTORCHEMICALI        TradeSymbol = "REACTOR_CHEMICAL_I"
	TradeSymbolREACTORANTIMATTERI      TradeSymbol = "REACTOR_ANTIMATTER_I"
	TradeSymbolENGINEIMPULSEDRIVEI     TradeSymbol = "ENGINE_IMPULSE_DRIVE_I"
	TradeSymbolENGINEIONDRIVEI         TradeSymbol = "ENGINE_ION_DRIVE_I"
	TradeSymbolENGINEIONDRIVEII        TradeSymbol = "ENGINE_ION_DRIVE_II"
	TradeSymbolENGINEHYPERDRIVEI       TradeSymbol = "ENGINE_HYPER_DRIVE_I"
	TradeSymbolMODULEMINERALPROCESSORI TradeSymbol = "MODULE_MINERAL_PROCESSOR_I"
	TradeSymbolMODULEGASPROCESSORI     TradeSymbol = "MODULE_GAS_PROCESSOR_I"
	TradeSymbolMODULECARGOHOLDI        TradeSymbol = "MODULE_CARGO_HOLD_I"
	TradeSymbolMODULECARGOHOLDII       TradeSymbol = "MODULE_CARGO_HOLD_II"
	TradeSymbolMODULECARGOHOLDIII      TradeSymbol = "MODULE_CARGO_HOLD_III"
	TradeSymbolMODULECREWQUARTERSI     TradeSymbol = "MODULE_CREW_QUARTERS_I"
	TradeSymbolMODULEENVOYQUARTERSI    TradeSymbol = "MODULE_ENVOY_QUARTERS_I"
	TradeSymbolMODULEPASSENGERCABINI   TradeSymbol = "MODULE_PASSENGER_CABIN_I"
	TradeSymbolMODULEMICROREFINERYI    TradeSymbol = "MODULE_MICRO_REFINERY_I"
	TradeSymbolMODULESCIENCELABI       TradeSymbol = "MODULE_SCIENCE_LAB_I"
	TradeSymbolMODULEJUMPDRIVEI        TradeSymbol = "MODULE_JUMP_DRIVE_I"
	TradeSymbolMODULEJUMPDRIVEII       TradeSymbol = "MODULE_JUMP_DRIVE_II"
	TradeSymbolMODULEJUMPDRIVEIII      TradeSymbol = "MODULE_JUMP_DRIVE_III"
	TradeSymbolMODULEWARPDRIVEI        TradeSymbol = "MODULE_WARP_DRIVE_I"
	TradeSymbolMODULEWARPDRIVEII       TradeSymbol = "MODULE_WARP_DRIVE_II"
	TradeSymbolMODULEWARPDRIVEIII      TradeSymbol = "MODULE_WARP_DRIVE_III"
	TradeSymbolMODULESHIELDGENERATORI  TradeSymbol = "MODULE_SHIELD_GENERATOR_I"
	TradeSymbolMODULESHIELDGENERATORII TradeSymbol = "MODULE_SHIELD_GENERATOR_II"
	TradeSymbolMODULEOREREFINERYI      TradeSymbol = "MODULE_ORE_REFINERY_I"
	TradeSymbolMODULEFUELREFINERYI     TradeSymbol = "MODULE_FUEL_REFINERY_I"
	TradeSymbolMOUNTGASSIPHONI         TradeSymbol = "MOUNT_GAS_SIPHON_I"
	TradeSymbolMOUNTGASSIPHONII        TradeSymbol = "MOUNT_GAS_SIPHON_II"
	TradeSymbolMOUNTGASSIPHONIII       TradeSymbol = "MOUNT_GAS_SIPHON_III"
	TradeSymbolMOUNTSURVEYORI          TradeSymbol = "MOUNT_SURVEYOR_I"
	TradeSymbolMOUNTSURVEYORII         TradeSymbol = "MOUNT_SURVEYOR_II"
	TradeSymbolMOUNTSURVEYORIII        TradeSymbol = "MOUNT_SURVEYOR_III"
	TradeSymbolMOUNTSENSORARRAYI       TradeSymbol = "MOUNT_SENSOR_ARRAY_I"
	TradeSymbolMOUNTSENSORARRAYII      TradeSymbol = "MOUNT_SENSOR_ARRAY_II"
	TradeSymbolMOUNTSENSORARRAYIII     TradeSymbol = "MOUNT_SENSOR_ARRAY_III"
	TradeSymbolMOUNTMININGLASERI       TradeSymbol = "MOUNT_MINING_LASER_I"
	TradeSymbolMOUNTMININGLASERII      TradeSymbol = "MOUNT_MINING_LASER_II"
	TradeSymbolMOUNTMININGLASERIII     TradeSymbol = "MOUNT_MINING_LASER_III"
	TradeSymbolMOUNTLASERCANNONI       TradeSymbol = "MOUNT_LASER_CANNON_I"
	TradeSymbolMOUNTMISSILELAUNCHERI   TradeSymbol = "MOUNT_MISSILE_LAUNCHER_I"
	TradeSymbolMOUNTTURRETI            TradeSymbol = "MOUNT_TURRET_I"
	TradeSymbolSHIPPROBE               TradeSymbol = "SHIP_PROBE"
	TradeSymbolSHIPMININGDRONE         TradeSymbol = "SHIP_MINING_DRONE"
	TradeSymbolSHIPSIPHONDRONE         TradeSymbol = "SHIP_SIPHON_DRONE"
	TradeSymbolSHIPINTERCEPTOR         TradeSymbol = "SHIP_INTERCEPTOR"
	TradeSymbolSHIPLIGHTHAULER         TradeSymbol = "SHIP_LIGHT_HAULER"
	TradeSymbolSHIPCOMMANDFRIGATE      TradeSymbol = "SHIP_COMMAND_FRIGATE"
	TradeSymbolSHIPEXPLORER            TradeSymbol = "SHIP_EXPLORER"
	TradeSymbolSHIPHEAVYFREIGHTER      TradeSymbol = "SHIP_HEAVY_FREIGHTER"
	TradeSymbolSHIPLIGHTSHUTTLE        TradeSymbol = "SHIP_LIGHT_SHUTTLE"
	TradeSymbolSHIPOREHOUND            TradeSymbol = "SHIP_ORE_HOUND"
	TradeSymbolSHIPREFININGFREIGHTER   TradeSymbol = "SHIP_REFINING_FREIGHTER"
	TradeSymbolSHIPSURVEYOR            TradeSymbol = "SHIP_SURVEYOR"
)

// AllValues returns all TradeSymbol values.
func (TradeSymbol) AllValues() []TradeSymbol {
	return []TradeSymbol{
		TradeSymbolPRECIOUSSTONES,
		TradeSymbolQUARTZSAND,
		TradeSymbolSILICONCRYSTALS,
		TradeSymbolAMMONIAICE,
		TradeSymbolLIQUIDHYDROGEN,
		TradeSymbolLIQUIDNITROGEN,
		TradeSymbolICEWATER,
		TradeSymbolEXOTICMATTER,
		TradeSymbolADVANCEDCIRCUITRY,
		TradeSymbolGRAVITONEMITTERS,
		TradeSymbolIRON,
		TradeSymbolIRONORE,
		TradeSymbolCOPPER,
		TradeSymbolCOPPERORE,
		TradeSymbolALUMINUM,
		TradeSymbolALUMINUMORE,
		TradeSymbolSILVER,
		TradeSymbolSILVERORE,
		TradeSymbolGOLD,
		TradeSymbolGOLDORE,
		TradeSymbolPLATINUM,
		TradeSymbolPLATINUMORE,
		TradeSymbolDIAMONDS,
		TradeSymbolURANITE,
		TradeSymbolURANITEORE,
		TradeSymbolMERITIUM,
		TradeSymbolMERITIUMORE,
		TradeSymbolHYDROCARBON,
		TradeSymbolANTIMATTER,
		TradeSymbolFABMATS,
		TradeSymbolFERTILIZERS,
		TradeSymbolFABRICS,
		TradeSymbolFOOD,
		TradeSymbolJEWELRY,
		TradeSymbolMACHINERY,
		TradeSymbolFIREARMS,
		TradeSymbolASSAULTRIFLES,
		TradeSymbolMILITARYEQUIPMENT,
		TradeSymbolEXPLOSIVES,
		TradeSymbolLABINSTRUMENTS,
		TradeSymbolAMMUNITION,
		TradeSymbolELECTRONICS,
		TradeSymbolSHIPPLATING,
		TradeSymbolSHIPPARTS,
		TradeSymbolEQUIPMENT,
		TradeSymbolFUEL,
		TradeSymbolMEDICINE,
		TradeSymbolDRUGS,
		TradeSymbolCLOTHING,
		TradeSymbolMICROPROCESSORS,
		TradeSymbolPLASTICS,
		TradeSymbolPOLYNUCLEOTIDES,
		TradeSymbolBIOCOMPOSITES,
		TradeSymbolQUANTUMSTABILIZERS,
		TradeSymbolNANOBOTS,
		TradeSymbolAIMAINFRAMES,
		TradeSymbolQUANTUMDRIVES,
		TradeSymbolROBOTICDRONES,
		TradeSymbolCYBERIMPLANTS,
		TradeSymbolGENETHERAPEUTICS,
		TradeSymbolNEURALCHIPS,
		TradeSymbolMOODREGULATORS,
		TradeSymbolVIRALAGENTS,
		TradeSymbolMICROFUSIONGENERATORS,
		TradeSymbolSUPERGRAINS,
		TradeSymbolLASERRIFLES,
		TradeSymbolHOLOGRAPHICS,
		TradeSymbolSHIPSALVAGE,
		TradeSymbolRELICTECH,
		TradeSymbolNOVELLIFEFORMS,
		TradeSymbolBOTANICALSPECIMENS,
		TradeSymbolCULTURALARTIFACTS,
		TradeSymbolFRAMEPROBE,
		TradeSymbolFRAMEDRONE,
		TradeSymbolFRAMEINTERCEPTOR,
		TradeSymbolFRAMERACER,
		TradeSymbolFRAMEFIGHTER,
		TradeSymbolFRAMEFRIGATE,
		TradeSymbolFRAMESHUTTLE,
		TradeSymbolFRAMEEXPLORER,
		TradeSymbolFRAMEMINER,
		TradeSymbolFRAMELIGHTFREIGHTER,
		TradeSymbolFRAMEHEAVYFREIGHTER,
		TradeSymbolFRAMETRANSPORT,
		TradeSymbolFRAMEDESTROYER,
		TradeSymbolFRAMECRUISER,
		TradeSymbolFRAMECARRIER,
		TradeSymbolREACTORSOLARI,
		TradeSymbolREACTORFUSIONI,
		TradeSymbolREACTORFISSIONI,
		TradeSymbolREACTORCHEMICALI,
		TradeSymbolREACTORANTIMATTERI,
		TradeSymbolENGINEIMPULSEDRIVEI,
		TradeSymbolENGINEIONDRIVEI,
		TradeSymbolENGINEIONDRIVEII,
		TradeSymbolENGINEHYPERDRIVEI,
		TradeSymbolMODULEMINERALPROCESSORI,
		TradeSymbolMODULEGASPROCESSORI,
		TradeSymbolMODULECARGOHOLDI,
		TradeSymbolMODULECARGOHOLDII,
		TradeSymbolMODULECARGOHOLDIII,
		TradeSymbolMODULECREWQUARTERSI,
		TradeSymbolMODULEENVOYQUARTERSI,
		TradeSymbolMODULEPASSENGERCABINI,
		TradeSymbolMODULEMICROREFINERYI,
		TradeSymbolMODULESCIENCELABI,
		TradeSymbolMODULEJUMPDRIVEI,
		TradeSymbolMODULEJUMPDRIVEII,
		TradeSymbolMODULEJUMPDRIVEIII,
		TradeSymbolMODULEWARPDRIVEI,
		TradeSymbolMODULEWARPDRIVEII,
		TradeSymbolMODULEWARPDRIVEIII,
		TradeSymbolMODULESHIELDGENERATORI,
		TradeSymbolMODULESHIELDGENERATORII,
		TradeSymbolMODULEOREREFINERYI,
		TradeSymbolMODULEFUELREFINERYI,
		TradeSymbolMOUNTGASSIPHONI,
		TradeSymbolMOUNTGASSIPHONII,
		TradeSymbolMOUNTGASSIPHONIII,
		TradeSymbolMOUNTSURVEYORI,
		TradeSymbolMOUNTSURVEYORII,
		TradeSymbolMOUNTSURVEYORIII,
		TradeSymbolMOUNTSENSORARRAYI,
		TradeSymbolMOUNTSENSORARRAYII,
		TradeSymbolMOUNTSENSORARRAYIII,
		TradeSymbolMOUNTMININGLASERI,
		TradeSymbolMOUNTMININGLASERII,
		TradeSymbolMOUNTMININGLASERIII,
		TradeSymbolMOUNTLASERCANNONI,
		TradeSymbolMOUNTMISSILELAUNCHERI,
		TradeSymbolMOUNTTURRETI,
		TradeSymbolSHIPPROBE,
		TradeSymbolSHIPMININGDRONE,
		TradeSymbolSHIPSIPHONDRONE,
		TradeSymbolSHIPINTERCEPTOR,
		TradeSymbolSHIPLIGHTHAULER,
		TradeSymbolSHIPCOMMANDFRIGATE,
		TradeSymbolSHIPEXPLORER,
		TradeSymbolSHIPHEAVYFREIGHTER,
		TradeSymbolSHIPLIGHTSHUTTLE,
		TradeSymbolSHIPOREHOUND,
		TradeSymbolSHIPREFININGFREIGHTER,
		TradeSymbolSHIPSURVEYOR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TradeSymbol) MarshalText() ([]byte, error) {
	switch s {
	case TradeSymbolPRECIOUSSTONES:
		return []byte(s), nil
	case TradeSymbolQUARTZSAND:
		return []byte(s), nil
	case TradeSymbolSILICONCRYSTALS:
		return []byte(s), nil
	case TradeSymbolAMMONIAICE:
		return []byte(s), nil
	case TradeSymbolLIQUIDHYDROGEN:
		return []byte(s), nil
	case TradeSymbolLIQUIDNITROGEN:
		return []byte(s), nil
	case TradeSymbolICEWATER:
		return []byte(s), nil
	case TradeSymbolEXOTICMATTER:
		return []byte(s), nil
	case TradeSymbolADVANCEDCIRCUITRY:
		return []byte(s), nil
	case TradeSymbolGRAVITONEMITTERS:
		return []byte(s), nil
	case TradeSymbolIRON:
		return []byte(s), nil
	case TradeSymbolIRONORE:
		return []byte(s), nil
	case TradeSymbolCOPPER:
		return []byte(s), nil
	case TradeSymbolCOPPERORE:
		return []byte(s), nil
	case TradeSymbolALUMINUM:
		return []byte(s), nil
	case TradeSymbolALUMINUMORE:
		return []byte(s), nil
	case TradeSymbolSILVER:
		return []byte(s), nil
	case TradeSymbolSILVERORE:
		return []byte(s), nil
	case TradeSymbolGOLD:
		return []byte(s), nil
	case TradeSymbolGOLDORE:
		return []byte(s), nil
	case TradeSymbolPLATINUM:
		return []byte(s), nil
	case TradeSymbolPLATINUMORE:
		return []byte(s), nil
	case TradeSymbolDIAMONDS:
		return []byte(s), nil
	case TradeSymbolURANITE:
		return []byte(s), nil
	case TradeSymbolURANITEORE:
		return []byte(s), nil
	case TradeSymbolMERITIUM:
		return []byte(s), nil
	case TradeSymbolMERITIUMORE:
		return []byte(s), nil
	case TradeSymbolHYDROCARBON:
		return []byte(s), nil
	case TradeSymbolANTIMATTER:
		return []byte(s), nil
	case TradeSymbolFABMATS:
		return []byte(s), nil
	case TradeSymbolFERTILIZERS:
		return []byte(s), nil
	case TradeSymbolFABRICS:
		return []byte(s), nil
	case TradeSymbolFOOD:
		return []byte(s), nil
	case TradeSymbolJEWELRY:
		return []byte(s), nil
	case TradeSymbolMACHINERY:
		return []byte(s), nil
	case TradeSymbolFIREARMS:
		return []byte(s), nil
	case TradeSymbolASSAULTRIFLES:
		return []byte(s), nil
	case TradeSymbolMILITARYEQUIPMENT:
		return []byte(s), nil
	case TradeSymbolEXPLOSIVES:
		return []byte(s), nil
	case TradeSymbolLABINSTRUMENTS:
		return []byte(s), nil
	case TradeSymbolAMMUNITION:
		return []byte(s), nil
	case TradeSymbolELECTRONICS:
		return []byte(s), nil
	case TradeSymbolSHIPPLATING:
		return []byte(s), nil
	case TradeSymbolSHIPPARTS:
		return []byte(s), nil
	case TradeSymbolEQUIPMENT:
		return []byte(s), nil
	case TradeSymbolFUEL:
		return []byte(s), nil
	case TradeSymbolMEDICINE:
		return []byte(s), nil
	case TradeSymbolDRUGS:
		return []byte(s), nil
	case TradeSymbolCLOTHING:
		return []byte(s), nil
	case TradeSymbolMICROPROCESSORS:
		return []byte(s), nil
	case TradeSymbolPLASTICS:
		return []byte(s), nil
	case TradeSymbolPOLYNUCLEOTIDES:
		return []byte(s), nil
	case TradeSymbolBIOCOMPOSITES:
		return []byte(s), nil
	case TradeSymbolQUANTUMSTABILIZERS:
		return []byte(s), nil
	case TradeSymbolNANOBOTS:
		return []byte(s), nil
	case TradeSymbolAIMAINFRAMES:
		return []byte(s), nil
	case TradeSymbolQUANTUMDRIVES:
		return []byte(s), nil
	case TradeSymbolROBOTICDRONES:
		return []byte(s), nil
	case TradeSymbolCYBERIMPLANTS:
		return []byte(s), nil
	case TradeSymbolGENETHERAPEUTICS:
		return []byte(s), nil
	case TradeSymbolNEURALCHIPS:
		return []byte(s), nil
	case TradeSymbolMOODREGULATORS:
		return []byte(s), nil
	case TradeSymbolVIRALAGENTS:
		return []byte(s), nil
	case TradeSymbolMICROFUSIONGENERATORS:
		return []byte(s), nil
	case TradeSymbolSUPERGRAINS:
		return []byte(s), nil
	case TradeSymbolLASERRIFLES:
		return []byte(s), nil
	case TradeSymbolHOLOGRAPHICS:
		return []byte(s), nil
	case TradeSymbolSHIPSALVAGE:
		return []byte(s), nil
	case TradeSymbolRELICTECH:
		return []byte(s), nil
	case TradeSymbolNOVELLIFEFORMS:
		return []byte(s), nil
	case TradeSymbolBOTANICALSPECIMENS:
		return []byte(s), nil
	case TradeSymbolCULTURALARTIFACTS:
		return []byte(s), nil
	case TradeSymbolFRAMEPROBE:
		return []byte(s), nil
	case TradeSymbolFRAMEDRONE:
		return []byte(s), nil
	case TradeSymbolFRAMEINTERCEPTOR:
		return []byte(s), nil
	case TradeSymbolFRAMERACER:
		return []byte(s), nil
	case TradeSymbolFRAMEFIGHTER:
		return []byte(s), nil
	case TradeSymbolFRAMEFRIGATE:
		return []byte(s), nil
	case TradeSymbolFRAMESHUTTLE:
		return []byte(s), nil
	case TradeSymbolFRAMEEXPLORER:
		return []byte(s), nil
	case TradeSymbolFRAMEMINER:
		return []byte(s), nil
	case TradeSymbolFRAMELIGHTFREIGHTER:
		return []byte(s), nil
	case TradeSymbolFRAMEHEAVYFREIGHTER:
		return []byte(s), nil
	case TradeSymbolFRAMETRANSPORT:
		return []byte(s), nil
	case TradeSymbolFRAMEDESTROYER:
		return []byte(s), nil
	case TradeSymbolFRAMECRUISER:
		return []byte(s), nil
	case TradeSymbolFRAMECARRIER:
		return []byte(s), nil
	case TradeSymbolREACTORSOLARI:
		return []byte(s), nil
	case TradeSymbolREACTORFUSIONI:
		return []byte(s), nil
	case TradeSymbolREACTORFISSIONI:
		return []byte(s), nil
	case TradeSymbolREACTORCHEMICALI:
		return []byte(s), nil
	case TradeSymbolREACTORANTIMATTERI:
		return []byte(s), nil
	case TradeSymbolENGINEIMPULSEDRIVEI:
		return []byte(s), nil
	case TradeSymbolENGINEIONDRIVEI:
		return []byte(s), nil
	case TradeSymbolENGINEIONDRIVEII:
		return []byte(s), nil
	case TradeSymbolENGINEHYPERDRIVEI:
		return []byte(s), nil
	case TradeSymbolMODULEMINERALPROCESSORI:
		return []byte(s), nil
	case TradeSymbolMODULEGASPROCESSORI:
		return []byte(s), nil
	case TradeSymbolMODULECARGOHOLDI:
		return []byte(s), nil
	case TradeSymbolMODULECARGOHOLDII:
		return []byte(s), nil
	case TradeSymbolMODULECARGOHOLDIII:
		return []byte(s), nil
	case TradeSymbolMODULECREWQUARTERSI:
		return []byte(s), nil
	case TradeSymbolMODULEENVOYQUARTERSI:
		return []byte(s), nil
	case TradeSymbolMODULEPASSENGERCABINI:
		return []byte(s), nil
	case TradeSymbolMODULEMICROREFINERYI:
		return []byte(s), nil
	case TradeSymbolMODULESCIENCELABI:
		return []byte(s), nil
	case TradeSymbolMODULEJUMPDRIVEI:
		return []byte(s), nil
	case TradeSymbolMODULEJUMPDRIVEII:
		return []byte(s), nil
	case TradeSymbolMODULEJUMPDRIVEIII:
		return []byte(s), nil
	case TradeSymbolMODULEWARPDRIVEI:
		return []byte(s), nil
	case TradeSymbolMODULEWARPDRIVEII:
		return []byte(s), nil
	case TradeSymbolMODULEWARPDRIVEIII:
		return []byte(s), nil
	case TradeSymbolMODULESHIELDGENERATORI:
		return []byte(s), nil
	case TradeSymbolMODULESHIELDGENERATORII:
		return []byte(s), nil
	case TradeSymbolMODULEOREREFINERYI:
		return []byte(s), nil
	case TradeSymbolMODULEFUELREFINERYI:
		return []byte(s), nil
	case TradeSymbolMOUNTGASSIPHONI:
		return []byte(s), nil
	case TradeSymbolMOUNTGASSIPHONII:
		return []byte(s), nil
	case TradeSymbolMOUNTGASSIPHONIII:
		return []byte(s), nil
	case TradeSymbolMOUNTSURVEYORI:
		return []byte(s), nil
	case TradeSymbolMOUNTSURVEYORII:
		return []byte(s), nil
	case TradeSymbolMOUNTSURVEYORIII:
		return []byte(s), nil
	case TradeSymbolMOUNTSENSORARRAYI:
		return []byte(s), nil
	case TradeSymbolMOUNTSENSORARRAYII:
		return []byte(s), nil
	case TradeSymbolMOUNTSENSORARRAYIII:
		return []byte(s), nil
	case TradeSymbolMOUNTMININGLASERI:
		return []byte(s), nil
	case TradeSymbolMOUNTMININGLASERII:
		return []byte(s), nil
	case TradeSymbolMOUNTMININGLASERIII:
		return []byte(s), nil
	case TradeSymbolMOUNTLASERCANNONI:
		return []byte(s), nil
	case TradeSymbolMOUNTMISSILELAUNCHERI:
		return []byte(s), nil
	case TradeSymbolMOUNTTURRETI:
		return []byte(s), nil
	case TradeSymbolSHIPPROBE:
		return []byte(s), nil
	case TradeSymbolSHIPMININGDRONE:
		return []byte(s), nil
	case TradeSymbolSHIPSIPHONDRONE:
		return []byte(s), nil
	case TradeSymbolSHIPINTERCEPTOR:
		return []byte(s), nil
	case TradeSymbolSHIPLIGHTHAULER:
		return []byte(s), nil
	case TradeSymbolSHIPCOMMANDFRIGATE:
		return []byte(s), nil
	case TradeSymbolSHIPEXPLORER:
		return []byte(s), nil
	case TradeSymbolSHIPHEAVYFREIGHTER:
		return []byte(s), nil
	case TradeSymbolSHIPLIGHTSHUTTLE:
		return []byte(s), nil
	case TradeSymbolSHIPOREHOUND:
		return []byte(s), nil
	case TradeSymbolSHIPREFININGFREIGHTER:
		return []byte(s), nil
	case TradeSymbolSHIPSURVEYOR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TradeSymbol) UnmarshalText(data []byte) error {
	switch TradeSymbol(data) {
	case TradeSymbolPRECIOUSSTONES:
		*s = TradeSymbolPRECIOUSSTONES
		return nil
	case TradeSymbolQUARTZSAND:
		*s = TradeSymbolQUARTZSAND
		return nil
	case TradeSymbolSILICONCRYSTALS:
		*s = TradeSymbolSILICONCRYSTALS
		return nil
	case TradeSymbolAMMONIAICE:
		*s = TradeSymbolAMMONIAICE
		return nil
	case TradeSymbolLIQUIDHYDROGEN:
		*s = TradeSymbolLIQUIDHYDROGEN
		return nil
	case TradeSymbolLIQUIDNITROGEN:
		*s = TradeSymbolLIQUIDNITROGEN
		return nil
	case TradeSymbolICEWATER:
		*s = TradeSymbolICEWATER
		return nil
	case TradeSymbolEXOTICMATTER:
		*s = TradeSymbolEXOTICMATTER
		return nil
	case TradeSymbolADVANCEDCIRCUITRY:
		*s = TradeSymbolADVANCEDCIRCUITRY
		return nil
	case TradeSymbolGRAVITONEMITTERS:
		*s = TradeSymbolGRAVITONEMITTERS
		return nil
	case TradeSymbolIRON:
		*s = TradeSymbolIRON
		return nil
	case TradeSymbolIRONORE:
		*s = TradeSymbolIRONORE
		return nil
	case TradeSymbolCOPPER:
		*s = TradeSymbolCOPPER
		return nil
	case TradeSymbolCOPPERORE:
		*s = TradeSymbolCOPPERORE
		return nil
	case TradeSymbolALUMINUM:
		*s = TradeSymbolALUMINUM
		return nil
	case TradeSymbolALUMINUMORE:
		*s = TradeSymbolALUMINUMORE
		return nil
	case TradeSymbolSILVER:
		*s = TradeSymbolSILVER
		return nil
	case TradeSymbolSILVERORE:
		*s = TradeSymbolSILVERORE
		return nil
	case TradeSymbolGOLD:
		*s = TradeSymbolGOLD
		return nil
	case TradeSymbolGOLDORE:
		*s = TradeSymbolGOLDORE
		return nil
	case TradeSymbolPLATINUM:
		*s = TradeSymbolPLATINUM
		return nil
	case TradeSymbolPLATINUMORE:
		*s = TradeSymbolPLATINUMORE
		return nil
	case TradeSymbolDIAMONDS:
		*s = TradeSymbolDIAMONDS
		return nil
	case TradeSymbolURANITE:
		*s = TradeSymbolURANITE
		return nil
	case TradeSymbolURANITEORE:
		*s = TradeSymbolURANITEORE
		return nil
	case TradeSymbolMERITIUM:
		*s = TradeSymbolMERITIUM
		return nil
	case TradeSymbolMERITIUMORE:
		*s = TradeSymbolMERITIUMORE
		return nil
	case TradeSymbolHYDROCARBON:
		*s = TradeSymbolHYDROCARBON
		return nil
	case TradeSymbolANTIMATTER:
		*s = TradeSymbolANTIMATTER
		return nil
	case TradeSymbolFABMATS:
		*s = TradeSymbolFABMATS
		return nil
	case TradeSymbolFERTILIZERS:
		*s = TradeSymbolFERTILIZERS
		return nil
	case TradeSymbolFABRICS:
		*s = TradeSymbolFABRICS
		return nil
	case TradeSymbolFOOD:
		*s = TradeSymbolFOOD
		return nil
	case TradeSymbolJEWELRY:
		*s = TradeSymbolJEWELRY
		return nil
	case TradeSymbolMACHINERY:
		*s = TradeSymbolMACHINERY
		return nil
	case TradeSymbolFIREARMS:
		*s = TradeSymbolFIREARMS
		return nil
	case TradeSymbolASSAULTRIFLES:
		*s = TradeSymbolASSAULTRIFLES
		return nil
	case TradeSymbolMILITARYEQUIPMENT:
		*s = TradeSymbolMILITARYEQUIPMENT
		return nil
	case TradeSymbolEXPLOSIVES:
		*s = TradeSymbolEXPLOSIVES
		return nil
	case TradeSymbolLABINSTRUMENTS:
		*s = TradeSymbolLABINSTRUMENTS
		return nil
	case TradeSymbolAMMUNITION:
		*s = TradeSymbolAMMUNITION
		return nil
	case TradeSymbolELECTRONICS:
		*s = TradeSymbolELECTRONICS
		return nil
	case TradeSymbolSHIPPLATING:
		*s = TradeSymbolSHIPPLATING
		return nil
	case TradeSymbolSHIPPARTS:
		*s = TradeSymbolSHIPPARTS
		return nil
	case TradeSymbolEQUIPMENT:
		*s = TradeSymbolEQUIPMENT
		return nil
	case TradeSymbolFUEL:
		*s = TradeSymbolFUEL
		return nil
	case TradeSymbolMEDICINE:
		*s = TradeSymbolMEDICINE
		return nil
	case TradeSymbolDRUGS:
		*s = TradeSymbolDRUGS
		return nil
	case TradeSymbolCLOTHING:
		*s = TradeSymbolCLOTHING
		return nil
	case TradeSymbolMICROPROCESSORS:
		*s = TradeSymbolMICROPROCESSORS
		return nil
	case TradeSymbolPLASTICS:
		*s = TradeSymbolPLASTICS
		return nil
	case TradeSymbolPOLYNUCLEOTIDES:
		*s = TradeSymbolPOLYNUCLEOTIDES
		return nil
	case TradeSymbolBIOCOMPOSITES:
		*s = TradeSymbolBIOCOMPOSITES
		return nil
	case TradeSymbolQUANTUMSTABILIZERS:
		*s = TradeSymbolQUANTUMSTABILIZERS
		return nil
	case TradeSymbolNANOBOTS:
		*s = TradeSymbolNANOBOTS
		return nil
	case TradeSymbolAIMAINFRAMES:
		*s = TradeSymbolAIMAINFRAMES
		return nil
	case TradeSymbolQUANTUMDRIVES:
		*s = TradeSymbolQUANTUMDRIVES
		return nil
	case TradeSymbolROBOTICDRONES:
		*s = TradeSymbolROBOTICDRONES
		return nil
	case TradeSymbolCYBERIMPLANTS:
		*s = TradeSymbolCYBERIMPLANTS
		return nil
	case TradeSymbolGENETHERAPEUTICS:
		*s = TradeSymbolGENETHERAPEUTICS
		return nil
	case TradeSymbolNEURALCHIPS:
		*s = TradeSymbolNEURALCHIPS
		return nil
	case TradeSymbolMOODREGULATORS:
		*s = TradeSymbolMOODREGULATORS
		return nil
	case TradeSymbolVIRALAGENTS:
		*s = TradeSymbolVIRALAGENTS
		return nil
	case TradeSymbolMICROFUSIONGENERATORS:
		*s = TradeSymbolMICROFUSIONGENERATORS
		return nil
	case TradeSymbolSUPERGRAINS:
		*s = TradeSymbolSUPERGRAINS
		return nil
	case TradeSymbolLASERRIFLES:
		*s = TradeSymbolLASERRIFLES
		return nil
	case TradeSymbolHOLOGRAPHICS:
		*s = TradeSymbolHOLOGRAPHICS
		return nil
	case TradeSymbolSHIPSALVAGE:
		*s = TradeSymbolSHIPSALVAGE
		return nil
	case TradeSymbolRELICTECH:
		*s = TradeSymbolRELICTECH
		return nil
	case TradeSymbolNOVELLIFEFORMS:
		*s = TradeSymbolNOVELLIFEFORMS
		return nil
	case TradeSymbolBOTANICALSPECIMENS:
		*s = TradeSymbolBOTANICALSPECIMENS
		return nil
	case TradeSymbolCULTURALARTIFACTS:
		*s = TradeSymbolCULTURALARTIFACTS
		return nil
	case TradeSymbolFRAMEPROBE:
		*s = TradeSymbolFRAMEPROBE
		return nil
	case TradeSymbolFRAMEDRONE:
		*s = TradeSymbolFRAMEDRONE
		return nil
	case TradeSymbolFRAMEINTERCEPTOR:
		*s = TradeSymbolFRAMEINTERCEPTOR
		return nil
	case TradeSymbolFRAMERACER:
		*s = TradeSymbolFRAMERACER
		return nil
	case TradeSymbolFRAMEFIGHTER:
		*s = TradeSymbolFRAMEFIGHTER
		return nil
	case TradeSymbolFRAMEFRIGATE:
		*s = TradeSymbolFRAMEFRIGATE
		return nil
	case TradeSymbolFRAMESHUTTLE:
		*s = TradeSymbolFRAMESHUTTLE
		return nil
	case TradeSymbolFRAMEEXPLORER:
		*s = TradeSymbolFRAMEEXPLORER
		return nil
	case TradeSymbolFRAMEMINER:
		*s = TradeSymbolFRAMEMINER
		return nil
	case TradeSymbolFRAMELIGHTFREIGHTER:
		*s = TradeSymbolFRAMELIGHTFREIGHTER
		return nil
	case TradeSymbolFRAMEHEAVYFREIGHTER:
		*s = TradeSymbolFRAMEHEAVYFREIGHTER
		return nil
	case TradeSymbolFRAMETRANSPORT:
		*s = TradeSymbolFRAMETRANSPORT
		return nil
	case TradeSymbolFRAMEDESTROYER:
		*s = TradeSymbolFRAMEDESTROYER
		return nil
	case TradeSymbolFRAMECRUISER:
		*s = TradeSymbolFRAMECRUISER
		return nil
	case TradeSymbolFRAMECARRIER:
		*s = TradeSymbolFRAMECARRIER
		return nil
	case TradeSymbolREACTORSOLARI:
		*s = TradeSymbolREACTORSOLARI
		return nil
	case TradeSymbolREACTORFUSIONI:
		*s = TradeSymbolREACTORFUSIONI
		return nil
	case TradeSymbolREACTORFISSIONI:
		*s = TradeSymbolREACTORFISSIONI
		return nil
	case TradeSymbolREACTORCHEMICALI:
		*s = TradeSymbolREACTORCHEMICALI
		return nil
	case TradeSymbolREACTORANTIMATTERI:
		*s = TradeSymbolREACTORANTIMATTERI
		return nil
	case TradeSymbolENGINEIMPULSEDRIVEI:
		*s = TradeSymbolENGINEIMPULSEDRIVEI
		return nil
	case TradeSymbolENGINEIONDRIVEI:
		*s = TradeSymbolENGINEIONDRIVEI
		return nil
	case TradeSymbolENGINEIONDRIVEII:
		*s = TradeSymbolENGINEIONDRIVEII
		return nil
	case TradeSymbolENGINEHYPERDRIVEI:
		*s = TradeSymbolENGINEHYPERDRIVEI
		return nil
	case TradeSymbolMODULEMINERALPROCESSORI:
		*s = TradeSymbolMODULEMINERALPROCESSORI
		return nil
	case TradeSymbolMODULEGASPROCESSORI:
		*s = TradeSymbolMODULEGASPROCESSORI
		return nil
	case TradeSymbolMODULECARGOHOLDI:
		*s = TradeSymbolMODULECARGOHOLDI
		return nil
	case TradeSymbolMODULECARGOHOLDII:
		*s = TradeSymbolMODULECARGOHOLDII
		return nil
	case TradeSymbolMODULECARGOHOLDIII:
		*s = TradeSymbolMODULECARGOHOLDIII
		return nil
	case TradeSymbolMODULECREWQUARTERSI:
		*s = TradeSymbolMODULECREWQUARTERSI
		return nil
	case TradeSymbolMODULEENVOYQUARTERSI:
		*s = TradeSymbolMODULEENVOYQUARTERSI
		return nil
	case TradeSymbolMODULEPASSENGERCABINI:
		*s = TradeSymbolMODULEPASSENGERCABINI
		return nil
	case TradeSymbolMODULEMICROREFINERYI:
		*s = TradeSymbolMODULEMICROREFINERYI
		return nil
	case TradeSymbolMODULESCIENCELABI:
		*s = TradeSymbolMODULESCIENCELABI
		return nil
	case TradeSymbolMODULEJUMPDRIVEI:
		*s = TradeSymbolMODULEJUMPDRIVEI
		return nil
	case TradeSymbolMODULEJUMPDRIVEII:
		*s = TradeSymbolMODULEJUMPDRIVEII
		return nil
	case TradeSymbolMODULEJUMPDRIVEIII:
		*s = TradeSymbolMODULEJUMPDRIVEIII
		return nil
	case TradeSymbolMODULEWARPDRIVEI:
		*s = TradeSymbolMODULEWARPDRIVEI
		return nil
	case TradeSymbolMODULEWARPDRIVEII:
		*s = TradeSymbolMODULEWARPDRIVEII
		return nil
	case TradeSymbolMODULEWARPDRIVEIII:
		*s = TradeSymbolMODULEWARPDRIVEIII
		return nil
	case TradeSymbolMODULESHIELDGENERATORI:
		*s = TradeSymbolMODULESHIELDGENERATORI
		return nil
	case TradeSymbolMODULESHIELDGENERATORII:
		*s = TradeSymbolMODULESHIELDGENERATORII
		return nil
	case TradeSymbolMODULEOREREFINERYI:
		*s = TradeSymbolMODULEOREREFINERYI
		return nil
	case TradeSymbolMODULEFUELREFINERYI:
		*s = TradeSymbolMODULEFUELREFINERYI
		return nil
	case TradeSymbolMOUNTGASSIPHONI:
		*s = TradeSymbolMOUNTGASSIPHONI
		return nil
	case TradeSymbolMOUNTGASSIPHONII:
		*s = TradeSymbolMOUNTGASSIPHONII
		return nil
	case TradeSymbolMOUNTGASSIPHONIII:
		*s = TradeSymbolMOUNTGASSIPHONIII
		return nil
	case TradeSymbolMOUNTSURVEYORI:
		*s = TradeSymbolMOUNTSURVEYORI
		return nil
	case TradeSymbolMOUNTSURVEYORII:
		*s = TradeSymbolMOUNTSURVEYORII
		return nil
	case TradeSymbolMOUNTSURVEYORIII:
		*s = TradeSymbolMOUNTSURVEYORIII
		return nil
	case TradeSymbolMOUNTSENSORARRAYI:
		*s = TradeSymbolMOUNTSENSORARRAYI
		return nil
	case TradeSymbolMOUNTSENSORARRAYII:
		*s = TradeSymbolMOUNTSENSORARRAYII
		return nil
	case TradeSymbolMOUNTSENSORARRAYIII:
		*s = TradeSymbolMOUNTSENSORARRAYIII
		return nil
	case TradeSymbolMOUNTMININGLASERI:
		*s = TradeSymbolMOUNTMININGLASERI
		return nil
	case TradeSymbolMOUNTMININGLASERII:
		*s = TradeSymbolMOUNTMININGLASERII
		return nil
	case TradeSymbolMOUNTMININGLASERIII:
		*s = TradeSymbolMOUNTMININGLASERIII
		return nil
	case TradeSymbolMOUNTLASERCANNONI:
		*s = TradeSymbolMOUNTLASERCANNONI
		return nil
	case TradeSymbolMOUNTMISSILELAUNCHERI:
		*s = TradeSymbolMOUNTMISSILELAUNCHERI
		return nil
	case TradeSymbolMOUNTTURRETI:
		*s = TradeSymbolMOUNTTURRETI
		return nil
	case TradeSymbolSHIPPROBE:
		*s = TradeSymbolSHIPPROBE
		return nil
	case TradeSymbolSHIPMININGDRONE:
		*s = TradeSymbolSHIPMININGDRONE
		return nil
	case TradeSymbolSHIPSIPHONDRONE:
		*s = TradeSymbolSHIPSIPHONDRONE
		return nil
	case TradeSymbolSHIPINTERCEPTOR:
		*s = TradeSymbolSHIPINTERCEPTOR
		return nil
	case TradeSymbolSHIPLIGHTHAULER:
		*s = TradeSymbolSHIPLIGHTHAULER
		return nil
	case TradeSymbolSHIPCOMMANDFRIGATE:
		*s = TradeSymbolSHIPCOMMANDFRIGATE
		return nil
	case TradeSymbolSHIPEXPLORER:
		*s = TradeSymbolSHIPEXPLORER
		return nil
	case TradeSymbolSHIPHEAVYFREIGHTER:
		*s = TradeSymbolSHIPHEAVYFREIGHTER
		return nil
	case TradeSymbolSHIPLIGHTSHUTTLE:
		*s = TradeSymbolSHIPLIGHTSHUTTLE
		return nil
	case TradeSymbolSHIPOREHOUND:
		*s = TradeSymbolSHIPOREHOUND
		return nil
	case TradeSymbolSHIPREFININGFREIGHTER:
		*s = TradeSymbolSHIPREFININGFREIGHTER
		return nil
	case TradeSymbolSHIPSURVEYOR:
		*s = TradeSymbolSHIPSURVEYOR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type TransferCargoOK struct {
	Data TransferCargoOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *TransferCargoOK) GetData() TransferCargoOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *TransferCargoOK) SetData(val TransferCargoOKData) {
	s.Data = val
}

type TransferCargoOKData struct {
	Cargo ShipCargo `json:"cargo"`
}

// GetCargo returns the value of Cargo.
func (s *TransferCargoOKData) GetCargo() ShipCargo {
	return s.Cargo
}

// SetCargo sets the value of Cargo.
func (s *TransferCargoOKData) SetCargo(val ShipCargo) {
	s.Cargo = val
}

type TransferCargoReq struct {
	TradeSymbol TradeSymbol `json:"tradeSymbol"`
	// Amount of units to transfer.
	Units int `json:"units"`
	// The symbol of the ship to transfer to.
	ShipSymbol string `json:"shipSymbol"`
}

// GetTradeSymbol returns the value of TradeSymbol.
func (s *TransferCargoReq) GetTradeSymbol() TradeSymbol {
	return s.TradeSymbol
}

// GetUnits returns the value of Units.
func (s *TransferCargoReq) GetUnits() int {
	return s.Units
}

// GetShipSymbol returns the value of ShipSymbol.
func (s *TransferCargoReq) GetShipSymbol() string {
	return s.ShipSymbol
}

// SetTradeSymbol sets the value of TradeSymbol.
func (s *TransferCargoReq) SetTradeSymbol(val TradeSymbol) {
	s.TradeSymbol = val
}

// SetUnits sets the value of Units.
func (s *TransferCargoReq) SetUnits(val int) {
	s.Units = val
}

// SetShipSymbol sets the value of ShipSymbol.
func (s *TransferCargoReq) SetShipSymbol(val string) {
	s.ShipSymbol = val
}

type WarpShipOK struct {
	Data WarpShipOKData `json:"data"`
}

// GetData returns the value of Data.
func (s *WarpShipOK) GetData() WarpShipOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *WarpShipOK) SetData(val WarpShipOKData) {
	s.Data = val
}

type WarpShipOKData struct {
	Fuel ShipFuel `json:"fuel"`
	Nav  ShipNav  `json:"nav"`
}

// GetFuel returns the value of Fuel.
func (s *WarpShipOKData) GetFuel() ShipFuel {
	return s.Fuel
}

// GetNav returns the value of Nav.
func (s *WarpShipOKData) GetNav() ShipNav {
	return s.Nav
}

// SetFuel sets the value of Fuel.
func (s *WarpShipOKData) SetFuel(val ShipFuel) {
	s.Fuel = val
}

// SetNav sets the value of Nav.
func (s *WarpShipOKData) SetNav(val ShipNav) {
	s.Nav = val
}

type WarpShipReq struct {
	// The target destination.
	WaypointSymbol string `json:"waypointSymbol"`
}

// GetWaypointSymbol returns the value of WaypointSymbol.
func (s *WarpShipReq) GetWaypointSymbol() string {
	return s.WaypointSymbol
}

// SetWaypointSymbol sets the value of WaypointSymbol.
func (s *WarpShipReq) SetWaypointSymbol(val string) {
	s.WaypointSymbol = val
}

// A waypoint is a location that ships can travel to such as a Planet, Moon or Space Station.
// Ref: #/components/schemas/Waypoint
type Waypoint struct {
	Symbol       WaypointSymbol `json:"symbol"`
	Type         WaypointType   `json:"type"`
	SystemSymbol SystemSymbol   `json:"systemSymbol"`
	// Relative position of the waypoint on the system's x axis. This is not an absolute position in the
	// universe.
	X int `json:"x"`
	// Relative position of the waypoint on the system's y axis. This is not an absolute position in the
	// universe.
	Y int `json:"y"`
	// Waypoints that orbit this waypoint.
	Orbitals []WaypointOrbital `json:"orbitals"`
	// The symbol of the parent waypoint, if this waypoint is in orbit around another waypoint. Otherwise
	// this value is undefined.
	Orbits  OptString          `json:"orbits"`
	Faction OptWaypointFaction `json:"faction"`
	// The traits of the waypoint.
	Traits []WaypointTrait `json:"traits"`
	// The modifiers of the waypoint.
	Modifiers []WaypointModifier `json:"modifiers"`
	Chart     OptChart           `json:"chart"`
	// True if the waypoint is under construction.
	IsUnderConstruction bool `json:"isUnderConstruction"`
}

// GetSymbol returns the value of Symbol.
func (s *Waypoint) GetSymbol() WaypointSymbol {
	return s.Symbol
}

// GetType returns the value of Type.
func (s *Waypoint) GetType() WaypointType {
	return s.Type
}

// GetSystemSymbol returns the value of SystemSymbol.
func (s *Waypoint) GetSystemSymbol() SystemSymbol {
	return s.SystemSymbol
}

// GetX returns the value of X.
func (s *Waypoint) GetX() int {
	return s.X
}

// GetY returns the value of Y.
func (s *Waypoint) GetY() int {
	return s.Y
}

// GetOrbitals returns the value of Orbitals.
func (s *Waypoint) GetOrbitals() []WaypointOrbital {
	return s.Orbitals
}

// GetOrbits returns the value of Orbits.
func (s *Waypoint) GetOrbits() OptString {
	return s.Orbits
}

// GetFaction returns the value of Faction.
func (s *Waypoint) GetFaction() OptWaypointFaction {
	return s.Faction
}

// GetTraits returns the value of Traits.
func (s *Waypoint) GetTraits() []WaypointTrait {
	return s.Traits
}

// GetModifiers returns the value of Modifiers.
func (s *Waypoint) GetModifiers() []WaypointModifier {
	return s.Modifiers
}

// GetChart returns the value of Chart.
func (s *Waypoint) GetChart() OptChart {
	return s.Chart
}

// GetIsUnderConstruction returns the value of IsUnderConstruction.
func (s *Waypoint) GetIsUnderConstruction() bool {
	return s.IsUnderConstruction
}

// SetSymbol sets the value of Symbol.
func (s *Waypoint) SetSymbol(val WaypointSymbol) {
	s.Symbol = val
}

// SetType sets the value of Type.
func (s *Waypoint) SetType(val WaypointType) {
	s.Type = val
}

// SetSystemSymbol sets the value of SystemSymbol.
func (s *Waypoint) SetSystemSymbol(val SystemSymbol) {
	s.SystemSymbol = val
}

// SetX sets the value of X.
func (s *Waypoint) SetX(val int) {
	s.X = val
}

// SetY sets the value of Y.
func (s *Waypoint) SetY(val int) {
	s.Y = val
}

// SetOrbitals sets the value of Orbitals.
func (s *Waypoint) SetOrbitals(val []WaypointOrbital) {
	s.Orbitals = val
}

// SetOrbits sets the value of Orbits.
func (s *Waypoint) SetOrbits(val OptString) {
	s.Orbits = val
}

// SetFaction sets the value of Faction.
func (s *Waypoint) SetFaction(val OptWaypointFaction) {
	s.Faction = val
}

// SetTraits sets the value of Traits.
func (s *Waypoint) SetTraits(val []WaypointTrait) {
	s.Traits = val
}

// SetModifiers sets the value of Modifiers.
func (s *Waypoint) SetModifiers(val []WaypointModifier) {
	s.Modifiers = val
}

// SetChart sets the value of Chart.
func (s *Waypoint) SetChart(val OptChart) {
	s.Chart = val
}

// SetIsUnderConstruction sets the value of IsUnderConstruction.
func (s *Waypoint) SetIsUnderConstruction(val bool) {
	s.IsUnderConstruction = val
}

// The faction that controls the waypoint.
// Ref: #/components/schemas/WaypointFaction
type WaypointFaction struct {
	Symbol FactionSymbol `json:"symbol"`
}

// GetSymbol returns the value of Symbol.
func (s *WaypointFaction) GetSymbol() FactionSymbol {
	return s.Symbol
}

// SetSymbol sets the value of Symbol.
func (s *WaypointFaction) SetSymbol(val FactionSymbol) {
	s.Symbol = val
}

// Ref: #/components/schemas/WaypointModifier
type WaypointModifier struct {
	Symbol WaypointModifierSymbol `json:"symbol"`
	// The name of the trait.
	Name string `json:"name"`
	// A description of the trait.
	Description string `json:"description"`
}

// GetSymbol returns the value of Symbol.
func (s *WaypointModifier) GetSymbol() WaypointModifierSymbol {
	return s.Symbol
}

// GetName returns the value of Name.
func (s *WaypointModifier) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *WaypointModifier) GetDescription() string {
	return s.Description
}

// SetSymbol sets the value of Symbol.
func (s *WaypointModifier) SetSymbol(val WaypointModifierSymbol) {
	s.Symbol = val
}

// SetName sets the value of Name.
func (s *WaypointModifier) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *WaypointModifier) SetDescription(val string) {
	s.Description = val
}

// The unique identifier of the modifier.
// Ref: #/components/schemas/WaypointModifierSymbol
type WaypointModifierSymbol string

const (
	WaypointModifierSymbolSTRIPPED      WaypointModifierSymbol = "STRIPPED"
	WaypointModifierSymbolUNSTABLE      WaypointModifierSymbol = "UNSTABLE"
	WaypointModifierSymbolRADIATIONLEAK WaypointModifierSymbol = "RADIATION_LEAK"
	WaypointModifierSymbolCRITICALLIMIT WaypointModifierSymbol = "CRITICAL_LIMIT"
	WaypointModifierSymbolCIVILUNREST   WaypointModifierSymbol = "CIVIL_UNREST"
)

// AllValues returns all WaypointModifierSymbol values.
func (WaypointModifierSymbol) AllValues() []WaypointModifierSymbol {
	return []WaypointModifierSymbol{
		WaypointModifierSymbolSTRIPPED,
		WaypointModifierSymbolUNSTABLE,
		WaypointModifierSymbolRADIATIONLEAK,
		WaypointModifierSymbolCRITICALLIMIT,
		WaypointModifierSymbolCIVILUNREST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WaypointModifierSymbol) MarshalText() ([]byte, error) {
	switch s {
	case WaypointModifierSymbolSTRIPPED:
		return []byte(s), nil
	case WaypointModifierSymbolUNSTABLE:
		return []byte(s), nil
	case WaypointModifierSymbolRADIATIONLEAK:
		return []byte(s), nil
	case WaypointModifierSymbolCRITICALLIMIT:
		return []byte(s), nil
	case WaypointModifierSymbolCIVILUNREST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WaypointModifierSymbol) UnmarshalText(data []byte) error {
	switch WaypointModifierSymbol(data) {
	case WaypointModifierSymbolSTRIPPED:
		*s = WaypointModifierSymbolSTRIPPED
		return nil
	case WaypointModifierSymbolUNSTABLE:
		*s = WaypointModifierSymbolUNSTABLE
		return nil
	case WaypointModifierSymbolRADIATIONLEAK:
		*s = WaypointModifierSymbolRADIATIONLEAK
		return nil
	case WaypointModifierSymbolCRITICALLIMIT:
		*s = WaypointModifierSymbolCRITICALLIMIT
		return nil
	case WaypointModifierSymbolCIVILUNREST:
		*s = WaypointModifierSymbolCIVILUNREST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// An orbital is another waypoint that orbits a parent waypoint.
// Ref: #/components/schemas/WaypointOrbital
type WaypointOrbital struct {
	// The symbol of the orbiting waypoint.
	Symbol string `json:"symbol"`
}

// GetSymbol returns the value of Symbol.
func (s *WaypointOrbital) GetSymbol() string {
	return s.Symbol
}

// SetSymbol sets the value of Symbol.
func (s *WaypointOrbital) SetSymbol(val string) {
	s.Symbol = val
}

type WaypointSymbol string

// Ref: #/components/schemas/WaypointTrait
type WaypointTrait struct {
	Symbol WaypointTraitSymbol `json:"symbol"`
	// The name of the trait.
	Name string `json:"name"`
	// A description of the trait.
	Description string `json:"description"`
}

// GetSymbol returns the value of Symbol.
func (s *WaypointTrait) GetSymbol() WaypointTraitSymbol {
	return s.Symbol
}

// GetName returns the value of Name.
func (s *WaypointTrait) GetName() string {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *WaypointTrait) GetDescription() string {
	return s.Description
}

// SetSymbol sets the value of Symbol.
func (s *WaypointTrait) SetSymbol(val WaypointTraitSymbol) {
	s.Symbol = val
}

// SetName sets the value of Name.
func (s *WaypointTrait) SetName(val string) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *WaypointTrait) SetDescription(val string) {
	s.Description = val
}

// The unique identifier of the trait.
// Ref: #/components/schemas/WaypointTraitSymbol
type WaypointTraitSymbol string

const (
	WaypointTraitSymbolUNCHARTED             WaypointTraitSymbol = "UNCHARTED"
	WaypointTraitSymbolUNDERCONSTRUCTION     WaypointTraitSymbol = "UNDER_CONSTRUCTION"
	WaypointTraitSymbolMARKETPLACE           WaypointTraitSymbol = "MARKETPLACE"
	WaypointTraitSymbolSHIPYARD              WaypointTraitSymbol = "SHIPYARD"
	WaypointTraitSymbolOUTPOST               WaypointTraitSymbol = "OUTPOST"
	WaypointTraitSymbolSCATTEREDSETTLEMENTS  WaypointTraitSymbol = "SCATTERED_SETTLEMENTS"
	WaypointTraitSymbolSPRAWLINGCITIES       WaypointTraitSymbol = "SPRAWLING_CITIES"
	WaypointTraitSymbolMEGASTRUCTURES        WaypointTraitSymbol = "MEGA_STRUCTURES"
	WaypointTraitSymbolPIRATEBASE            WaypointTraitSymbol = "PIRATE_BASE"
	WaypointTraitSymbolOVERCROWDED           WaypointTraitSymbol = "OVERCROWDED"
	WaypointTraitSymbolHIGHTECH              WaypointTraitSymbol = "HIGH_TECH"
	WaypointTraitSymbolCORRUPT               WaypointTraitSymbol = "CORRUPT"
	WaypointTraitSymbolBUREAUCRATIC          WaypointTraitSymbol = "BUREAUCRATIC"
	WaypointTraitSymbolTRADINGHUB            WaypointTraitSymbol = "TRADING_HUB"
	WaypointTraitSymbolINDUSTRIAL            WaypointTraitSymbol = "INDUSTRIAL"
	WaypointTraitSymbolBLACKMARKET           WaypointTraitSymbol = "BLACK_MARKET"
	WaypointTraitSymbolRESEARCHFACILITY      WaypointTraitSymbol = "RESEARCH_FACILITY"
	WaypointTraitSymbolMILITARYBASE          WaypointTraitSymbol = "MILITARY_BASE"
	WaypointTraitSymbolSURVEILLANCEOUTPOST   WaypointTraitSymbol = "SURVEILLANCE_OUTPOST"
	WaypointTraitSymbolEXPLORATIONOUTPOST    WaypointTraitSymbol = "EXPLORATION_OUTPOST"
	WaypointTraitSymbolMINERALDEPOSITS       WaypointTraitSymbol = "MINERAL_DEPOSITS"
	WaypointTraitSymbolCOMMONMETALDEPOSITS   WaypointTraitSymbol = "COMMON_METAL_DEPOSITS"
	WaypointTraitSymbolPRECIOUSMETALDEPOSITS WaypointTraitSymbol = "PRECIOUS_METAL_DEPOSITS"
	WaypointTraitSymbolRAREMETALDEPOSITS     WaypointTraitSymbol = "RARE_METAL_DEPOSITS"
	WaypointTraitSymbolMETHANEPOOLS          WaypointTraitSymbol = "METHANE_POOLS"
	WaypointTraitSymbolICECRYSTALS           WaypointTraitSymbol = "ICE_CRYSTALS"
	WaypointTraitSymbolEXPLOSIVEGASES        WaypointTraitSymbol = "EXPLOSIVE_GASES"
	WaypointTraitSymbolSTRONGMAGNETOSPHERE   WaypointTraitSymbol = "STRONG_MAGNETOSPHERE"
	WaypointTraitSymbolVIBRANTAURORAS        WaypointTraitSymbol = "VIBRANT_AURORAS"
	WaypointTraitSymbolSALTFLATS             WaypointTraitSymbol = "SALT_FLATS"
	WaypointTraitSymbolCANYONS               WaypointTraitSymbol = "CANYONS"
	WaypointTraitSymbolPERPETUALDAYLIGHT     WaypointTraitSymbol = "PERPETUAL_DAYLIGHT"
	WaypointTraitSymbolPERPETUALOVERCAST     WaypointTraitSymbol = "PERPETUAL_OVERCAST"
	WaypointTraitSymbolDRYSEABEDS            WaypointTraitSymbol = "DRY_SEABEDS"
	WaypointTraitSymbolMAGMASEAS             WaypointTraitSymbol = "MAGMA_SEAS"
	WaypointTraitSymbolSUPERVOLCANOES        WaypointTraitSymbol = "SUPERVOLCANOES"
	WaypointTraitSymbolASHCLOUDS             WaypointTraitSymbol = "ASH_CLOUDS"
	WaypointTraitSymbolVASTRUINS             WaypointTraitSymbol = "VAST_RUINS"
	WaypointTraitSymbolMUTATEDFLORA          WaypointTraitSymbol = "MUTATED_FLORA"
	WaypointTraitSymbolTERRAFORMED           WaypointTraitSymbol = "TERRAFORMED"
	WaypointTraitSymbolEXTREMETEMPERATURES   WaypointTraitSymbol = "EXTREME_TEMPERATURES"
	WaypointTraitSymbolEXTREMEPRESSURE       WaypointTraitSymbol = "EXTREME_PRESSURE"
	WaypointTraitSymbolDIVERSELIFE           WaypointTraitSymbol = "DIVERSE_LIFE"
	WaypointTraitSymbolSCARCELIFE            WaypointTraitSymbol = "SCARCE_LIFE"
	WaypointTraitSymbolFOSSILS               WaypointTraitSymbol = "FOSSILS"
	WaypointTraitSymbolWEAKGRAVITY           WaypointTraitSymbol = "WEAK_GRAVITY"
	WaypointTraitSymbolSTRONGGRAVITY         WaypointTraitSymbol = "STRONG_GRAVITY"
	WaypointTraitSymbolCRUSHINGGRAVITY       WaypointTraitSymbol = "CRUSHING_GRAVITY"
	WaypointTraitSymbolTOXICATMOSPHERE       WaypointTraitSymbol = "TOXIC_ATMOSPHERE"
	WaypointTraitSymbolCORROSIVEATMOSPHERE   WaypointTraitSymbol = "CORROSIVE_ATMOSPHERE"
	WaypointTraitSymbolBREATHABLEATMOSPHERE  WaypointTraitSymbol = "BREATHABLE_ATMOSPHERE"
	WaypointTraitSymbolTHINATMOSPHERE        WaypointTraitSymbol = "THIN_ATMOSPHERE"
	WaypointTraitSymbolJOVIAN                WaypointTraitSymbol = "JOVIAN"
	WaypointTraitSymbolROCKY                 WaypointTraitSymbol = "ROCKY"
	WaypointTraitSymbolVOLCANIC              WaypointTraitSymbol = "VOLCANIC"
	WaypointTraitSymbolFROZEN                WaypointTraitSymbol = "FROZEN"
	WaypointTraitSymbolSWAMP                 WaypointTraitSymbol = "SWAMP"
	WaypointTraitSymbolBARREN                WaypointTraitSymbol = "BARREN"
	WaypointTraitSymbolTEMPERATE             WaypointTraitSymbol = "TEMPERATE"
	WaypointTraitSymbolJUNGLE                WaypointTraitSymbol = "JUNGLE"
	WaypointTraitSymbolOCEAN                 WaypointTraitSymbol = "OCEAN"
	WaypointTraitSymbolRADIOACTIVE           WaypointTraitSymbol = "RADIOACTIVE"
	WaypointTraitSymbolMICROGRAVITYANOMALIES WaypointTraitSymbol = "MICRO_GRAVITY_ANOMALIES"
	WaypointTraitSymbolDEBRISCLUSTER         WaypointTraitSymbol = "DEBRIS_CLUSTER"
	WaypointTraitSymbolDEEPCRATERS           WaypointTraitSymbol = "DEEP_CRATERS"
	WaypointTraitSymbolSHALLOWCRATERS        WaypointTraitSymbol = "SHALLOW_CRATERS"
	WaypointTraitSymbolUNSTABLECOMPOSITION   WaypointTraitSymbol = "UNSTABLE_COMPOSITION"
	WaypointTraitSymbolHOLLOWEDINTERIOR      WaypointTraitSymbol = "HOLLOWED_INTERIOR"
	WaypointTraitSymbolSTRIPPED              WaypointTraitSymbol = "STRIPPED"
)

// AllValues returns all WaypointTraitSymbol values.
func (WaypointTraitSymbol) AllValues() []WaypointTraitSymbol {
	return []WaypointTraitSymbol{
		WaypointTraitSymbolUNCHARTED,
		WaypointTraitSymbolUNDERCONSTRUCTION,
		WaypointTraitSymbolMARKETPLACE,
		WaypointTraitSymbolSHIPYARD,
		WaypointTraitSymbolOUTPOST,
		WaypointTraitSymbolSCATTEREDSETTLEMENTS,
		WaypointTraitSymbolSPRAWLINGCITIES,
		WaypointTraitSymbolMEGASTRUCTURES,
		WaypointTraitSymbolPIRATEBASE,
		WaypointTraitSymbolOVERCROWDED,
		WaypointTraitSymbolHIGHTECH,
		WaypointTraitSymbolCORRUPT,
		WaypointTraitSymbolBUREAUCRATIC,
		WaypointTraitSymbolTRADINGHUB,
		WaypointTraitSymbolINDUSTRIAL,
		WaypointTraitSymbolBLACKMARKET,
		WaypointTraitSymbolRESEARCHFACILITY,
		WaypointTraitSymbolMILITARYBASE,
		WaypointTraitSymbolSURVEILLANCEOUTPOST,
		WaypointTraitSymbolEXPLORATIONOUTPOST,
		WaypointTraitSymbolMINERALDEPOSITS,
		WaypointTraitSymbolCOMMONMETALDEPOSITS,
		WaypointTraitSymbolPRECIOUSMETALDEPOSITS,
		WaypointTraitSymbolRAREMETALDEPOSITS,
		WaypointTraitSymbolMETHANEPOOLS,
		WaypointTraitSymbolICECRYSTALS,
		WaypointTraitSymbolEXPLOSIVEGASES,
		WaypointTraitSymbolSTRONGMAGNETOSPHERE,
		WaypointTraitSymbolVIBRANTAURORAS,
		WaypointTraitSymbolSALTFLATS,
		WaypointTraitSymbolCANYONS,
		WaypointTraitSymbolPERPETUALDAYLIGHT,
		WaypointTraitSymbolPERPETUALOVERCAST,
		WaypointTraitSymbolDRYSEABEDS,
		WaypointTraitSymbolMAGMASEAS,
		WaypointTraitSymbolSUPERVOLCANOES,
		WaypointTraitSymbolASHCLOUDS,
		WaypointTraitSymbolVASTRUINS,
		WaypointTraitSymbolMUTATEDFLORA,
		WaypointTraitSymbolTERRAFORMED,
		WaypointTraitSymbolEXTREMETEMPERATURES,
		WaypointTraitSymbolEXTREMEPRESSURE,
		WaypointTraitSymbolDIVERSELIFE,
		WaypointTraitSymbolSCARCELIFE,
		WaypointTraitSymbolFOSSILS,
		WaypointTraitSymbolWEAKGRAVITY,
		WaypointTraitSymbolSTRONGGRAVITY,
		WaypointTraitSymbolCRUSHINGGRAVITY,
		WaypointTraitSymbolTOXICATMOSPHERE,
		WaypointTraitSymbolCORROSIVEATMOSPHERE,
		WaypointTraitSymbolBREATHABLEATMOSPHERE,
		WaypointTraitSymbolTHINATMOSPHERE,
		WaypointTraitSymbolJOVIAN,
		WaypointTraitSymbolROCKY,
		WaypointTraitSymbolVOLCANIC,
		WaypointTraitSymbolFROZEN,
		WaypointTraitSymbolSWAMP,
		WaypointTraitSymbolBARREN,
		WaypointTraitSymbolTEMPERATE,
		WaypointTraitSymbolJUNGLE,
		WaypointTraitSymbolOCEAN,
		WaypointTraitSymbolRADIOACTIVE,
		WaypointTraitSymbolMICROGRAVITYANOMALIES,
		WaypointTraitSymbolDEBRISCLUSTER,
		WaypointTraitSymbolDEEPCRATERS,
		WaypointTraitSymbolSHALLOWCRATERS,
		WaypointTraitSymbolUNSTABLECOMPOSITION,
		WaypointTraitSymbolHOLLOWEDINTERIOR,
		WaypointTraitSymbolSTRIPPED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WaypointTraitSymbol) MarshalText() ([]byte, error) {
	switch s {
	case WaypointTraitSymbolUNCHARTED:
		return []byte(s), nil
	case WaypointTraitSymbolUNDERCONSTRUCTION:
		return []byte(s), nil
	case WaypointTraitSymbolMARKETPLACE:
		return []byte(s), nil
	case WaypointTraitSymbolSHIPYARD:
		return []byte(s), nil
	case WaypointTraitSymbolOUTPOST:
		return []byte(s), nil
	case WaypointTraitSymbolSCATTEREDSETTLEMENTS:
		return []byte(s), nil
	case WaypointTraitSymbolSPRAWLINGCITIES:
		return []byte(s), nil
	case WaypointTraitSymbolMEGASTRUCTURES:
		return []byte(s), nil
	case WaypointTraitSymbolPIRATEBASE:
		return []byte(s), nil
	case WaypointTraitSymbolOVERCROWDED:
		return []byte(s), nil
	case WaypointTraitSymbolHIGHTECH:
		return []byte(s), nil
	case WaypointTraitSymbolCORRUPT:
		return []byte(s), nil
	case WaypointTraitSymbolBUREAUCRATIC:
		return []byte(s), nil
	case WaypointTraitSymbolTRADINGHUB:
		return []byte(s), nil
	case WaypointTraitSymbolINDUSTRIAL:
		return []byte(s), nil
	case WaypointTraitSymbolBLACKMARKET:
		return []byte(s), nil
	case WaypointTraitSymbolRESEARCHFACILITY:
		return []byte(s), nil
	case WaypointTraitSymbolMILITARYBASE:
		return []byte(s), nil
	case WaypointTraitSymbolSURVEILLANCEOUTPOST:
		return []byte(s), nil
	case WaypointTraitSymbolEXPLORATIONOUTPOST:
		return []byte(s), nil
	case WaypointTraitSymbolMINERALDEPOSITS:
		return []byte(s), nil
	case WaypointTraitSymbolCOMMONMETALDEPOSITS:
		return []byte(s), nil
	case WaypointTraitSymbolPRECIOUSMETALDEPOSITS:
		return []byte(s), nil
	case WaypointTraitSymbolRAREMETALDEPOSITS:
		return []byte(s), nil
	case WaypointTraitSymbolMETHANEPOOLS:
		return []byte(s), nil
	case WaypointTraitSymbolICECRYSTALS:
		return []byte(s), nil
	case WaypointTraitSymbolEXPLOSIVEGASES:
		return []byte(s), nil
	case WaypointTraitSymbolSTRONGMAGNETOSPHERE:
		return []byte(s), nil
	case WaypointTraitSymbolVIBRANTAURORAS:
		return []byte(s), nil
	case WaypointTraitSymbolSALTFLATS:
		return []byte(s), nil
	case WaypointTraitSymbolCANYONS:
		return []byte(s), nil
	case WaypointTraitSymbolPERPETUALDAYLIGHT:
		return []byte(s), nil
	case WaypointTraitSymbolPERPETUALOVERCAST:
		return []byte(s), nil
	case WaypointTraitSymbolDRYSEABEDS:
		return []byte(s), nil
	case WaypointTraitSymbolMAGMASEAS:
		return []byte(s), nil
	case WaypointTraitSymbolSUPERVOLCANOES:
		return []byte(s), nil
	case WaypointTraitSymbolASHCLOUDS:
		return []byte(s), nil
	case WaypointTraitSymbolVASTRUINS:
		return []byte(s), nil
	case WaypointTraitSymbolMUTATEDFLORA:
		return []byte(s), nil
	case WaypointTraitSymbolTERRAFORMED:
		return []byte(s), nil
	case WaypointTraitSymbolEXTREMETEMPERATURES:
		return []byte(s), nil
	case WaypointTraitSymbolEXTREMEPRESSURE:
		return []byte(s), nil
	case WaypointTraitSymbolDIVERSELIFE:
		return []byte(s), nil
	case WaypointTraitSymbolSCARCELIFE:
		return []byte(s), nil
	case WaypointTraitSymbolFOSSILS:
		return []byte(s), nil
	case WaypointTraitSymbolWEAKGRAVITY:
		return []byte(s), nil
	case WaypointTraitSymbolSTRONGGRAVITY:
		return []byte(s), nil
	case WaypointTraitSymbolCRUSHINGGRAVITY:
		return []byte(s), nil
	case WaypointTraitSymbolTOXICATMOSPHERE:
		return []byte(s), nil
	case WaypointTraitSymbolCORROSIVEATMOSPHERE:
		return []byte(s), nil
	case WaypointTraitSymbolBREATHABLEATMOSPHERE:
		return []byte(s), nil
	case WaypointTraitSymbolTHINATMOSPHERE:
		return []byte(s), nil
	case WaypointTraitSymbolJOVIAN:
		return []byte(s), nil
	case WaypointTraitSymbolROCKY:
		return []byte(s), nil
	case WaypointTraitSymbolVOLCANIC:
		return []byte(s), nil
	case WaypointTraitSymbolFROZEN:
		return []byte(s), nil
	case WaypointTraitSymbolSWAMP:
		return []byte(s), nil
	case WaypointTraitSymbolBARREN:
		return []byte(s), nil
	case WaypointTraitSymbolTEMPERATE:
		return []byte(s), nil
	case WaypointTraitSymbolJUNGLE:
		return []byte(s), nil
	case WaypointTraitSymbolOCEAN:
		return []byte(s), nil
	case WaypointTraitSymbolRADIOACTIVE:
		return []byte(s), nil
	case WaypointTraitSymbolMICROGRAVITYANOMALIES:
		return []byte(s), nil
	case WaypointTraitSymbolDEBRISCLUSTER:
		return []byte(s), nil
	case WaypointTraitSymbolDEEPCRATERS:
		return []byte(s), nil
	case WaypointTraitSymbolSHALLOWCRATERS:
		return []byte(s), nil
	case WaypointTraitSymbolUNSTABLECOMPOSITION:
		return []byte(s), nil
	case WaypointTraitSymbolHOLLOWEDINTERIOR:
		return []byte(s), nil
	case WaypointTraitSymbolSTRIPPED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WaypointTraitSymbol) UnmarshalText(data []byte) error {
	switch WaypointTraitSymbol(data) {
	case WaypointTraitSymbolUNCHARTED:
		*s = WaypointTraitSymbolUNCHARTED
		return nil
	case WaypointTraitSymbolUNDERCONSTRUCTION:
		*s = WaypointTraitSymbolUNDERCONSTRUCTION
		return nil
	case WaypointTraitSymbolMARKETPLACE:
		*s = WaypointTraitSymbolMARKETPLACE
		return nil
	case WaypointTraitSymbolSHIPYARD:
		*s = WaypointTraitSymbolSHIPYARD
		return nil
	case WaypointTraitSymbolOUTPOST:
		*s = WaypointTraitSymbolOUTPOST
		return nil
	case WaypointTraitSymbolSCATTEREDSETTLEMENTS:
		*s = WaypointTraitSymbolSCATTEREDSETTLEMENTS
		return nil
	case WaypointTraitSymbolSPRAWLINGCITIES:
		*s = WaypointTraitSymbolSPRAWLINGCITIES
		return nil
	case WaypointTraitSymbolMEGASTRUCTURES:
		*s = WaypointTraitSymbolMEGASTRUCTURES
		return nil
	case WaypointTraitSymbolPIRATEBASE:
		*s = WaypointTraitSymbolPIRATEBASE
		return nil
	case WaypointTraitSymbolOVERCROWDED:
		*s = WaypointTraitSymbolOVERCROWDED
		return nil
	case WaypointTraitSymbolHIGHTECH:
		*s = WaypointTraitSymbolHIGHTECH
		return nil
	case WaypointTraitSymbolCORRUPT:
		*s = WaypointTraitSymbolCORRUPT
		return nil
	case WaypointTraitSymbolBUREAUCRATIC:
		*s = WaypointTraitSymbolBUREAUCRATIC
		return nil
	case WaypointTraitSymbolTRADINGHUB:
		*s = WaypointTraitSymbolTRADINGHUB
		return nil
	case WaypointTraitSymbolINDUSTRIAL:
		*s = WaypointTraitSymbolINDUSTRIAL
		return nil
	case WaypointTraitSymbolBLACKMARKET:
		*s = WaypointTraitSymbolBLACKMARKET
		return nil
	case WaypointTraitSymbolRESEARCHFACILITY:
		*s = WaypointTraitSymbolRESEARCHFACILITY
		return nil
	case WaypointTraitSymbolMILITARYBASE:
		*s = WaypointTraitSymbolMILITARYBASE
		return nil
	case WaypointTraitSymbolSURVEILLANCEOUTPOST:
		*s = WaypointTraitSymbolSURVEILLANCEOUTPOST
		return nil
	case WaypointTraitSymbolEXPLORATIONOUTPOST:
		*s = WaypointTraitSymbolEXPLORATIONOUTPOST
		return nil
	case WaypointTraitSymbolMINERALDEPOSITS:
		*s = WaypointTraitSymbolMINERALDEPOSITS
		return nil
	case WaypointTraitSymbolCOMMONMETALDEPOSITS:
		*s = WaypointTraitSymbolCOMMONMETALDEPOSITS
		return nil
	case WaypointTraitSymbolPRECIOUSMETALDEPOSITS:
		*s = WaypointTraitSymbolPRECIOUSMETALDEPOSITS
		return nil
	case WaypointTraitSymbolRAREMETALDEPOSITS:
		*s = WaypointTraitSymbolRAREMETALDEPOSITS
		return nil
	case WaypointTraitSymbolMETHANEPOOLS:
		*s = WaypointTraitSymbolMETHANEPOOLS
		return nil
	case WaypointTraitSymbolICECRYSTALS:
		*s = WaypointTraitSymbolICECRYSTALS
		return nil
	case WaypointTraitSymbolEXPLOSIVEGASES:
		*s = WaypointTraitSymbolEXPLOSIVEGASES
		return nil
	case WaypointTraitSymbolSTRONGMAGNETOSPHERE:
		*s = WaypointTraitSymbolSTRONGMAGNETOSPHERE
		return nil
	case WaypointTraitSymbolVIBRANTAURORAS:
		*s = WaypointTraitSymbolVIBRANTAURORAS
		return nil
	case WaypointTraitSymbolSALTFLATS:
		*s = WaypointTraitSymbolSALTFLATS
		return nil
	case WaypointTraitSymbolCANYONS:
		*s = WaypointTraitSymbolCANYONS
		return nil
	case WaypointTraitSymbolPERPETUALDAYLIGHT:
		*s = WaypointTraitSymbolPERPETUALDAYLIGHT
		return nil
	case WaypointTraitSymbolPERPETUALOVERCAST:
		*s = WaypointTraitSymbolPERPETUALOVERCAST
		return nil
	case WaypointTraitSymbolDRYSEABEDS:
		*s = WaypointTraitSymbolDRYSEABEDS
		return nil
	case WaypointTraitSymbolMAGMASEAS:
		*s = WaypointTraitSymbolMAGMASEAS
		return nil
	case WaypointTraitSymbolSUPERVOLCANOES:
		*s = WaypointTraitSymbolSUPERVOLCANOES
		return nil
	case WaypointTraitSymbolASHCLOUDS:
		*s = WaypointTraitSymbolASHCLOUDS
		return nil
	case WaypointTraitSymbolVASTRUINS:
		*s = WaypointTraitSymbolVASTRUINS
		return nil
	case WaypointTraitSymbolMUTATEDFLORA:
		*s = WaypointTraitSymbolMUTATEDFLORA
		return nil
	case WaypointTraitSymbolTERRAFORMED:
		*s = WaypointTraitSymbolTERRAFORMED
		return nil
	case WaypointTraitSymbolEXTREMETEMPERATURES:
		*s = WaypointTraitSymbolEXTREMETEMPERATURES
		return nil
	case WaypointTraitSymbolEXTREMEPRESSURE:
		*s = WaypointTraitSymbolEXTREMEPRESSURE
		return nil
	case WaypointTraitSymbolDIVERSELIFE:
		*s = WaypointTraitSymbolDIVERSELIFE
		return nil
	case WaypointTraitSymbolSCARCELIFE:
		*s = WaypointTraitSymbolSCARCELIFE
		return nil
	case WaypointTraitSymbolFOSSILS:
		*s = WaypointTraitSymbolFOSSILS
		return nil
	case WaypointTraitSymbolWEAKGRAVITY:
		*s = WaypointTraitSymbolWEAKGRAVITY
		return nil
	case WaypointTraitSymbolSTRONGGRAVITY:
		*s = WaypointTraitSymbolSTRONGGRAVITY
		return nil
	case WaypointTraitSymbolCRUSHINGGRAVITY:
		*s = WaypointTraitSymbolCRUSHINGGRAVITY
		return nil
	case WaypointTraitSymbolTOXICATMOSPHERE:
		*s = WaypointTraitSymbolTOXICATMOSPHERE
		return nil
	case WaypointTraitSymbolCORROSIVEATMOSPHERE:
		*s = WaypointTraitSymbolCORROSIVEATMOSPHERE
		return nil
	case WaypointTraitSymbolBREATHABLEATMOSPHERE:
		*s = WaypointTraitSymbolBREATHABLEATMOSPHERE
		return nil
	case WaypointTraitSymbolTHINATMOSPHERE:
		*s = WaypointTraitSymbolTHINATMOSPHERE
		return nil
	case WaypointTraitSymbolJOVIAN:
		*s = WaypointTraitSymbolJOVIAN
		return nil
	case WaypointTraitSymbolROCKY:
		*s = WaypointTraitSymbolROCKY
		return nil
	case WaypointTraitSymbolVOLCANIC:
		*s = WaypointTraitSymbolVOLCANIC
		return nil
	case WaypointTraitSymbolFROZEN:
		*s = WaypointTraitSymbolFROZEN
		return nil
	case WaypointTraitSymbolSWAMP:
		*s = WaypointTraitSymbolSWAMP
		return nil
	case WaypointTraitSymbolBARREN:
		*s = WaypointTraitSymbolBARREN
		return nil
	case WaypointTraitSymbolTEMPERATE:
		*s = WaypointTraitSymbolTEMPERATE
		return nil
	case WaypointTraitSymbolJUNGLE:
		*s = WaypointTraitSymbolJUNGLE
		return nil
	case WaypointTraitSymbolOCEAN:
		*s = WaypointTraitSymbolOCEAN
		return nil
	case WaypointTraitSymbolRADIOACTIVE:
		*s = WaypointTraitSymbolRADIOACTIVE
		return nil
	case WaypointTraitSymbolMICROGRAVITYANOMALIES:
		*s = WaypointTraitSymbolMICROGRAVITYANOMALIES
		return nil
	case WaypointTraitSymbolDEBRISCLUSTER:
		*s = WaypointTraitSymbolDEBRISCLUSTER
		return nil
	case WaypointTraitSymbolDEEPCRATERS:
		*s = WaypointTraitSymbolDEEPCRATERS
		return nil
	case WaypointTraitSymbolSHALLOWCRATERS:
		*s = WaypointTraitSymbolSHALLOWCRATERS
		return nil
	case WaypointTraitSymbolUNSTABLECOMPOSITION:
		*s = WaypointTraitSymbolUNSTABLECOMPOSITION
		return nil
	case WaypointTraitSymbolHOLLOWEDINTERIOR:
		*s = WaypointTraitSymbolHOLLOWEDINTERIOR
		return nil
	case WaypointTraitSymbolSTRIPPED:
		*s = WaypointTraitSymbolSTRIPPED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The type of waypoint.
// Ref: #/components/schemas/WaypointType
type WaypointType string

const (
	WaypointTypePLANET                WaypointType = "PLANET"
	WaypointTypeGASGIANT              WaypointType = "GAS_GIANT"
	WaypointTypeMOON                  WaypointType = "MOON"
	WaypointTypeORBITALSTATION        WaypointType = "ORBITAL_STATION"
	WaypointTypeJUMPGATE              WaypointType = "JUMP_GATE"
	WaypointTypeASTEROIDFIELD         WaypointType = "ASTEROID_FIELD"
	WaypointTypeASTEROID              WaypointType = "ASTEROID"
	WaypointTypeENGINEEREDASTEROID    WaypointType = "ENGINEERED_ASTEROID"
	WaypointTypeASTEROIDBASE          WaypointType = "ASTEROID_BASE"
	WaypointTypeNEBULA                WaypointType = "NEBULA"
	WaypointTypeDEBRISFIELD           WaypointType = "DEBRIS_FIELD"
	WaypointTypeGRAVITYWELL           WaypointType = "GRAVITY_WELL"
	WaypointTypeARTIFICIALGRAVITYWELL WaypointType = "ARTIFICIAL_GRAVITY_WELL"
	WaypointTypeFUELSTATION           WaypointType = "FUEL_STATION"
)

// AllValues returns all WaypointType values.
func (WaypointType) AllValues() []WaypointType {
	return []WaypointType{
		WaypointTypePLANET,
		WaypointTypeGASGIANT,
		WaypointTypeMOON,
		WaypointTypeORBITALSTATION,
		WaypointTypeJUMPGATE,
		WaypointTypeASTEROIDFIELD,
		WaypointTypeASTEROID,
		WaypointTypeENGINEEREDASTEROID,
		WaypointTypeASTEROIDBASE,
		WaypointTypeNEBULA,
		WaypointTypeDEBRISFIELD,
		WaypointTypeGRAVITYWELL,
		WaypointTypeARTIFICIALGRAVITYWELL,
		WaypointTypeFUELSTATION,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s WaypointType) MarshalText() ([]byte, error) {
	switch s {
	case WaypointTypePLANET:
		return []byte(s), nil
	case WaypointTypeGASGIANT:
		return []byte(s), nil
	case WaypointTypeMOON:
		return []byte(s), nil
	case WaypointTypeORBITALSTATION:
		return []byte(s), nil
	case WaypointTypeJUMPGATE:
		return []byte(s), nil
	case WaypointTypeASTEROIDFIELD:
		return []byte(s), nil
	case WaypointTypeASTEROID:
		return []byte(s), nil
	case WaypointTypeENGINEEREDASTEROID:
		return []byte(s), nil
	case WaypointTypeASTEROIDBASE:
		return []byte(s), nil
	case WaypointTypeNEBULA:
		return []byte(s), nil
	case WaypointTypeDEBRISFIELD:
		return []byte(s), nil
	case WaypointTypeGRAVITYWELL:
		return []byte(s), nil
	case WaypointTypeARTIFICIALGRAVITYWELL:
		return []byte(s), nil
	case WaypointTypeFUELSTATION:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *WaypointType) UnmarshalText(data []byte) error {
	switch WaypointType(data) {
	case WaypointTypePLANET:
		*s = WaypointTypePLANET
		return nil
	case WaypointTypeGASGIANT:
		*s = WaypointTypeGASGIANT
		return nil
	case WaypointTypeMOON:
		*s = WaypointTypeMOON
		return nil
	case WaypointTypeORBITALSTATION:
		*s = WaypointTypeORBITALSTATION
		return nil
	case WaypointTypeJUMPGATE:
		*s = WaypointTypeJUMPGATE
		return nil
	case WaypointTypeASTEROIDFIELD:
		*s = WaypointTypeASTEROIDFIELD
		return nil
	case WaypointTypeASTEROID:
		*s = WaypointTypeASTEROID
		return nil
	case WaypointTypeENGINEEREDASTEROID:
		*s = WaypointTypeENGINEEREDASTEROID
		return nil
	case WaypointTypeASTEROIDBASE:
		*s = WaypointTypeASTEROIDBASE
		return nil
	case WaypointTypeNEBULA:
		*s = WaypointTypeNEBULA
		return nil
	case WaypointTypeDEBRISFIELD:
		*s = WaypointTypeDEBRISFIELD
		return nil
	case WaypointTypeGRAVITYWELL:
		*s = WaypointTypeGRAVITYWELL
		return nil
	case WaypointTypeARTIFICIALGRAVITYWELL:
		*s = WaypointTypeARTIFICIALGRAVITYWELL
		return nil
	case WaypointTypeFUELSTATION:
		*s = WaypointTypeFUELSTATION
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
